var self = self || {};// three.js - http://github.com/mrdoob/three.js
'use strict';var THREE={REVISION:"66.87"};self.console=self.console||{info:function(){},log:function(){},debug:function(){},warn:function(){},error:function(){}};
(function(){for(var a=0,b=["ms","moz","webkit","o"],c=0;c<b.length&&!self.requestAnimationFrame;++c)self.requestAnimationFrame=self[b[c]+"RequestAnimationFrame"],self.cancelAnimationFrame=self[b[c]+"CancelAnimationFrame"]||self[b[c]+"CancelRequestAnimationFrame"];void 0===self.requestAnimationFrame&&void 0!==self.setTimeout&&(self.requestAnimationFrame=function(b){var c=Date.now(),f=Math.max(0,16-(c-a)),g=self.setTimeout(function(){b(c+f)},f);a=c+f;return g});void 0===self.cancelAnimationFrame&&void 0!==
self.clearTimeout&&(self.cancelAnimationFrame=function(a){self.clearTimeout(a)})})();THREE.ExceptionErrorHandler=function(a,b){console.error(a);console.error(b);var c=Error(a);c.optionalData=b;throw c;};THREE.ConsoleErrorHandler=function(a,b){console.error(a);console.error(b)};THREE.ConsoleWarningHandler=function(a,b){console.warn(a);console.warn(b)};THREE.NullHandler=function(a,b){};THREE.onerror=THREE.ExceptionErrorHandler;THREE.onwarning=THREE.ConsoleWarningHandler;THREE.CullFaceNone=0;
THREE.CullFaceBack=1;THREE.CullFaceFront=2;THREE.CullFaceFrontBack=3;THREE.FrontFaceDirectionCW=0;THREE.FrontFaceDirectionCCW=1;THREE.BasicShadowMap=0;THREE.PCFShadowMap=1;THREE.PCFSoftShadowMap=2;THREE.FrontSide=0;THREE.BackSide=1;THREE.DoubleSide=2;THREE.NoShading=0;THREE.FlatShading=1;THREE.SmoothShading=2;THREE.NoColors=0;THREE.FaceColors=1;THREE.VertexColors=2;THREE.NoBlending=0;THREE.NormalBlending=1;THREE.AdditiveBlending=2;THREE.SubtractiveBlending=3;THREE.MultiplyBlending=4;
THREE.CustomBlending=5;THREE.AddEquation=100;THREE.SubtractEquation=101;THREE.ReverseSubtractEquation=102;THREE.ZeroFactor=200;THREE.OneFactor=201;THREE.SrcColorFactor=202;THREE.OneMinusSrcColorFactor=203;THREE.SrcAlphaFactor=204;THREE.OneMinusSrcAlphaFactor=205;THREE.DstAlphaFactor=206;THREE.OneMinusDstAlphaFactor=207;THREE.DstColorFactor=208;THREE.OneMinusDstColorFactor=209;THREE.SrcAlphaSaturateFactor=210;THREE.MultiplyOperation=0;THREE.MixOperation=1;THREE.AddOperation=2;THREE.UVMapping=function(){};
THREE.CubeReflectionMapping=function(){};THREE.CubeRefractionMapping=function(){};THREE.SphericalReflectionMapping=function(){};THREE.SphericalRefractionMapping=function(){};THREE.RepeatWrapping=1E3;THREE.ClampToEdgeWrapping=1001;THREE.MirroredRepeatWrapping=1002;THREE.NearestFilter=1003;THREE.NearestMipMapNearestFilter=1004;THREE.NearestMipMapLinearFilter=1005;THREE.LinearFilter=1006;THREE.LinearMipMapNearestFilter=1007;THREE.LinearMipMapLinearFilter=1008;THREE.Linear=3E3;THREE.sRGB=3001;
THREE.RGBE=3002;THREE.LogLUV=3003;THREE.RGBM7=3004;THREE.RGBM16=3005;THREE.UnsignedByteType=1009;THREE.ByteType=1010;THREE.ShortType=1011;THREE.UnsignedShortType=1012;THREE.IntType=1013;THREE.UnsignedIntType=1014;THREE.FloatType=1015;THREE.HalfType=2005;THREE.UnsignedShort4444Type=1016;THREE.UnsignedShort5551Type=1017;THREE.UnsignedShort565Type=1018;THREE.AlphaFormat=1019;THREE.RGBFormat=1020;THREE.RGBAFormat=1021;THREE.LuminanceFormat=1022;THREE.LuminanceAlphaFormat=1023;
THREE.RGB_S3TC_DXT1_Format=2001;THREE.RGBA_S3TC_DXT1_Format=2002;THREE.RGBA_S3TC_DXT3_Format=2003;THREE.RGBA_S3TC_DXT5_Format=2004;THREE.Color=function(a){return 3===arguments.length?this.setRGB(arguments[0],arguments[1],arguments[2]):this.set(a)};
THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,set:function(a){a instanceof THREE.Color?this.copy(a):"number"===typeof a?this.setHex(a):"string"===typeof a&&this.setStyle(a);return this},setHex:function(a){a=Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSL:function(a,b,c){if(0===b)this.r=this.g=this.b=c;else{var d=function(a,b,c){0>c&&(c+=1);1<c&&(c-=1);return c<1/6?a+6*(b-a)*
c:0.5>c?b:c<2/3?a+6*(b-a)*(2/3-c):a};b=0.5>=c?c*(1+b):c+b-c*b;c=2*c-b;this.r=d(c,b,a+1/3);this.g=d(c,b,a);this.b=d(c,b,a-1/3)}return this},setStyle:function(a){if(/^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.test(a))return a=/^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.exec(a),this.r=Math.min(255,parseInt(a[1],10))/255,this.g=Math.min(255,parseInt(a[2],10))/255,this.b=Math.min(255,parseInt(a[3],10))/255,this;if(/^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.test(a))return a=/^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.exec(a),this.r=
Math.min(100,parseInt(a[1],10))/100,this.g=Math.min(100,parseInt(a[2],10))/100,this.b=Math.min(100,parseInt(a[3],10))/100,this;if(/^\#([0-9a-f]{6})$/i.test(a))return a=/^\#([0-9a-f]{6})$/i.exec(a),this.setHex(parseInt(a[1],16)),this;if(/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test(a))return a=/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(a),this.setHex(parseInt(a[1]+a[1]+a[2]+a[2]+a[3]+a[3],16)),this;if(/^(\w+)$/i.test(a))return this.setHex(THREE.ColorKeywords[a]),this},copy:function(a){this.r=a.r;this.g=
a.g;this.b=a.b;return this},copyGammaToLinear:function(a){this.r=a.r*a.r;this.g=a.g*a.g;this.b=a.b*a.b;return this},copyLinearToGamma:function(a){this.r=Math.sqrt(a.r);this.g=Math.sqrt(a.g);this.b=Math.sqrt(a.b);return this},convertGammaToLinear:function(){var a=this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);this.b=Math.sqrt(this.b);return this},getHex:function(){return 255*this.r<<16^255*this.g<<
8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(a){a=a||{h:0,s:0,l:0};var b=this.r,c=this.g,d=this.b,e=Math.max(b,c,d),f=Math.min(b,c,d),g,k=(f+e)/2;if(f===e)f=g=0;else{var h=e-f,f=0.5>=k?h/(e+f):h/(2-e-f);switch(e){case b:g=(c-d)/h+(c<d?6:0);break;case c:g=(d-b)/h+2;break;case d:g=(b-c)/h+4}g/=6}a.h=g;a.s=f;a.l=k;return a},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(a,
b,c){var d=this.getHSL();d.h+=a;d.s+=b;d.l+=c;this.setHSL(d.h,d.s,d.l);return this},add:function(a){this.r+=a.r;this.g+=a.g;this.b+=a.b;return this},addColors:function(a,b){this.r=a.r+b.r;this.g=a.g+b.g;this.b=a.b+b.b;return this},addScalar:function(a){this.r+=a;this.g+=a;this.b+=a;return this},multiply:function(a){this.r*=a.r;this.g*=a.g;this.b*=a.b;return this},multiplyScalar:function(a){this.r*=a;this.g*=a;this.b*=a;return this},lerp:function(a,b){this.r+=(a.r-this.r)*b;this.g+=(a.g-this.g)*b;
this.b+=(a.b-this.b)*b;return this},equals:function(a){return a.r===this.r&&a.g===this.g&&a.b===this.b},fromArray:function(a){this.r=a[0];this.g=a[1];this.b=a[2];return this},toArray:function(){return[this.r,this.g,this.b]},clone:function(){return(new THREE.Color).setRGB(this.r,this.g,this.b)}};
THREE.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,
darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,
grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,
lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,
palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,
tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};THREE.Quaternion=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._w=void 0!==d?d:1};
THREE.Quaternion.prototype={constructor:THREE.Quaternion,_x:0,_y:0,_z:0,_w:0,_euler:void 0,_updateEuler:function(a){void 0!==this._euler&&this._euler.setFromQuaternion(this,void 0,!1)},get x(){return this._x},set x(a){this._x=a;this._updateEuler()},get y(){return this._y},set y(a){this._y=a;this._updateEuler()},get z(){return this._z},set z(a){this._z=a;this._updateEuler()},get w(){return this._w},set w(a){this._w=a;this._updateEuler()},set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._w=
d;this._updateEuler();return this},copy:function(a){this._x=a._x;this._y=a._y;this._z=a._z;this._w=a._w;this._updateEuler();return this},setFromEuler:function(a,b){if(!(a instanceof THREE.Euler))return THREE.onerror("expecting a Euler",a);var c=Math.cos(a._x/2),d=Math.cos(a._y/2),e=Math.cos(a._z/2),f=Math.sin(a._x/2),g=Math.sin(a._y/2),k=Math.sin(a._z/2);"XYZ"===a.order?(this._x=f*d*e+c*g*k,this._y=c*g*e-f*d*k,this._z=c*d*k+f*g*e,this._w=c*d*e-f*g*k):"YXZ"===a.order?(this._x=f*d*e+c*g*k,this._y=c*
g*e-f*d*k,this._z=c*d*k-f*g*e,this._w=c*d*e+f*g*k):"ZXY"===a.order?(this._x=f*d*e-c*g*k,this._y=c*g*e+f*d*k,this._z=c*d*k+f*g*e,this._w=c*d*e-f*g*k):"ZYX"===a.order?(this._x=f*d*e-c*g*k,this._y=c*g*e+f*d*k,this._z=c*d*k-f*g*e,this._w=c*d*e+f*g*k):"YZX"===a.order?(this._x=f*d*e+c*g*k,this._y=c*g*e+f*d*k,this._z=c*d*k-f*g*e,this._w=c*d*e-f*g*k):"XZY"===a.order&&(this._x=f*d*e-c*g*k,this._y=c*g*e-f*d*k,this._z=c*d*k+f*g*e,this._w=c*d*e+f*g*k);!1!==b&&this._updateEuler();return this},setFromAxisAngle:function(a,
b){var c=b/2,d=Math.sin(c);this._x=a.x*d;this._y=a.y*d;this._z=a.z*d;this._w=Math.cos(c);this._updateEuler();return this},setFromRotationMatrix:function(a){var b=a.elements,c=b[0];a=b[4];var d=b[8],e=b[1],f=b[5],g=b[9],k=b[2],h=b[6],b=b[10],m=c+f+b;0<m?(c=0.5/Math.sqrt(m+1),this._w=0.25/c,this._x=(h-g)*c,this._y=(d-k)*c,this._z=(e-a)*c):c>f&&c>b?(c=2*Math.sqrt(1+c-f-b),this._w=(h-g)/c,this._x=0.25*c,this._y=(a+e)/c,this._z=(d+k)/c):f>b?(c=2*Math.sqrt(1+f-c-b),this._w=(d-k)/c,this._x=(a+e)/c,this._y=
0.25*c,this._z=(g+h)/c):(c=2*Math.sqrt(1+b-c-f),this._w=(e-a)/c,this._x=(d+k)/c,this._y=(g+h)/c,this._z=0.25*c);this._updateEuler();return this},inverse:function(){this.conjugate().normalize();return this},add:function(a){this._x+=a._x;this._y+=a._y;this._z+=a._z;this._w+=a._w;return this},sub:function(a){this._x-=a._x;this._y-=a._y;this._z-=a._z;this._w-=a._w;return this},multiplyScalar:function(a){this._x*=a;this._y*=a;this._z*=a;this._w*=a;return this},conjugate:function(){this._x*=-1;this._y*=
-1;this._z*=-1;this._updateEuler();return this},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var a=this.length();0===a?(this._z=this._y=this._x=0,this._w=1):(a=1/a,this._x*=a,this._y*=a,this._z*=a,this._w*=a);return this},multiply:function(a,b){return void 0!==b?(THREE.onwarning("DEPRECATED: Quaternion's .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),
this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)},multiplyQuaternions:function(a,b){var c=a._x,d=a._y,e=a._z,f=a._w,g=b._x,k=b._y,h=b._z,m=b._w;this._x=c*m+f*g+d*h-e*k;this._y=d*m+f*k+e*g-c*h;this._z=e*m+f*h+c*k-d*g;this._w=f*m-c*g-d*k-e*h;this._updateEuler();return this},multiplyVector3:function(a){THREE.onwarning("DEPRECATED: Quaternion's .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");return a.applyQuaternion(this)},slerp:function(a,
b){var c=this._x,d=this._y,e=this._z,f=this._w,g=f*a._w+c*a._x+d*a._y+e*a._z;0>g?(this._w=-a._w,this._x=-a._x,this._y=-a._y,this._z=-a._z,g=-g):this.copy(a);if(1<=g)return this._w=f,this._x=c,this._y=d,this._z=e,this;var k=Math.acos(g),h=Math.sqrt(1-g*g);if(0.001>Math.abs(h))return this._w=0.5*(f+this._w),this._x=0.5*(c+this._x),this._y=0.5*(d+this._y),this._z=0.5*(e+this._z),this;g=Math.sin((1-b)*k)/h;k=Math.sin(b*k)/h;this._w=f*g+this._w*k;this._x=c*g+this._x*k;this._y=d*g+this._y*k;this._z=e*g+
this._z*k;this._updateEuler();return this},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._w===this._w},fromArray:function(a){this._x=a[0];this._y=a[1];this._z=a[2];this._w=a[3];this._updateEuler();return this},toArray:function(){return[this._x,this._y,this._z,this._w]},clone:function(){return new THREE.Quaternion(this._x,this._y,this._z,this._w)}};THREE.Quaternion.slerp=function(a,b,c,d){return c.copy(a).slerp(b,d)};THREE.Vector2=function(a,b){this.x=a||0;this.y=b||0};
THREE.Vector2.prototype={constructor:THREE.Vector2,set:function(a,b){this.x=a;this.y=b;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:return THREE.onerror("index is out of range: "+a)}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;default:return THREE.onerror("index is out of range: "+a)}},copy:function(a){this.x=a.x;this.y=a.y;return this},
add:function(a,b){if(void 0!==b)return THREE.onwarning("DEPRECATED: Vector2's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},addScalar:function(a){this.x+=a;this.y+=a;return this},sub:function(a,b){if(void 0!==b)return THREE.onwarning("DEPRECATED: Vector2's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,
b);this.x-=a.x;this.y-=a.y;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a):this.y=this.x=0;return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:
this.y>b.y&&(this.y=b.y);return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector2,b=new THREE.Vector2);a.set(c,c);b.set(d,d);return this.clamp(a,b)}}(),floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);
this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},normalize:function(){return this.divideScalar(this.length())},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x;a=this.y-a.y;return b*b+a*a},setLength:function(a){var b=
this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y},fromArray:function(a){this.x=a[0];this.y=a[1];return this},toArray:function(){return[this.x,this.y]},clone:function(){return new THREE.Vector2(this.x,this.y)}};THREE.Vector3=function(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0};
THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;default:return THREE.onerror("index is out of range: "+a)}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:return THREE.onerror("index is out of range: "+
a)}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,b){if(void 0!==b)return THREE.onwarning("DEPRECATED: Vector3's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},sub:function(a,b){if(void 0!==b)return THREE.onwarningn("DEPRECATED: Vector3's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},multiply:function(a,b){if(void 0!==b)return THREE.onwarning("DEPRECATED: Vector3's .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(a,b);this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;return this},multiplyVectors:function(a,b){this.x=
a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},applyEuler:function(){var a;return function(b){if(!(b instanceof THREE.Euler))return THREE.onerror("expecting an Euler",b);void 0===a&&(a=new THREE.Quaternion);this.applyQuaternion(a.setFromEuler(b));return this}}(),applyAxisAngle:function(){var a;return function(b,c){void 0===a&&(a=new THREE.Quaternion);this.applyQuaternion(a.setFromAxisAngle(b,c));return this}}(),applyMatrix3:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+
a[3]*c+a[6]*d;this.y=a[1]*b+a[4]*c+a[7]*d;this.z=a[2]*b+a[5]*c+a[8]*d;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12];this.y=a[1]*b+a[5]*c+a[9]*d+a[13];this.z=a[2]*b+a[6]*c+a[10]*d+a[14];return this},applyProjection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;var e=1/(a[3]*b+a[7]*c+a[11]*d+a[15]);this.x=(a[0]*b+a[4]*c+a[8]*d+a[12])*e;this.y=(a[1]*b+a[5]*c+a[9]*d+a[13])*e;this.z=(a[2]*b+a[6]*c+a[10]*d+a[14])*e;return this},
applyQuaternion:function(a){var b=this.x,c=this.y,d=this.z,e=a.x,f=a.y,g=a.z;a=a.w;var k=a*b+f*d-g*c,h=a*c+g*b-e*d,m=a*d+e*c-f*b,b=-e*b-f*c-g*d;this.x=k*a+b*-e+h*-g-m*-f;this.y=h*a+b*-f+m*-e-k*-g;this.z=m*a+b*-g+k*-f-h*-e;return this},transformDirection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d;this.y=a[1]*b+a[5]*c+a[9]*d;this.z=a[2]*b+a[6]*c+a[10]*d;this.normalize();return this},divide:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){0!==
a?(a=1/a,this.x*=a,this.y*=a,this.z*=a):this.z=this.y=this.x=0;return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&(this.z=a.z);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);return this},clampScalar:function(){var a,b;return function(c,
d){void 0===a&&(a=new THREE.Vector3,b=new THREE.Vector3);a.set(c,c,c);b.set(d,d,d);return this.clamp(a,b)}}(),floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);
this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},
setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},cross:function(a,b){if(void 0!==b)return THREE.onwarning("DEPRECATED: Vector3's .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(a,b);var c=this.x,d=this.y,e=this.z;this.x=d*a.z-e*a.y;this.y=e*a.x-c*a.z;this.z=c*a.y-d*a.x;return this},crossVectors:function(a,b){var c=
a.x,d=a.y,e=a.z,f=b.x,g=b.y,k=b.z;this.x=d*k-e*g;this.y=e*f-c*k;this.z=c*g-d*f;return this},projectOnVector:function(){var a,b;return function(c){void 0===a&&(a=new THREE.Vector3);a.copy(c).normalize();b=this.dot(a);return this.copy(a).multiplyScalar(b)}}(),projectOnPlane:function(){var a;return function(b){void 0===a&&(a=new THREE.Vector3);a.copy(this).projectOnVector(b);return this.sub(a)}}(),reflect:function(){var a;return function(b){void 0===a&&(a=new THREE.Vector3);return this.sub(a.copy(b).multiplyScalar(2*
this.dot(b)))}}(),angleTo:function(a){a=this.dot(a)/(this.length()*a.length());return Math.acos(THREE.Math.clamp(a,-1,1))},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,c=this.y-a.y;a=this.z-a.z;return b*b+c*c+a*a},setEulerFromRotationMatrix:function(a,b){THREE.onerror("REMOVED: Vector3's setEulerFromRotationMatrix has been removed in favor of Euler.setFromRotationMatrix(), please update your code.")},setEulerFromQuaternion:function(a,
b){THREE.onerror("REMOVED: Vector3's setEulerFromQuaternion: has been removed in favor of Euler.setFromQuaternion(), please update your code.")},getPositionFromMatrix:function(a){THREE.onwarning("DEPRECATED: Vector3's .getPositionFromMatrix() has been renamed to .setFromMatrixPosition(). Please update your code.");return this.setFromMatrixPosition(a)},getScaleFromMatrix:function(a){THREE.onwarning("DEPRECATED: Vector3's .getScaleFromMatrix() has been renamed to .setFromMatrixScale(). Please update your code.");
return this.setFromMatrixScale(a)},getColumnFromMatrix:function(a,b){THREE.onwarning("DEPRECATED: Vector3's .getColumnFromMatrix() has been renamed to .setFromMatrixColumn(). Please update your code.");return this.setFromMatrixColumn(a,b)},setFromMatrixPosition:function(a){this.x=a.elements[12];this.y=a.elements[13];this.z=a.elements[14];return this},setFromMatrixScale:function(a){var b=this.set(a.elements[0],a.elements[1],a.elements[2]).length(),c=this.set(a.elements[4],a.elements[5],a.elements[6]).length();
a=this.set(a.elements[8],a.elements[9],a.elements[10]).length();this.x=b;this.y=c;this.z=a;return this},setFromMatrixColumn:function(a,b){var c=4*a,d=b.elements;this.x=d[c];this.y=d[c+1];this.z=d[c+2];return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},fromArray:function(a){this.x=a[0];this.y=a[1];this.z=a[2];return this},toArray:function(){return[this.x,this.y,this.z]},clone:function(){return new THREE.Vector3(this.x,this.y,this.z)}};THREE.Vector4=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setW:function(a){this.w=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;case 3:this.w=b;break;default:return THREE.onerror("index is out of range: "+a)}},getComponent:function(a){switch(a){case 0:return this.x;
case 1:return this.y;case 2:return this.z;case 3:return this.w;default:return THREE.onerror("index is out of range: "+a)}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){if(void 0!==b)return THREE.onwarning("DEPRECATED: Vector4's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;this.w+=
a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},sub:function(a,b){if(void 0!==b)return THREE.onwarning("DEPRECATED: Vector4's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;
this.w*=a;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,e=this.w;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e;this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e;this.z=a[2]*b+a[6]*c+a[10]*d+a[14]*e;this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a,this.z*=a,this.w*=a):(this.z=this.y=this.x=0,this.w=1);return this},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);1E-4>b?(this.x=1,this.z=this.y=
0):(this.x=a.x/b,this.y=a.y/b,this.z=a.z/b);return this},setAxisAngleFromRotationMatrix:function(a){var b,c,d;a=a.elements;var e=a[0];d=a[4];var f=a[8],g=a[1],k=a[5],h=a[9];c=a[2];b=a[6];var m=a[10];if(0.01>Math.abs(d-g)&&0.01>Math.abs(f-c)&&0.01>Math.abs(h-b)){if(0.1>Math.abs(d+g)&&0.1>Math.abs(f+c)&&0.1>Math.abs(h+b)&&0.1>Math.abs(e+k+m-3))return this.set(1,0,0,0),this;a=Math.PI;e=(e+1)/2;k=(k+1)/2;m=(m+1)/2;d=(d+g)/4;f=(f+c)/4;h=(h+b)/4;e>k&&e>m?0.01>e?(b=0,d=c=0.707106781):(b=Math.sqrt(e),c=d/
b,d=f/b):k>m?0.01>k?(b=0.707106781,c=0,d=0.707106781):(c=Math.sqrt(k),b=d/c,d=h/c):0.01>m?(c=b=0.707106781,d=0):(d=Math.sqrt(m),b=f/d,c=h/d);this.set(b,c,d,a);return this}a=Math.sqrt((b-h)*(b-h)+(f-c)*(f-c)+(g-d)*(g-d));0.001>Math.abs(a)&&(a=1);this.x=(b-h)/a;this.y=(f-c)/a;this.z=(g-d)/a;this.w=Math.acos((e+k+m-1)/2);return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);this.w>a.w&&(this.w=a.w);return this},max:function(a){this.x<a.x&&(this.x=a.x);
this.y<a.y&&(this.y=a.y);this.z<a.z&&(this.z=a.z);this.w<a.w&&(this.w=a.w);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);this.w<a.w?this.w=a.w:this.w>b.w&&(this.w=b.w);return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector4,b=new THREE.Vector4);a.set(c,c,c,c);b.set(d,d,d,d);return this.clamp(a,b)}}(),floor:function(){this.x=Math.floor(this.x);
this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):
Math.floor(this.z);this.w=0>this.w?Math.ceil(this.w):Math.floor(this.w);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},
setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;this.w+=(a.w-this.w)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&a.w===this.w},fromArray:function(a){this.x=a[0];this.y=a[1];this.z=a[2];this.w=a[3];return this},toArray:function(){return[this.x,this.y,this.z,this.w]},clone:function(){return new THREE.Vector4(this.x,this.y,this.z,
this.w)}};THREE.Euler=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._order=d||THREE.Euler.DefaultOrder};THREE.Euler.RotationOrders="XYZ YZX ZXY XZY YXZ ZYX".split(" ");THREE.Euler.DefaultOrder="XYZ";
THREE.Euler.prototype={constructor:THREE.Euler,_x:0,_y:0,_z:0,_order:THREE.Euler.DefaultOrder,_quaternion:void 0,_updateQuaternion:function(){void 0!==this._quaternion&&this._quaternion.setFromEuler(this,!1)},get x(){return this._x},set x(a){this._x=a;this._updateQuaternion()},get y(){return this._y},set y(a){this._y=a;this._updateQuaternion()},get z(){return this._z},set z(a){this._z=a;this._updateQuaternion()},get order(){return this._order},set order(a){this._order=a;this._updateQuaternion()},
set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._order=d||this._order;this._updateQuaternion();return this},setFromVector:function(a,b){this._x=a.x;this._y=a.y;this._z=a.z;this._order=b||this._order;this._updateQuaternion();return this},copy:function(a){this._x=a._x;this._y=a._y;this._z=a._z;this._order=a._order;this._updateQuaternion();return this},setFromRotationMatrix:function(a,b,c){function d(a){return Math.min(Math.max(a,-1),1)}var e=a.elements;a=e[0];var f=e[4],g=e[8],k=e[1],h=e[5],
m=e[9],n=e[2],q=e[6],e=e[10];b=b||this._order;if("XYZ"===b)this._y=Math.asin(d(g)),0.99999>Math.abs(g)?(this._x=Math.atan2(-m,e),this._z=Math.atan2(-f,a)):(this._x=Math.atan2(q,h),this._z=0);else if("YXZ"===b)this._x=Math.asin(-d(m)),0.99999>Math.abs(m)?(this._y=Math.atan2(g,e),this._z=Math.atan2(k,h)):(this._y=Math.atan2(-n,a),this._z=0);else if("ZXY"===b)this._x=Math.asin(d(q)),0.99999>Math.abs(q)?(this._y=Math.atan2(-n,e),this._z=Math.atan2(-f,h)):(this._y=0,this._z=Math.atan2(k,a));else if("ZYX"===
b)this._y=Math.asin(-d(n)),0.99999>Math.abs(n)?(this._x=Math.atan2(q,e),this._z=Math.atan2(k,a)):(this._x=0,this._z=Math.atan2(-f,h));else if("YZX"===b)this._z=Math.asin(d(k)),0.99999>Math.abs(k)?(this._x=Math.atan2(-m,h),this._y=Math.atan2(-n,a)):(this._x=0,this._y=Math.atan2(g,e));else if("XZY"===b)this._z=Math.asin(-d(f)),0.99999>Math.abs(f)?(this._x=Math.atan2(q,h),this._y=Math.atan2(g,a)):(this._x=Math.atan2(-m,e),this._y=0);else THREE.onwarning("WARNING: Euler.setFromRotationMatrix() given unsupported order: "+
b);this._order=b;!1!==c&&this._updateQuaternion();return this},setFromQuaternion:function(){var a=null;return function(b,c,d){a=a||new THREE.Matrix4;a.makeRotationFromQuaternion(b);this.setFromRotationMatrix(a,c,d);return this}}(),reorder:function(){var a=new THREE.Quaternion;return function(b){a.setFromEuler(this);this.setFromQuaternion(a,b)}}(),fromArray:function(a){this._x=a[0];this._y=a[1];this._z=a[2];void 0!==a[3]&&(this._order=a[3]);this._updateQuaternion();return this},toArray:function(){return[this._x,
this._y,this._z,this._order]},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._order===this._order},toVector3:function(a){return a?a.set(this._x,this._y,this._z):new THREE.Vector3(this._x,this._y,this._z)},clone:function(){return new THREE.Euler(this._x,this._y,this._z,this._order)}};THREE.Line3=function(a,b){this.start=void 0!==a?a:new THREE.Vector3;this.end=void 0!==b?b:new THREE.Vector3};
THREE.Line3.prototype={constructor:THREE.Line3,set:function(a,b){this.start.copy(a);this.end.copy(b);return this},copy:function(a){this.start.copy(a.start);this.end.copy(a.end);return this},center:function(a){return(a||new THREE.Vector3).addVectors(this.start,this.end).multiplyScalar(0.5)},delta:function(a){return(a||new THREE.Vector3).subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(a,
b){var c=b||new THREE.Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},closestPointToPointParameter:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d){a.subVectors(c,this.start);b.subVectors(this.end,this.start);var e=b.dot(b),e=b.dot(a)/e;d&&(e=THREE.Math.clamp(e,0,1));return e}}(),closestPointToPoint:function(a,b,c){a=this.closestPointToPointParameter(a,b);c=c||new THREE.Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},applyMatrix4:function(a){this.start.applyMatrix4(a);
this.end.applyMatrix4(a);return this},equals:function(a){return a.start.equals(this.start)&&a.end.equals(this.end)},clone:function(){return(new THREE.Line3).copy(this)}};THREE.Box2=function(a,b){this.min=void 0!==a?a:new THREE.Vector2(Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector2(-Infinity,-Infinity)};
THREE.Box2.prototype={constructor:THREE.Box2,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){if(0<a.length){var b=a[0];this.min.copy(b);this.max.copy(b);for(var c=1,d=a.length;c<d;c++)b=a[c],b.x<this.min.x?this.min.x=b.x:b.x>this.max.x&&(this.max.x=b.x),b.y<this.min.y?this.min.y=b.y:b.y>this.max.y&&(this.max.y=b.y)}else this.makeEmpty();return this},setFromCenterAndSize:function(){var a=new THREE.Vector2;return function(b,c){var d=a.copy(c).multiplyScalar(0.5);
this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=Infinity;this.max.x=this.max.y=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(a){return(a||new THREE.Vector2).addVectors(this.min,this.max).multiplyScalar(0.5)},size:function(a){return(a||new THREE.Vector2).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);
this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y?!0:!1},getParameter:function(a,b){return(b||new THREE.Vector2).set((a.x-this.min.x)/(this.max.x-this.min.x),
(a.y-this.min.y)/(this.max.y-this.min.y))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector2).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector2;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);
return this},translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)},clone:function(){return(new THREE.Box2).copy(this)}};THREE.Box3=function(a,b){this.min=void 0!==a?a:new THREE.Vector3(Infinity,Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector3(-Infinity,-Infinity,-Infinity)};
THREE.Box3.prototype={constructor:THREE.Box3,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},addPoint:function(a){a.x<this.min.x?this.min.x=a.x:a.x>this.max.x&&(this.max.x=a.x);a.y<this.min.y?this.min.y=a.y:a.y>this.max.y&&(this.max.y=a.y);a.z<this.min.z?this.min.z=a.z:a.z>this.max.z&&(this.max.z=a.z)},setFromPoints:function(a){if(0<a.length){var b=a[0];this.min.copy(b);this.max.copy(b);for(var b=1,c=a.length;b<c;b++)this.addPoint(a[b])}else this.makeEmpty();return this},setFromCenterAndSize:function(){var a=
new THREE.Vector3;return function(b,c){var d=a.copy(c).multiplyScalar(0.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),setFromObject:function(){var a=new THREE.Vector3;return function(b){var c=this;b.updateMatrixWorld(!0);this.makeEmpty();b.traverse(function(b){if(void 0!==b.geometry&&void 0!==b.geometry.vertices)for(var e=b.geometry.vertices,f=0,g=e.length;f<g;f++)a.copy(e[f]),a.applyMatrix4(b.matrixWorld),c.expandByPoint(a)});return this}}(),copy:function(a){this.min.copy(a.min);
this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},center:function(a){return(a||new THREE.Vector3).addVectors(this.min,this.max).multiplyScalar(0.5)},size:function(a){return(a||new THREE.Vector3).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);
this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||a.z<this.min.z||a.z>this.max.z?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z?!0:!1},getParameter:function(a,b){return(b||new THREE.Vector3).set((a.x-this.min.x)/(this.max.x-
this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||a.max.z<this.min.z||a.min.z>this.max.z?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector3).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),getBoundingSphere:function(){var a=
new THREE.Vector3;return function(b){b=b||new THREE.Sphere;b.center=this.center();b.radius=0.5*this.size(a).length();return b}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},applyMatrix4:function(){var a=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(b){a[0].set(this.min.x,this.min.y,
this.min.z).applyMatrix4(b);a[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(b);a[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(b);a[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(b);a[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(b);a[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(b);a[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(b);a[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(b);this.makeEmpty();this.setFromPoints(a);return this}}(),translate:function(a){this.min.add(a);
this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)},clone:function(){return(new THREE.Box3).copy(this)}};THREE.Matrix3=function(a,b,c,d,e,f,g,k,h){this.elements=new Float32Array(9);this.set(void 0!==a?a:1,b||0,c||0,d||0,void 0!==e?e:1,f||0,g||0,k||0,void 0!==h?h:1)};
THREE.Matrix3.prototype={constructor:THREE.Matrix3,set:function(a,b,c,d,e,f,g,k,h){var m=this.elements;m[0]=a;m[3]=b;m[6]=c;m[1]=d;m[4]=e;m[7]=f;m[2]=g;m[5]=k;m[8]=h;return this},identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},copy:function(a){a=a.elements;this.set(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8]);return this},multiplyVector3:function(a){THREE.onwarning("DEPRECATED: Matrix3's .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return a.applyMatrix3(this)},
multiplyVector3Array:function(){var a=new THREE.Vector3;return function(b){for(var c=0,d=b.length;c<d;c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyMatrix3(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[3]*=a;b[6]*=a;b[1]*=a;b[4]*=a;b[7]*=a;b[2]*=a;b[5]*=a;b[8]*=a;return this},determinant:function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],g=a[5],k=a[6],h=a[7],a=a[8];return b*f*a-b*g*h-c*e*a+c*g*k+d*e*h-d*f*k},getInverse:function(a,
b){if(!(a instanceof THREE.Matrix4))return THREE.onerror("expecting a Matrix4",a);var c=a.elements,d=this.elements;d[0]=c[10]*c[5]-c[6]*c[9];d[1]=-c[10]*c[1]+c[2]*c[9];d[2]=c[6]*c[1]-c[2]*c[5];d[3]=-c[10]*c[4]+c[6]*c[8];d[4]=c[10]*c[0]-c[2]*c[8];d[5]=-c[6]*c[0]+c[2]*c[4];d[6]=c[9]*c[4]-c[5]*c[8];d[7]=-c[9]*c[0]+c[1]*c[8];d[8]=c[5]*c[0]-c[1]*c[4];c=c[0]*d[0]+c[1]*d[3]+c[2]*d[6];if(0===c){if(!0===b)return THREE.onerror("Matrix3.getInverse(): can't invert matrix, determinant is 0",this);this.identity();
return this}this.multiplyScalar(1/c);return this},transpose:function(){var a,b=this.elements;a=b[1];b[1]=b[3];b[3]=a;a=b[2];b[2]=b[6];b[6]=a;a=b[5];b[5]=b[7];b[7]=a;return this},getNormalMatrix:function(a){this.getInverse(a).transpose();return this},transposeIntoArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this},fromArray:function(a){this.elements.set(a);return this},toArray:function(){var a=this.elements;return[a[0],
a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8]]},clone:function(){var a=this.elements;return new THREE.Matrix3(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8])}};THREE.Matrix4=function(a,b,c,d,e,f,g,k,h,m,n,q,s,r,u,p){var w=this.elements=new Float32Array(16);w[0]=void 0!==a?a:1;w[4]=b||0;w[8]=c||0;w[12]=d||0;w[1]=e||0;w[5]=void 0!==f?f:1;w[9]=g||0;w[13]=k||0;w[2]=h||0;w[6]=m||0;w[10]=void 0!==n?n:1;w[14]=q||0;w[3]=s||0;w[7]=r||0;w[11]=u||0;w[15]=void 0!==p?p:1};
THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(a,b,c,d,e,f,g,k,h,m,n,q,s,r,u,p){var w=this.elements;w[0]=a;w[4]=b;w[8]=c;w[12]=d;w[1]=e;w[5]=f;w[9]=g;w[13]=k;w[2]=h;w[6]=m;w[10]=n;w[14]=q;w[3]=s;w[7]=r;w[11]=u;w[15]=p;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},copy:function(a){this.elements.set(a.elements);return this},extractPosition:function(a){THREE.onwarning("DEPRECATED: Matrix4's .extractPosition() has been renamed to .copyPosition().");
return this.copyPosition(a)},copyPosition:function(a){var b=this.elements;a=a.elements;b[12]=a[12];b[13]=a[13];b[14]=a[14];return this},extractBasis:function(a,b,c){var d=this.elements;a.set(d[0],d[1],d[2]);b.set(d[4],d[5],d[6]);c.set(d[8],d[9],d[10]);return this},makeBasis:function(a,b,c){this.identity();var d=this.elements;d.elements[0]=a.x;d.elements[1]=a.y;d.elements[2]=a.z;d.elements[4]=b.x;d.elements[5]=b.y;d.elements[6]=b.z;d.elements[8]=c.x;d.elements[9]=c.y;d.elements[10]=c.z;return this},
extractRotation:function(){var a=new THREE.Vector3;return function(b){var c=this.elements;b=b.elements;var d=1/a.set(b[0],b[1],b[2]).length(),e=1/a.set(b[4],b[5],b[6]).length(),f=1/a.set(b[8],b[9],b[10]).length();c[0]=b[0]*d;c[1]=b[1]*d;c[2]=b[2]*d;c[4]=b[4]*e;c[5]=b[5]*e;c[6]=b[6]*e;c[8]=b[8]*f;c[9]=b[9]*f;c[10]=b[10]*f;return this}}(),makeRotationFromEuler:function(a){if(!(a instanceof THREE.Euler))return THREE.onerror("expecting a Euler",a);var b=this.elements,c=a.x,d=a.y,e=a.z,f=Math.cos(c),c=
Math.sin(c),g=Math.cos(d),d=Math.sin(d),k=Math.cos(e),e=Math.sin(e);if("XYZ"===a.order){a=f*k;var h=f*e,m=c*k,n=c*e;b[0]=g*k;b[4]=-g*e;b[8]=d;b[1]=h+m*d;b[5]=a-n*d;b[9]=-c*g;b[2]=n-a*d;b[6]=m+h*d;b[10]=f*g}else"YXZ"===a.order?(a=g*k,h=g*e,m=d*k,n=d*e,b[0]=a+n*c,b[4]=m*c-h,b[8]=f*d,b[1]=f*e,b[5]=f*k,b[9]=-c,b[2]=h*c-m,b[6]=n+a*c,b[10]=f*g):"ZXY"===a.order?(a=g*k,h=g*e,m=d*k,n=d*e,b[0]=a-n*c,b[4]=-f*e,b[8]=m+h*c,b[1]=h+m*c,b[5]=f*k,b[9]=n-a*c,b[2]=-f*d,b[6]=c,b[10]=f*g):"ZYX"===a.order?(a=f*k,h=f*e,
m=c*k,n=c*e,b[0]=g*k,b[4]=m*d-h,b[8]=a*d+n,b[1]=g*e,b[5]=n*d+a,b[9]=h*d-m,b[2]=-d,b[6]=c*g,b[10]=f*g):"YZX"===a.order?(a=f*g,h=f*d,m=c*g,n=c*d,b[0]=g*k,b[4]=n-a*e,b[8]=m*e+h,b[1]=e,b[5]=f*k,b[9]=-c*k,b[2]=-d*k,b[6]=h*e+m,b[10]=a-n*e):"XZY"===a.order&&(a=f*g,h=f*d,m=c*g,n=c*d,b[0]=g*k,b[4]=-e,b[8]=d*k,b[1]=a*e+n,b[5]=f*k,b[9]=h*e-m,b[2]=m*e-h,b[6]=c*k,b[10]=n*e+a);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},setRotationFromQuaternion:function(a){THREE.onwarning("DEPRECATED: Matrix4's .setRotationFromQuaternion() has been deprecated in favor of makeRotationFromQuaternion.  Please update your code.");
return this.makeRotationFromQuaternion(a)},makeRotationFromQuaternion:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,f=a.w,g=c+c,k=d+d,h=e+e;a=c*g;var m=c*k,c=c*h,n=d*k,d=d*h,e=e*h,g=f*g,k=f*k,f=f*h;b[0]=1-(n+e);b[4]=m-f;b[8]=c+k;b[1]=m+f;b[5]=1-(a+e);b[9]=d-g;b[2]=c-k;b[6]=d+g;b[10]=1-(a+n);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},lookAt:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f){var g=this.elements;c.subVectors(d,
e).normalize();0===c.length()&&(c.z=1);a.crossVectors(f,c).normalize();0===a.length()&&(c.x+=1E-4,a.crossVectors(f,c).normalize());b.crossVectors(c,a);g[0]=a.x;g[4]=b.x;g[8]=c.x;g[1]=a.y;g[5]=b.y;g[9]=c.y;g[2]=a.z;g[6]=b.z;g[10]=c.z;return this}}(),multiply:function(a,b){return void 0!==b?(THREE.onwarning("DEPRECATED: Matrix4's .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)},multiplyList:function(a){for(var b=
0,c=a.length;b<c;b++)this.multiplyMatrices(this,a[b]);return this},multiplyMatricesList:function(a){0<a.length?(this.copy(a[0]),this.multiplyList(a.slice(1))):this.identity();return this},multiplyMatrices:function(a,b){if(!(a instanceof THREE.Matrix4))return THREE.onerror("expecting a Matrix4",a);if(!(b instanceof THREE.Matrix4))return THREE.onerror("expecting a Matrix4",b);var c=a.elements,d=b.elements,e=this.elements,f=c[0],g=c[4],k=c[8],h=c[12],m=c[1],n=c[5],q=c[9],s=c[13],r=c[2],u=c[6],p=c[10],
w=c[14],v=c[3],t=c[7],x=c[11],c=c[15],B=d[0],J=d[4],E=d[8],K=d[12],A=d[1],z=d[5],L=d[9],F=d[13],P=d[2],y=d[6],G=d[10],C=d[14],D=d[3],H=d[7],Q=d[11],d=d[15];e[0]=f*B+g*A+k*P+h*D;e[4]=f*J+g*z+k*y+h*H;e[8]=f*E+g*L+k*G+h*Q;e[12]=f*K+g*F+k*C+h*d;e[1]=m*B+n*A+q*P+s*D;e[5]=m*J+n*z+q*y+s*H;e[9]=m*E+n*L+q*G+s*Q;e[13]=m*K+n*F+q*C+s*d;e[2]=r*B+u*A+p*P+w*D;e[6]=r*J+u*z+p*y+w*H;e[10]=r*E+u*L+p*G+w*Q;e[14]=r*K+u*F+p*C+w*d;e[3]=v*B+t*A+x*P+c*D;e[7]=v*J+t*z+x*y+c*H;e[11]=v*E+t*L+x*G+c*Q;e[15]=v*K+t*F+x*C+c*d;return this},
multiplyToArray:function(a,b,c){var d=this.elements;this.multiplyMatrices(a,b);c[0]=d[0];c[1]=d[1];c[2]=d[2];c[3]=d[3];c[4]=d[4];c[5]=d[5];c[6]=d[6];c[7]=d[7];c[8]=d[8];c[9]=d[9];c[10]=d[10];c[11]=d[11];c[12]=d[12];c[13]=d[13];c[14]=d[14];c[15]=d[15];return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=a;b[15]*=a;return this},multiplyVector3:function(a){THREE.onwarning("DEPRECATED: Matrix4's .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");
return a.applyProjection(this)},multiplyVector4:function(a){THREE.onwarning("DEPRECATED: Matrix4's .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},multiplyVector3Array:function(){var a=new THREE.Vector3;return function(b){for(var c=0,d=b.length;c<d;c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyProjection(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),rotateAxis:function(a){THREE.onwarning("DEPRECATED: Matrix4's .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
a.transformDirection(this)},crossVector:function(a){THREE.onwarning("DEPRECATED: Matrix4's .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},determinant:function(){var a=this.elements,b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],g=a[5],k=a[9],h=a[13],m=a[2],n=a[6],q=a[10],s=a[14];return a[3]*(+e*k*n-d*h*n-e*g*q+c*h*q+d*g*s-c*k*s)+a[7]*(+b*k*s-b*h*q+e*f*q-d*f*s+d*h*m-e*k*m)+a[11]*(+b*h*n-b*g*s-e*f*n+c*f*s+e*g*m-c*h*m)+a[15]*(-d*g*m-b*k*n+b*g*q+d*f*n-
c*f*q+c*k*m)},transpose:function(){var a=this.elements,b;b=a[1];a[1]=a[4];a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];a[13]=b;b=a[11];a[11]=a[14];a[14]=b;return this},flattenToArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[1];a[2]=b[2];a[3]=b[3];a[4]=b[4];a[5]=b[5];a[6]=b[6];a[7]=b[7];a[8]=b[8];a[9]=b[9];a[10]=b[10];a[11]=b[11];a[12]=b[12];a[13]=b[13];a[14]=b[14];a[15]=b[15];return a},flattenToArrayOffset:function(a,b){var c=this.elements;
a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a},getPosition:function(){var a=new THREE.Vector3;return function(){THREE.onwarning("DEPRECATED: Matrix4's .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");var b=this.elements;return a.set(b[12],b[13],b[14])}}(),setPosition:function(a){var b=this.elements;
b[12]=a.x;b[13]=a.y;b[14]=a.z;return this},getInverse:function(a,b){var c=this.elements,d=a.elements,e=d[0],f=d[4],g=d[8],k=d[12],h=d[1],m=d[5],n=d[9],q=d[13],s=d[2],r=d[6],u=d[10],p=d[14],w=d[3],v=d[7],t=d[11],d=d[15];c[0]=n*p*v-q*u*v+q*r*t-m*p*t-n*r*d+m*u*d;c[4]=k*u*v-g*p*v-k*r*t+f*p*t+g*r*d-f*u*d;c[8]=g*q*v-k*n*v+k*m*t-f*q*t-g*m*d+f*n*d;c[12]=k*n*r-g*q*r-k*m*u+f*q*u+g*m*p-f*n*p;c[1]=q*u*w-n*p*w-q*s*t+h*p*t+n*s*d-h*u*d;c[5]=g*p*w-k*u*w+k*s*t-e*p*t-g*s*d+e*u*d;c[9]=k*n*w-g*q*w-k*h*t+e*q*t+g*h*d-
e*n*d;c[13]=g*q*s-k*n*s+k*h*u-e*q*u-g*h*p+e*n*p;c[2]=m*p*w-q*r*w+q*s*v-h*p*v-m*s*d+h*r*d;c[6]=k*r*w-f*p*w-k*s*v+e*p*v+f*s*d-e*r*d;c[10]=f*q*w-k*m*w+k*h*v-e*q*v-f*h*d+e*m*d;c[14]=k*m*s-f*q*s-k*h*r+e*q*r+f*h*p-e*m*p;c[3]=n*r*w-m*u*w-n*s*v+h*u*v+m*s*t-h*r*t;c[7]=f*u*w-g*r*w+g*s*v-e*u*v-f*s*t+e*r*t;c[11]=g*m*w-f*n*w-g*h*v+e*n*v+f*h*t-e*m*t;c[15]=f*n*s-g*m*s+g*h*r-e*n*r-f*h*u+e*m*u;c=e*c[0]+h*c[4]+s*c[8]+w*c[12];if(0==c){if(!0===b)return THREE.onerror("Matrix4.getInverse(): can't invert matrix, determinant is 0",
this);this.identity();return this}this.multiplyScalar(1/c);return this},translate:function(a){THREE.onerror("DEPRECATED: Matrix4's .translate() has been removed.")},rotateX:function(a){THREE.onerror("DEPRECATED: Matrix4's .rotateX() has been removed.")},rotateY:function(a){THREE.onerror("DEPRECATED: Matrix4's .rotateY() has been removed.")},rotateZ:function(a){THREE.onerror("DEPRECATED: Matrix4's .rotateZ() has been removed.")},rotateByAxis:function(a,b){THREE.onerror("DEPRECATED: Matrix4's .rotateByAxis() has been removed.")},
scale:function(a){var b=this.elements,c=a.x,d=a.y;a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],Math.max(a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10])))},makeTranslation:function(a,b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(1,
0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);return this},makeRotationY:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=1-c,f=a.x,g=a.y,k=a.z,h=e*f,m=e*g;this.set(h*f+c,h*g-d*k,h*k+d*g,0,h*g+d*k,m*g+c,m*k-d*f,0,h*k-d*g,m*k+d*f,e*k*k+c,0,0,0,0,1);return this},makeScale:function(a,b,c){this.set(a,
0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);return this},makeShear:function(a,b){var c=a.x,d=a.y,e=a.z;b?this.set(1,0,0,0,c,1,0,0,d,e,1,0,0,0,0,1):this.set(1,c,d,0,0,1,e,0,0,0,1,0,0,0,0,1);return this},compose:function(a,b,c){this.makeRotationFromQuaternion(b);this.scale(c);this.setPosition(a);return this},decompose:function(){var a=new THREE.Vector3,b=new THREE.Matrix4;return function(c,d,e){var f=this.elements,g=a.set(f[0],f[1],f[2]).length(),k=a.set(f[4],f[5],f[6]).length(),h=a.set(f[8],f[9],f[10]).length();
0>this.determinant()&&(g=-g);c.x=f[12];c.y=f[13];c.z=f[14];b.elements.set(this.elements);c=1/g;var f=1/k,m=1/h;b.elements[0]*=c;b.elements[1]*=c;b.elements[2]*=c;b.elements[4]*=f;b.elements[5]*=f;b.elements[6]*=f;b.elements[8]*=m;b.elements[9]*=m;b.elements[10]*=m;d.setFromRotationMatrix(b);e.x=g;e.y=k;e.z=h;return this}}(),makeFrustum:function(a,b,c,d,e,f,g,k){var h=this.elements;h[0]=2*e/(b-a);h[4]=0;h[8]=(b+a)/(b-a);h[12]=0;h[1]=0;h[5]=2*e/(d-c);h[9]=(d+c)/(d-c);h[13]=0;h[2]=0;h[6]=0;h[10]=-(f+
e)/(f-e);h[14]=-2*f*e/(f-e);h[3]=0;h[7]=0;h[11]=-1;h[15]=0;g&&k&&(0!==k.x&&(h[8]+=2*g.x/k.x),0!==k.y&&(h[9]+=2*g.y/k.y));return this},makePerspective:function(a,b,c,d,e,f){a=c*Math.tan(THREE.Math.degToRad(0.5*a));var g=-a;return this.makeFrustum(g*b,a*b,g,a,c,d,e,f)},makeOrthographic:function(a,b,c,d,e,f){var g=this.elements,k=b-a,h=c-d,m=f-e;g[0]=2/k;g[4]=0;g[8]=0;g[12]=-((b+a)/k);g[1]=0;g[5]=2/h;g[9]=0;g[13]=-((c+d)/h);g[2]=0;g[6]=0;g[10]=-2/m;g[14]=-((f+e)/m);g[3]=0;g[7]=0;g[11]=0;g[15]=1;return this},
fromArray:function(a){this.elements.set(a);return this},toArray:function(){var a=this.elements;return[a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]]},clone:function(){var a=this.elements;return new THREE.Matrix4(a[0],a[4],a[8],a[12],a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15])}};THREE.Ray=function(a,b){this.origin=void 0!==a?a:new THREE.Vector3;this.direction=void 0!==b?b:new THREE.Vector3};
THREE.Ray.prototype={constructor:THREE.Ray,set:function(a,b){this.origin.copy(a);this.direction.copy(b);return this},copy:function(a){this.origin.copy(a.origin);this.direction.copy(a.direction);return this},at:function(a,b){return(b||new THREE.Vector3).copy(this.direction).multiplyScalar(a).add(this.origin)},recast:function(){var a=new THREE.Vector3;return function(b){this.origin.copy(this.at(b,a));return this}}(),closestPointToPoint:function(a,b){var c=b||new THREE.Vector3;c.subVectors(a,this.origin);
var d=c.dot(this.direction);return 0>d?c.copy(this.origin):c.copy(this.direction).multiplyScalar(d).add(this.origin)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){var c=a.subVectors(b,this.origin).dot(this.direction);if(0>c)return this.origin.distanceTo(b);a.copy(this.direction).multiplyScalar(c).add(this.origin);return a.distanceTo(b)}}(),distanceSqToSegment:function(a,b,c,d){var e=a.clone().add(b).multiplyScalar(0.5),f=b.clone().sub(a).normalize(),g=0.5*a.distanceTo(b),
k=this.origin.clone().sub(e);a=-this.direction.dot(f);b=k.dot(this.direction);var h=-k.dot(f),m=k.lengthSq(),n=Math.abs(1-a*a),q,s;0<=n?(k=a*h-b,q=a*b-h,s=g*n,0<=k?q>=-s?q<=s?(g=1/n,k*=g,q*=g,a=k*(k+a*q+2*b)+q*(a*k+q+2*h)+m):(q=g,k=Math.max(0,-(a*q+b)),a=-k*k+q*(q+2*h)+m):(q=-g,k=Math.max(0,-(a*q+b)),a=-k*k+q*(q+2*h)+m):q<=-s?(k=Math.max(0,-(-a*g+b)),q=0<k?-g:Math.min(Math.max(-g,-h),g),a=-k*k+q*(q+2*h)+m):q<=s?(k=0,q=Math.min(Math.max(-g,-h),g),a=q*(q+2*h)+m):(k=Math.max(0,-(a*g+b)),q=0<k?g:Math.min(Math.max(-g,
-h),g),a=-k*k+q*(q+2*h)+m)):(q=0<a?-g:g,k=Math.max(0,-(a*q+b)),a=-k*k+q*(q+2*h)+m);c&&c.copy(this.direction.clone().multiplyScalar(k).add(this.origin));d&&d.copy(f.clone().multiplyScalar(q).add(e));return a},isIntersectionSphere:function(a){return this.distanceToPoint(a.center)<=a.radius},isIntersectionPlane:function(a){var b=a.distanceToPoint(this.origin);return 0===b||0>a.normal.dot(this.direction)*b?!0:!1},distanceToPlane:function(a){var b=a.normal.dot(this.direction);if(0==b)return 0==a.distanceToPoint(this.origin)?
0:null;a=-(this.origin.dot(a.normal)+a.constant)/b;return 0<=a?a:null},intersectPlane:function(a,b){var c=this.distanceToPlane(a);return null===c?null:this.at(c,b)},isIntersectionBox:function(){var a=new THREE.Vector3;return function(b){return null!==this.intersectBox(b,a)}}(),intersectBox:function(a,b){var c,d,e,f,g;d=1/this.direction.x;f=1/this.direction.y;g=1/this.direction.z;var k=this.origin;0<=d?(c=(a.min.x-k.x)*d,d*=a.max.x-k.x):(c=(a.max.x-k.x)*d,d*=a.min.x-k.x);0<=f?(e=(a.min.y-k.y)*f,f*=
a.max.y-k.y):(e=(a.max.y-k.y)*f,f*=a.min.y-k.y);if(c>f||e>d)return null;if(e>c||c!==c)c=e;if(f<d||d!==d)d=f;0<=g?(e=(a.min.z-k.z)*g,g*=a.max.z-k.z):(e=(a.max.z-k.z)*g,g*=a.min.z-k.z);if(c>g||e>d)return null;if(e>c||c!==c)c=e;if(g<d||d!==d)d=g;return 0>d?null:this.at(0<=c?c:d,b)},intersectTriangle:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3,d=new THREE.Vector3;return function(e,f,g,k,h){b.subVectors(f,e);c.subVectors(g,e);d.crossVectors(b,c);f=this.direction.dot(d);if(0<
f){if(k)return null;k=1}else if(0>f)k=-1,f=-f;else return null;a.subVectors(this.origin,e);e=k*this.direction.dot(c.crossVectors(a,c));if(0>e)return null;g=k*this.direction.dot(b.cross(a));if(0>g||e+g>f)return null;e=-k*a.dot(d);return 0>e?null:this.at(e/f,h)}}(),applyMatrix4:function(a){this.direction.add(this.origin).applyMatrix4(a);this.origin.applyMatrix4(a);this.direction.sub(this.origin);this.direction.normalize();return this},equals:function(a){return a.origin.equals(this.origin)&&a.direction.equals(this.direction)},
clone:function(){return(new THREE.Ray).copy(this)}};THREE.Sphere=function(a,b){this.center=void 0!==a?a:new THREE.Vector3;this.radius=void 0!==b?b:0};
THREE.Sphere.prototype={constructor:THREE.Sphere,set:function(a,b){this.center.copy(a);this.radius=b;return this},setFromPoints:function(){var a=new THREE.Box3;return function(b,c){var d=this.center;void 0!==c?d.copy(c):a.setFromPoints(b).center(d);for(var e=0,f=d.x,g=d.y,d=d.z,k=0,h=b.length;k<h;k++)var m=b[k],n=f-m.x,q=g-m.y,m=d-m.z,e=Math.max(e,n*n+q*q+m*m);this.radius=Math.sqrt(e);return this}}(),copy:function(a){this.center.copy(a.center);this.radius=a.radius;return this},empty:function(){return 0>=
this.radius},containsPoint:function(a){return a.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-this.radius},intersectsSphere:function(a){var b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=b*b},clampPoint:function(a,b){var c=this.center.distanceToSquared(a),d=b||new THREE.Vector3;d.copy(a);c>this.radius*this.radius&&(d.sub(this.center).normalize(),d.multiplyScalar(this.radius).add(this.center));return d},
getBoundingBox:function(a){a=a||new THREE.Box3;a.set(this.center,this.center);a.expandByScalar(this.radius);return a},applyMatrix4:function(a){this.center.applyMatrix4(a);this.radius*=a.getMaxScaleOnAxis();return this},translate:function(a){this.center.add(a);return this},equals:function(a){return a.center.equals(this.center)&&a.radius===this.radius},clone:function(){return(new THREE.Sphere).copy(this)}};THREE.Frustum=function(a,b,c,d,e,f){this.planes=[void 0!==a?a:new THREE.Plane,void 0!==b?b:new THREE.Plane,void 0!==c?c:new THREE.Plane,void 0!==d?d:new THREE.Plane,void 0!==e?e:new THREE.Plane,void 0!==f?f:new THREE.Plane]};
THREE.Frustum.prototype={constructor:THREE.Frustum,set:function(a,b,c,d,e,f){var g=this.planes;g[0].copy(a);g[1].copy(b);g[2].copy(c);g[3].copy(d);g[4].copy(e);g[5].copy(f);return this},copy:function(a){for(var b=this.planes,c=0;6>c;c++)b[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var b=this.planes,c=a.elements;a=c[0];var d=c[1],e=c[2],f=c[3],g=c[4],k=c[5],h=c[6],m=c[7],n=c[8],q=c[9],s=c[10],r=c[11],u=c[12],p=c[13],w=c[14],c=c[15];b[0].setComponents(f-a,m-g,r-n,c-u).normalize();b[1].setComponents(f+
a,m+g,r+n,c+u).normalize();b[2].setComponents(f+d,m+k,r+q,c+p).normalize();b[3].setComponents(f-d,m-k,r-q,c-p).normalize();b[4].setComponents(f-e,m-h,r-s,c-w).normalize();b[5].setComponents(f+e,m+h,r+s,c+w).normalize();return this},intersectsObject:function(){var a=new THREE.Sphere;return function(b){var c=b.geometry;null===c.boundingSphere&&c.computeBoundingSphere();a.copy(c.boundingSphere);a.applyMatrix4(b.matrixWorld);return this.intersectsSphere(a)}}(),intersectsSphere:function(a){var b=this.planes,
c=a.center;a=-a.radius;for(var d=0;6>d;d++)if(b[d].distanceToPoint(c)<a)return!1;return!0},intersectsBox:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){for(var d=this.planes,e=0;6>e;e++){var f=d[e];a.x=0<f.normal.x?c.min.x:c.max.x;b.x=0<f.normal.x?c.max.x:c.min.x;a.y=0<f.normal.y?c.min.y:c.max.y;b.y=0<f.normal.y?c.max.y:c.min.y;a.z=0<f.normal.z?c.min.z:c.max.z;b.z=0<f.normal.z?c.max.z:c.min.z;var g=f.distanceToPoint(a),f=f.distanceToPoint(b);if(0>g&&0>f)return!1}return!0}}(),
containsPoint:function(a){for(var b=this.planes,c=0;6>c;c++)if(0>b[c].distanceToPoint(a))return!1;return!0},clone:function(){return(new THREE.Frustum).copy(this)}};THREE.Plane=function(a,b){this.normal=void 0!==a?a:new THREE.Vector3(1,0,0);this.constant=void 0!==b?b:0};
THREE.Plane.prototype={constructor:THREE.Plane,set:function(a,b){this.normal.copy(a);this.constant=b;return this},setComponents:function(a,b,c,d){this.normal.set(a,b,c);this.constant=d;return this},setFromNormalAndCoplanarPoint:function(a,b){this.normal.copy(a);this.constant=-b.dot(this.normal);return this},setFromCoplanarPoints:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d,e){d=a.subVectors(e,d).cross(b.subVectors(c,d)).normalize();this.setFromNormalAndCoplanarPoint(d,
c);return this}}(),copy:function(a){this.normal.copy(a.normal);this.constant=a.constant;return this},normalize:function(){var a=1/this.normal.length();this.normal.multiplyScalar(a);this.constant*=a;return this},negate:function(){this.constant*=-1;this.normal.negate();return this},distanceToPoint:function(a){return this.normal.dot(a)+this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,b){return this.orthoPoint(a,b).sub(a).negate()},orthoPoint:function(a,
b){var c=this.distanceToPoint(a);return(b||new THREE.Vector3).copy(this.normal).multiplyScalar(c)},isIntersectionLine:function(a){var b=this.distanceToPoint(a.start);a=this.distanceToPoint(a.end);return 0>b&&0<a||0>a&&0<b},intersectLine:function(){var a=new THREE.Vector3;return function(b,c){var d=c||new THREE.Vector3,e=b.delta(a),f=this.normal.dot(e);if(0==f){if(0==this.distanceToPoint(b.start))return d.copy(b.start)}else return f=-(b.start.dot(this.normal)+this.constant)/f,0>f||1<f?void 0:d.copy(e).multiplyScalar(f).add(b.start)}}(),
coplanarPoint:function(a){return(a||new THREE.Vector3).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Matrix3;return function(d,e){if(!(d instanceof THREE.Matrix4))return THREE.onerror("expecting a Matrix4",d);var f=e||c.getNormalMatrix(d),f=a.copy(this.normal).applyMatrix3(f),g=this.coplanarPoint(b);g.applyMatrix4(d);this.setFromNormalAndCoplanarPoint(f,g);return this}}(),translate:function(a){this.constant-=a.dot(this.normal);
return this},equals:function(a){return a.normal.equals(this.normal)&&a.constant==this.constant},clone:function(){return(new THREE.Plane).copy(this)}};THREE.Math={PI2:2*Math.PI,DegreeToRadiansFactor:Math.PI/180,RadianToDegreesFactor:180/Math.PI,generateUUID:function(){var a="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),b=Array(36),c=0,d;return function(){for(var e=0;36>e;e++)8==e||13==e||18==e||23==e?b[e]="-":14==e?b[e]="4":(2>=c&&(c=33554432+16777216*Math.random()|0),d=c&15,c>>=4,b[e]=a[19==e?d&3|8:d]);return b.join("")}}(),clamp:function(a,b,c){return a<b?b:a>c?c:a},clampBottom:function(a,b){return a<b?b:a},mapLinear:function(a,
b,c,d,e){return d+(a-b)*(e-d)/(c-b)},smoothstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*(3-2*a)},smootherstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*a*(a*(6*a-15)+10)},random16:function(){return(65280*Math.random()+255*Math.random())/65535},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(0.5-Math.random())},sign:function(a){return 0>
a?-1:0<a?1:0},degToRad:function(a){return a*this.DegreeToRadiansFactor},radToDeg:function(a){return a*this.RadianToDegreesFactor},isPowerOfTwo:function(a){return 0===(a&a-1)&&0!==a}};THREE.Spline=function(a){function b(a,b,c,d,e,f,g){a=0.5*(c-a);d=0.5*(d-b);return(2*(b-c)+a+d)*g+(-3*(b-c)-2*a-d)*f+a*e+b}this.points=a;var c=[],d={x:0,y:0,z:0},e,f,g,k,h,m,n,q,s;this.initFromArray=function(a){this.points=[];for(var b=0;b<a.length;b++)this.points[b]={x:a[b][0],y:a[b][1],z:a[b][2]}};this.getPoint=function(a){e=(this.points.length-1)*a;f=Math.floor(e);g=e-f;c[0]=0===f?f:f-1;c[1]=f;c[2]=f>this.points.length-2?this.points.length-1:f+1;c[3]=f>this.points.length-3?this.points.length-1:
f+2;m=this.points[c[0]];n=this.points[c[1]];q=this.points[c[2]];s=this.points[c[3]];k=g*g;h=g*k;d.x=b(m.x,n.x,q.x,s.x,g,k,h);d.y=b(m.y,n.y,q.y,s.y,g,k,h);d.z=b(m.z,n.z,q.z,s.z,g,k,h);return d};this.getControlPointsArray=function(){var a,b,c=this.points.length,d=[];for(a=0;a<c;a++)b=this.points[a],d[a]=[b.x,b.y,b.z];return d};this.getLength=function(a){var b,c,d,e=b=b=0,f=new THREE.Vector3,g=new THREE.Vector3,k=[],h=0;k[0]=0;a||(a=100);c=this.points.length*a;f.copy(this.points[0]);for(a=1;a<c;a++)b=
a/c,d=this.getPoint(b),g.copy(d),h+=g.distanceTo(f),f.copy(d),b*=this.points.length-1,b=Math.floor(b),b!=e&&(k[b]=h,e=b);k[k.length]=h;return{chunks:k,total:h}};this.reparametrizeByArcLength=function(a){var b,c,d,e,f,g,k=[],h=new THREE.Vector3,m=this.getLength();k.push(h.copy(this.points[0]).clone());for(b=1;b<this.points.length;b++){c=m.chunks[b]-m.chunks[b-1];g=Math.ceil(a*c/m.total);e=(b-1)/(this.points.length-1);f=b/(this.points.length-1);for(c=1;c<g-1;c++)d=e+1/g*c*(f-e),d=this.getPoint(d),k.push(h.copy(d).clone());
k.push(h.copy(this.points[b]).clone())}this.points=k}};THREE.Triangle=function(a,b,c){this.a=void 0!==a?a:new THREE.Vector3;this.b=void 0!==b?b:new THREE.Vector3;this.c=void 0!==c?c:new THREE.Vector3};THREE.Triangle.normal=function(){var a=new THREE.Vector3;return function(b,c,d,e){e=e||new THREE.Vector3;e.subVectors(d,c);a.subVectors(b,c);e.cross(a);b=e.lengthSq();return 0<b?e.multiplyScalar(1/Math.sqrt(b)):e.set(0,0,0)}}();
THREE.Triangle.barycoordFromPoint=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,g,k){a.subVectors(g,e);b.subVectors(f,e);c.subVectors(d,e);d=a.dot(a);e=a.dot(b);f=a.dot(c);var h=b.dot(b);g=b.dot(c);var m=d*h-e*e;k=k||new THREE.Vector3;if(0==m)return k.set(-2,-1,-1);m=1/m;h=(h*f-e*g)*m;d=(d*g-e*f)*m;return k.set(1-h-d,d,h)}}();
THREE.Triangle.containsPoint=function(){var a=new THREE.Vector3;return function(b,c,d,e){b=THREE.Triangle.barycoordFromPoint(b,c,d,e,a);return 0<=b.x&&0<=b.y&&1>=b.x+b.y}}();
THREE.Triangle.prototype={constructor:THREE.Triangle,set:function(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this},setFromPointsAndIndices:function(a,b,c,d){this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this},copy:function(a){this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this},area:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){a.subVectors(this.c,this.b);b.subVectors(this.a,this.b);return 0.5*a.cross(b).length()}}(),midpoint:function(a){return(a||
new THREE.Vector3).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(a){return THREE.Triangle.normal(this.a,this.b,this.c,a)},plane:function(a){return(a||new THREE.Plane).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(a,b){return THREE.Triangle.barycoordFromPoint(a,this.a,this.b,this.c,b)},containsPoint:function(a){return THREE.Triangle.containsPoint(a,this.a,this.b,this.c)},equals:function(a){return a.a.equals(this.a)&&a.b.equals(this.b)&&a.c.equals(this.c)},
clone:function(){return(new THREE.Triangle).copy(this)}};THREE.Vertex=function(a){return THREE.onerror("THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.")};THREE.UV=function(a,b){THREE.onerror("THREE.UV has been DEPRECATED. Use THREE.Vector2 instead.");return new THREE.Vector2(a,b)};THREE.Clock=function(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1};
THREE.Clock.prototype={constructor:THREE.Clock,start:function(){this.oldTime=this.startTime=void 0!==self.performance&&void 0!==self.performance.now?self.performance.now():Date.now();this.running=!0},stop:function(){this.getElapsedTime();this.running=!1},getElapsedTime:function(){this.getDelta();return this.elapsedTime},getDelta:function(){var a=0;this.autoStart&&!this.running&&this.start();if(this.running){var b=void 0!==self.performance&&void 0!==self.performance.now?self.performance.now():Date.now(),
a=0.001*(b-this.oldTime);this.oldTime=b;this.elapsedTime+=a}return a}};THREE.EventDispatcher=function(){};
THREE.EventDispatcher.prototype={constructor:THREE.EventDispatcher,apply:function(a){a.addEventListener=THREE.EventDispatcher.prototype.addEventListener;a.hasEventListener=THREE.EventDispatcher.prototype.hasEventListener;a.removeEventListener=THREE.EventDispatcher.prototype.removeEventListener;a.dispatchEvent=THREE.EventDispatcher.prototype.dispatchEvent},addEventListener:function(a,b){void 0===this._listeners&&(this._listeners={});var c=this._listeners;void 0===c[a]&&(c[a]=[]);-1===c[a].indexOf(b)&&
c[a].push(b)},hasEventListener:function(a,b){if(void 0===this._listeners)return!1;var c=this._listeners;return void 0!==c[a]&&-1!==c[a].indexOf(b)?!0:!1},removeEventListener:function(a,b){if(void 0!==this._listeners){var c=this._listeners[a];if(void 0!==c){var d=c.indexOf(b);-1!==d&&c.splice(d,1)}}},dispatchEvent:function(){var a=[];return function(b){if(void 0!==this._listeners){var c=this._listeners[b.type];if(void 0!==c){b.target=this;for(var d=c.length,e=0;e<d;e++)a[e]=c[e];for(e=0;e<d;e++)a[e].call(this,
b)}}}}()};(function(a){a.Raycaster=function(b,c,d,e){this.ray=new a.Ray(b,c);this.near=d||0;this.far=e||Infinity};var b=new a.Sphere,c=new a.Ray;new a.Plane;new a.Vector3;var d=new a.Vector3,e=new a.Matrix4,f=function(a,b){return a.distance-b.distance},g=new a.Vector3,k=new a.Vector3,h=new a.Vector3,m=function(f,n,r){if(f instanceof a.Sprite){d.setFromMatrixPosition(f.matrixWorld);var u=n.ray.distanceToPoint(d);if(u>f.scale.x)return r;r.push({distance:u,point:f.position,face:null,object:f})}else if(f instanceof
a.LOD)d.setFromMatrixPosition(f.matrixWorld),u=n.ray.origin.distanceTo(d),m(f.getObjectForDistance(u),n,r);else if(f instanceof a.Mesh){var p=f.geometry;null===p.boundingSphere&&p.computeBoundingSphere();b.copy(p.boundingSphere);b.applyMatrix4(f.matrixWorld);if(!1===n.ray.isIntersectionSphere(b))return r;e.getInverse(f.matrixWorld);c.copy(n.ray).applyMatrix4(e);if(null!==p.boundingBox&&!1===c.isIntersectionBox(p.boundingBox))return r;if(p instanceof a.BufferGeometry){var w=f.material;if(void 0===
w)return r;var v=p.attributes,t,x,B=n.precision;if(void 0!==v.index)for(var J=p.offsets,E=v.index.array,K=v.position.array,A=0,z=J.length;A<z;++A)for(var v=J[A].start,L=J[A].index,p=v,F=v+J[A].count;p<F;p+=3){v=L+E[p];t=L+E[p+1];x=L+E[p+2];g.set(K[3*v],K[3*v+1],K[3*v+2]);k.set(K[3*t],K[3*t+1],K[3*t+2]);h.set(K[3*x],K[3*x+1],K[3*x+2]);var P=w.side===a.BackSide?c.intersectTriangle(h,k,g,!0):c.intersectTriangle(g,k,h,w.side!==a.DoubleSide);null!==P&&(P.applyMatrix4(f.matrixWorld),u=n.ray.origin.distanceTo(P),
u<B||u<n.near||u>n.far||r.push({distance:u,point:P,indices:[v,t,x],face:null,faceIndex:null,object:f}))}else for(K=v.position.array,p=0,F=v.position.array.length;p<F;p+=3)v=p,t=p+1,x=p+2,g.set(K[3*v],K[3*v+1],K[3*v+2]),k.set(K[3*t],K[3*t+1],K[3*t+2]),h.set(K[3*x],K[3*x+1],K[3*x+2]),P=w.side===a.BackSide?c.intersectTriangle(h,k,g,!0):c.intersectTriangle(g,k,h,w.side!==a.DoubleSide),null!==P&&(P.applyMatrix4(f.matrixWorld),u=n.ray.origin.distanceTo(P),u<B||u<n.near||u>n.far||r.push({distance:u,point:P,
indices:[v,t,x],face:null,faceIndex:null,object:f}))}else if(p instanceof a.Geometry)for(E=f.material instanceof a.MeshFaceMaterial,K=!0===E?f.material.materials:null,B=n.precision,J=p.vertices,A=0,z=p.faces.length;A<z;A++)if(L=p.faces[A],w=!0===E?K[L.materialIndex]:f.material,void 0!==w){v=J[L.a];t=J[L.b];x=J[L.c];if(!0===w.morphTargets){u=p.morphTargets;P=f.morphTargetInfluences;g.set(0,0,0);k.set(0,0,0);h.set(0,0,0);for(var F=0,y=u.length;F<y;F++){var G=P[F];if(0!==G){var C=u[F].vertices;g.x+=
(C[L.a].x-v.x)*G;g.y+=(C[L.a].y-v.y)*G;g.z+=(C[L.a].z-v.z)*G;k.x+=(C[L.b].x-t.x)*G;k.y+=(C[L.b].y-t.y)*G;k.z+=(C[L.b].z-t.z)*G;h.x+=(C[L.c].x-x.x)*G;h.y+=(C[L.c].y-x.y)*G;h.z+=(C[L.c].z-x.z)*G}}g.add(v);k.add(t);h.add(x);v=g;t=k;x=h}P=w.side===a.BackSide?c.intersectTriangle(x,t,v,!0):c.intersectTriangle(v,t,x,w.side!==a.DoubleSide);null!==P&&(P.applyMatrix4(f.matrixWorld),u=n.ray.origin.distanceTo(P),u<B||u<n.near||u>n.far||r.push({distance:u,point:P,face:L,faceIndex:A,object:f}))}}else if(f instanceof
a.Line){B=n.linePrecision;w=B*B;p=f.geometry;null===p.boundingSphere&&p.computeBoundingSphere();b.copy(p.boundingSphere);b.applyMatrix4(f.matrixWorld);if(!1===n.ray.isIntersectionSphere(b))return r;e.getInverse(f.matrixWorld);c.copy(n.ray).applyMatrix4(e);if(p instanceof a.Geometry)for(J=p.vertices,B=J.length,v=new a.Vector3,t=new a.Vector3,x=f.type===a.LineStrip?1:2,p=0;p<B-1;p+=x)c.distanceSqToSegment(J[p],J[p+1],t,v)>w||(u=c.origin.distanceTo(t),u<n.near||u>n.far||r.push({distance:u,point:v.clone().applyMatrix4(f.matrixWorld),
face:null,faceIndex:null,object:f}))}},n=function(a,b,c){a=a.getDescendants();for(var d=0,e=a.length;d<e;d++)m(a[d],b,c)};a.Raycaster.prototype.precision=1E-4;a.Raycaster.prototype.linePrecision=1;a.Raycaster.prototype.set=function(a,b){this.ray.set(a,b)};a.Raycaster.prototype.intersectObject=function(a,b){var c=[];!0===b&&n(a,this,c);m(a,this,c);c.sort(f);return c};a.Raycaster.prototype.intersectObjects=function(a,b){for(var c=[],d=0,e=a.length;d<e;d++)m(a[d],this,c),!0===b&&n(a[d],this,c);c.sort(f);
return c}})(THREE);THREE.Object3D=function(){this.id=THREE.Object3DIdCount++;this.uuid=THREE.Math.generateUUID();this.className="Object3D";this.name="";this.parent=void 0;this.children=[];this.up=new THREE.Vector3(0,1,0);this.position=new THREE.Vector3;this._rotation=new THREE.Euler;this._quaternion=new THREE.Quaternion;this.scale=new THREE.Vector3(1,1,1);this._rotation._quaternion=this.quaternion;this._quaternion._euler=this.rotation;this.renderDepth=null;this.rotationAutoUpdate=!0;this.matrix=new THREE.Matrix4;this.matrixWorld=
new THREE.Matrix4;this.visible=this.matrixWorldNeedsUpdate=this.matrixAutoUpdate=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this.userData={}};
THREE.Object3D.prototype={constructor:THREE.Object3D,get rotation(){return this._rotation},set rotation(a){this._rotation=a;this._rotation._quaternion=this._quaternion;this._quaternion._euler=this._rotation;this._rotation._updateQuaternion()},get quaternion(){return this._quaternion},set quaternion(a){this._quaternion=a;this._quaternion._euler=this._rotation;this._rotation._quaternion=this._quaternion;this._quaternion._updateEuler()},get eulerOrder(){THREE.onwarning("DEPRECATED: Object3D's .eulerOrder has been moved to Object3D's .rotation.order.");
return this.rotation.order},set eulerOrder(a){THREE.onwarning("DEPRECATED: Object3D's .eulerOrder has been moved to Object3D's .rotation.order.");this.rotation.order=a},get useQuaternion(){THREE.onwarning("DEPRECATED: Object3D's .useQuaternion has been removed. The library now uses quaternions by default.")},set useQuaternion(a){THREE.onwarning("DEPRECATED: Object3D's .useQuaternion has been removed. The library now uses quaternions by default.")},applyMatrix:function(a){this.matrix.multiplyMatrices(a,
this.matrix);this.matrix.decompose(this.position,this.quaternion,this.scale)},setRotationFromAxisAngle:function(a,b){this.quaternion.setFromAxisAngle(a,b)},setRotationFromEuler:function(a){this.quaternion.setFromEuler(a,!0)},setRotationFromMatrix:function(a){this.quaternion.setFromRotationMatrix(a)},setRotationFromQuaternion:function(a){this.quaternion.copy(a)},rotateOnAxis:function(){var a=new THREE.Quaternion;return function(b,c){a.setFromAxisAngle(b,c);this.quaternion.multiply(a);return this}}(),
rotateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateY:function(){var a=new THREE.Vector3(0,1,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.rotateOnAxis(a,b)}}(),translateOnAxis:function(){var a=new THREE.Vector3;return function(b,c){a.copy(b);a.applyQuaternion(this.quaternion);this.position.add(a.multiplyScalar(c));return this}}(),translate:function(a,
b){THREE.onwarning("DEPRECATED: Object3D's .translate() has been removed. Use .translateOnAxis( axis, distance ) instead. Note args have been changed.");return this.translateOnAxis(b,a)},translateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.translateOnAxis(a,b)}}(),translateY:function(){var a=new THREE.Vector3(0,1,0);return function(b){return this.translateOnAxis(a,b)}}(),translateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.translateOnAxis(a,
b)}}(),localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var a=new THREE.Matrix4;return function(b){return b.applyMatrix4(a.getInverse(this.matrixWorld))}}(),lookAt:function(){var a=new THREE.Matrix4;return function(b){a.lookAt(b,this.position,this.up);this.quaternion.setFromRotationMatrix(a)}}(),add:function(a){if(a===this)THREE.onwarning("THREE.Object3D.add: An object can't be added as a child of itself.");else if(a instanceof THREE.Object3D){void 0!==a.parent&&
a.parent.remove(a);a.parent=this;a.dispatchEvent({type:"added"});this.children.push(a);for(var b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__addObject(a)}},remove:function(a){var b=this.children.indexOf(a);if(-1!==b){a.parent=void 0;a.dispatchEvent({type:"removed"});this.children.splice(b,1);for(b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__removeObject(a)}},traverse:function(a){a(this);for(var b=0,c=this.children.length;b<c;b++)this.children[b].traverse(a)},
getObjectById:function(a,b){for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c];if(e.id===a||!0===b&&(e=e.getObjectById(a,b),void 0!==e))return e}},getObjectByName:function(a,b){for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c];if(e.name===a||!0===b&&(e=e.getObjectByName(a,b),void 0!==e))return e}},getChildByName:function(a,b){THREE.onwarning("DEPRECATED: Object3D's .getChildByName() has been renamed to .getObjectByName().");return this.getObjectByName(a,b)},getDescendants:function(a){void 0===
a&&(a=[]);Array.prototype.push.apply(a,this.children);for(var b=0,c=this.children.length;b<c;b++)this.children[b].getDescendants(a);return a},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){!0===this.matrixAutoUpdate&&this.updateMatrix();if(!0===this.matrixWorldNeedsUpdate||!0===a)void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),
this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)},clone:function(a,b){void 0===a&&(a=new THREE.Object3D);void 0===b&&(b=!0);a.name=this.name;a.up.copy(this.up);a.position.copy(this.position);a.quaternion.copy(this.quaternion);a.scale.copy(this.scale);a.renderDepth=this.renderDepth;a.rotationAutoUpdate=this.rotationAutoUpdate;a.matrix.copy(this.matrix);a.matrixWorld.copy(this.matrixWorld);a.matrixAutoUpdate=this.matrixAutoUpdate;a.matrixWorldNeedsUpdate=
this.matrixWorldNeedsUpdate;a.visible=this.visible;a.castShadow=this.castShadow;a.receiveShadow=this.receiveShadow;a.frustumCulled=this.frustumCulled;a.userData=JSON.parse(JSON.stringify(this.userData));if(!0===b)for(var c=0;c<this.children.length;c++)a.add(this.children[c].clone());return a}};THREE.EventDispatcher.prototype.apply(THREE.Object3D.prototype);THREE.Object3DIdCount=0;THREE.Projector=function(){function a(){if(n===s){var a=new THREE.RenderableVertex;q.push(a);s++;n++;return a}return q[n++]}function b(){if(u===w){var a=new THREE.RenderableFace;p.push(a);w++;u++;return a}return p[u++]}function c(){if(t===B){var a=new THREE.RenderableLine;x.push(a);B++;t++;return a}return x[t++]}function d(a,b){return a.z!==b.z?b.z-a.z:a.id!==b.id?a.id-b.id:0}function e(a,b){var c=0,d=1,e=a.z+a.w,f=b.z+b.w,g=-a.z+a.w,k=-b.z+b.w;if(0<=e&&0<=f&&0<=g&&0<=k)return!0;if(0>e&&0>f||0>g&&
0>k)return!1;0>e?c=Math.max(c,e/(e-f)):0>f&&(d=Math.min(d,e/(e-f)));0>g?c=Math.max(c,g/(g-k)):0>k&&(d=Math.min(d,g/(g-k)));if(d<c)return!1;a.lerp(b,c);b.lerp(a,1-d);return!0}var f,g,k=[],h=0,m,n,q=[],s=0,r,u,p=[],w=0,v,t,x=[],B=0,J,E,K=[],A=0,z={objects:[],lights:[],elements:[]},L=new THREE.Vector3,F=new THREE.Vector3,P=new THREE.Vector3,y=new THREE.Vector3,G=new THREE.Vector4,C=new THREE.Box3(new THREE.Vector3(-1,-1,-1),new THREE.Vector3(1,1,1)),D=new THREE.Box3,H=Array(3),Q=new THREE.Matrix4,aa=
new THREE.Matrix4,V,ga=new THREE.Matrix4,Y=new THREE.Matrix3,ha=new THREE.Frustum,N=new THREE.Vector4,ba=new THREE.Vector4;this.projectVector=function(a,b){b.matrixWorldInverse.getInverse(b.matrixWorld);aa.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);return a.applyProjection(aa)};this.unprojectVector=function(){var a=new THREE.Matrix4;return function(b,c){a.getInverse(c.projectionMatrix);aa.multiplyMatrices(c.matrixWorld,a);return b.applyProjection(aa)}}();this.pickingRay=function(a,
b){a.z=-1;var c=new THREE.Vector3(a.x,a.y,1);this.unprojectVector(a,b);this.unprojectVector(c,b);c.sub(a).normalize();return new THREE.Raycaster(a,c)};var I=function(a){if(!1!==a.visible){if(a instanceof THREE.Light)z.lights.push(a);else if(a instanceof THREE.Mesh||a instanceof THREE.Line||a instanceof THREE.Sprite)if(!1===a.frustumCulled||!0===ha.intersectsObject(a)){if(g===h){var b=new THREE.RenderableObject;k.push(b);h++;g++;f=b}else f=k[g++];f.id=a.id;f.object=a;null!==a.renderDepth?f.z=a.renderDepth:
(y.setFromMatrixPosition(a.matrixWorld),y.applyProjection(aa),f.z=y.z);z.objects.push(f)}for(var b=0,c=a.children.length;b<c;b++)I(a.children[b])}},U=new function(){var d=[],e=null,f=new THREE.Matrix3,g=function(a){var b=a.positionWorld,c=a.positionScreen;b.copy(a.position).applyMatrix4(V);c.copy(b).applyMatrix4(aa);b=1/c.w;c.x*=b;c.y*=b;c.z*=b;a.visible=-1<=c.x&&1>=c.x&&-1<=c.y&&1>=c.y&&-1<=c.z&&1>=c.z},k=function(a,b,c){H[0]=a.positionScreen;H[1]=b.positionScreen;H[2]=c.positionScreen;return!0===
a.visible||!0===b.visible||!0===c.visible||C.isIntersectionBox(D.setFromPoints(H))?0>(c.positionScreen.x-a.positionScreen.x)*(b.positionScreen.y-a.positionScreen.y)-(c.positionScreen.y-a.positionScreen.y)*(b.positionScreen.x-a.positionScreen.x):!1};return{setObject:function(a){e=a;f.getNormalMatrix(e.matrixWorld);d.length=0},projectVertex:g,checkTriangleVisibility:k,pushVertex:function(b,c,d){m=a();m.position.set(b,c,d);g(m)},pushNormal:function(a,b,c){d.push(a,b,c)},pushLine:function(a,b){var d=
q[a],f=q[b];v=c();v.id=e.id;v.v1.copy(d);v.v2.copy(f);v.z=(d.positionScreen.z+f.positionScreen.z)/2;v.material=e.material;z.elements.push(v)},pushTriangle:function(a,c,g){var h=q[a],m=q[c],n=q[g];if(!0===k(h,m,n)){r=b();r.id=e.id;r.v1.copy(h);r.v2.copy(m);r.v3.copy(n);r.z=(h.positionScreen.z+m.positionScreen.z+n.positionScreen.z)/3;for(h=0;3>h;h++)m=3*arguments[h],n=r.vertexNormalsModel[h],n.set(d[m+0],d[m+1],d[m+2]),n.applyMatrix3(f).normalize();r.vertexNormalsLength=3;r.material=e.material;z.elements.push(r)}}}};
this.projectScene=function(f,k,h,m){var p,s,w,x,y,B,C,H,D;E=t=u=0;z.elements.length=0;!0===f.autoUpdate&&f.updateMatrixWorld();void 0===k.parent&&k.updateMatrixWorld();Q.copy(k.matrixWorldInverse.getInverse(k.matrixWorld));aa.multiplyMatrices(k.projectionMatrix,Q);ha.setFromMatrix(aa);g=0;z.objects.length=0;z.lights.length=0;I(f);!0===h&&z.objects.sort(d);f=0;for(h=z.objects.length;f<h;f++)if(p=z.objects[f].object,s=p.geometry,U.setObject(p),V=p.matrixWorld,n=0,p instanceof THREE.Mesh)if(s instanceof
THREE.BufferGeometry){if(B=s.attributes,p=s.offsets,void 0!==B.position){H=B.position.array;s=0;for(x=H.length;s<x;s+=3)U.pushVertex(H[s],H[s+1],H[s+2]);D=B.normal.array;s=0;for(x=D.length;s<x;s+=3)U.pushNormal(D[s],D[s+1],D[s+2]);if(void 0!==B.index)if(B=B.index.array,0<p.length)for(f=0;f<p.length;f++)for(x=p[f],H=x.index,s=x.start,x=x.start+x.count;s<x;s+=3)U.pushTriangle(B[s]+H,B[s+1]+H,B[s+2]+H);else for(s=0,x=B.length;s<x;s+=3)U.pushTriangle(B[s],B[s+1],B[s+2]);else for(s=0,x=H.length/3;s<x;s+=
3)U.pushTriangle(s,s+1,s+2)}}else{if(s instanceof THREE.Geometry){w=s.vertices;x=s.faces;B=s.faceVertexUvs;Y.getNormalMatrix(V);H=p.material instanceof THREE.MeshFaceMaterial;D=!0===H?p.material:null;for(var Z=0,La=w.length;Z<La;Z++){var ka=w[Z];U.pushVertex(ka.x,ka.y,ka.z)}Z=0;for(La=x.length;Z<La;Z++){w=x[Z];var Pa=!0===H?D.materials[w.materialIndex]:p.material;if(void 0!==Pa){C=Pa.side;var ka=q[w.a],Ma=q[w.b],wa=q[w.c];if(!0===Pa.morphTargets){y=s.morphTargets;var qa=p.morphTargetInfluences,ca=
ka.position,ya=Ma.position,Ka=wa.position;L.set(0,0,0);F.set(0,0,0);P.set(0,0,0);for(var Ga=0,hb=y.length;Ga<hb;Ga++){var za=qa[Ga];if(0!==za){var Ba=y[Ga].vertices;L.x+=(Ba[w.a].x-ca.x)*za;L.y+=(Ba[w.a].y-ca.y)*za;L.z+=(Ba[w.a].z-ca.z)*za;F.x+=(Ba[w.b].x-ya.x)*za;F.y+=(Ba[w.b].y-ya.y)*za;F.z+=(Ba[w.b].z-ya.z)*za;P.x+=(Ba[w.c].x-Ka.x)*za;P.y+=(Ba[w.c].y-Ka.y)*za;P.z+=(Ba[w.c].z-Ka.z)*za}}ka.position.add(L);Ma.position.add(F);wa.position.add(P);U.projectVertex(ka);U.projectVertex(Ma);U.projectVertex(wa)}qa=
U.checkTriangleVisibility(ka,Ma,wa);if(!(!1===qa&&C===THREE.FrontSide||!0===qa&&C===THREE.BackSide)){r=b();r.id=p.id;r.v1.copy(ka);r.v2.copy(Ma);r.v3.copy(wa);r.normalModel.copy(w.normal);!1!==qa||C!==THREE.BackSide&&C!==THREE.DoubleSide||r.normalModel.negate();r.normalModel.applyMatrix3(Y).normalize();r.centroidModel.copy(w.centroid).applyMatrix4(V);y=w.vertexNormals;ca=0;for(ya=Math.min(y.length,3);ca<ya;ca++)Ka=r.vertexNormalsModel[ca],Ka.copy(y[ca]),!1!==qa||C!==THREE.BackSide&&C!==THREE.DoubleSide||
Ka.negate(),Ka.applyMatrix3(Y).normalize();r.vertexNormalsLength=y.length;y=0;for(qa=Math.min(B.length,3);y<qa;y++)if(C=B[y][Z],void 0!==C)for(ca=0,ya=C.length;ca<ya;ca++)r.uvs[y][ca]=C[ca];r.color=w.color;r.material=Pa;r.z=(ka.positionScreen.z+Ma.positionScreen.z+wa.positionScreen.z)/3;z.elements.push(r)}}}}}else if(p instanceof THREE.Line)if(s instanceof THREE.BufferGeometry){if(B=s.attributes,void 0!==B.position){H=B.position.array;s=0;for(x=H.length;s<x;s+=3)U.pushVertex(H[s],H[s+1],H[s+2]);if(void 0!==
B.index)for(B=B.index.array,s=0,x=B.length;s<x;s+=2)U.pushLine(B[s],B[s+1]);else for(s=0,x=H.length/3-1;s<x;s++)U.pushLine(s,s+1)}}else{if(s instanceof THREE.Geometry&&(ga.multiplyMatrices(aa,V),w=p.geometry.vertices,0!==w.length))for(ka=a(),ka.positionScreen.copy(w[0]).applyMatrix4(ga),s=p.type===THREE.LinePieces?2:1,Z=1,La=w.length;Z<La;Z++)ka=a(),ka.positionScreen.copy(w[Z]).applyMatrix4(ga),0<(Z+1)%s||(Ma=q[n-2],N.copy(ka.positionScreen),ba.copy(Ma.positionScreen),!0===e(N,ba)&&(N.multiplyScalar(1/
N.w),ba.multiplyScalar(1/ba.w),v=c(),v.id=p.id,v.v1.positionScreen.copy(N),v.v2.positionScreen.copy(ba),v.z=Math.max(N.z,ba.z),v.material=p.material,p.material.vertexColors===THREE.VertexColors&&(v.vertexColors[0].copy(p.geometry.colors[Z]),v.vertexColors[1].copy(p.geometry.colors[Z-1])),z.elements.push(v)))}else p instanceof THREE.Sprite&&(G.set(V.elements[12],V.elements[13],V.elements[14],1),G.applyMatrix4(aa),s=1/G.w,G.z*=s,-1<=G.z&&1>=G.z&&(E===A?(x=new THREE.RenderableSprite,K.push(x),A++,E++,
J=x):J=K[E++],J.id=p.id,J.x=G.x*s,J.y=G.y*s,J.z=G.z,J.object=p,J.rotation=p.rotation,J.scale.x=p.scale.x*Math.abs(J.x-(G.x+k.projectionMatrix.elements[0])/(G.w+k.projectionMatrix.elements[12])),J.scale.y=p.scale.y*Math.abs(J.y-(G.y+k.projectionMatrix.elements[5])/(G.w+k.projectionMatrix.elements[13])),J.material=p.material,z.elements.push(J)));!0===m&&z.elements.sort(d);return z}};THREE.Face3=function(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.normal=d instanceof THREE.Vector3?d:new THREE.Vector3;this.vertexNormals=d instanceof Array?d:[];this.color=e instanceof THREE.Color?e:new THREE.Color;this.vertexColors=e instanceof Array?e:[];this.vertexTangents=[];this.materialIndex=void 0!==f?f:0;this.centroid=new THREE.Vector3};
THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){var a=new THREE.Face3(this.a,this.b,this.c);a.normal.copy(this.normal);a.color.copy(this.color);a.centroid.copy(this.centroid);a.materialIndex=this.materialIndex;var b,c;b=0;for(c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();
return a}};THREE.Face4=function(a,b,c,d,e,f,g){THREE.onwarning("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");return new THREE.Face3(a,b,c,e,f,g)};THREE.BufferGeometry=function(){this.id=THREE.GeometryIdCount++;this.uuid=THREE.Math.generateUUID();this.className="BufferGeometry";this.name="";this.attributes={};this.offsets=[];this.boundingSphere=this.boundingBox=null};
THREE.BufferGeometry.prototype={constructor:THREE.BufferGeometry,addAttribute:function(a,b,c,d){this.attributes[a]={array:new b(c*d),itemSize:d};return this.attributes[a]},applyMatrix:function(a){var b=this.attributes.position;void 0!==b&&(a.multiplyVector3Array(b.array),b.needsUpdate=!0);b=this.attributes.normal;void 0!==b&&((new THREE.Matrix3).getNormalMatrix(a).multiplyVector3Array(b.array),b.needsUpdate=!0)},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);
var a=this.attributes.position.array;if(a){var b=this.boundingBox;3<=a.length&&(b.min.x=b.max.x=a[0],b.min.y=b.max.y=a[1],b.min.z=b.max.z=a[2]);for(var c=3,d=a.length;c<d;c+=3){var e=a[c],f=a[c+1],g=a[c+2];e<b.min.x?b.min.x=e:e>b.max.x&&(b.max.x=e);f<b.min.y?b.min.y=f:f>b.max.y&&(b.max.y=f);g<b.min.z?b.min.z=g:g>b.max.z&&(b.max.z=g)}}if(void 0===a||0===a.length)this.boundingBox.min.set(0,0,0),this.boundingBox.max.set(0,0,0)},computeBoundingSphere:function(){var a=new THREE.Box3,b=new THREE.Vector3;
return function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);var c=this.attributes.position.array;if(c){a.makeEmpty();for(var d=this.boundingSphere.center,e=0,f=c.length;e<f;e+=3)b.set(c[e],c[e+1],c[e+2]),a.addPoint(b);a.center(d);for(var g=0,e=0,f=c.length;e<f;e+=3)b.set(c[e],c[e+1],c[e+2]),g=Math.max(g,d.distanceToSquared(b));this.boundingSphere.radius=Math.sqrt(g)}}}(),computeVertexNormals:function(){if(this.attributes.position){var a,b,c,d;a=this.attributes.position.array.length;
if(void 0===this.attributes.normal)this.attributes.normal={itemSize:3,array:new Float32Array(a)};else for(a=0,b=this.attributes.normal.array.length;a<b;a++)this.attributes.normal.array[a]=0;var e=this.attributes.position.array,f=this.attributes.normal.array,g,k,h,m,n,q,s=new THREE.Vector3,r=new THREE.Vector3,u=new THREE.Vector3,p=new THREE.Vector3,w=new THREE.Vector3;if(this.attributes.index){var v=this.attributes.index.array,t=this.offsets;c=0;for(d=t.length;c<d;++c){b=t[c].start;g=t[c].count;var x=
t[c].index;a=b;for(b+=g;a<b;a+=3)g=x+v[a],k=x+v[a+1],h=x+v[a+2],m=e[3*g],n=e[3*g+1],q=e[3*g+2],s.set(m,n,q),m=e[3*k],n=e[3*k+1],q=e[3*k+2],r.set(m,n,q),m=e[3*h],n=e[3*h+1],q=e[3*h+2],u.set(m,n,q),p.subVectors(u,r),w.subVectors(s,r),p.cross(w),f[3*g]+=p.x,f[3*g+1]+=p.y,f[3*g+2]+=p.z,f[3*k]+=p.x,f[3*k+1]+=p.y,f[3*k+2]+=p.z,f[3*h]+=p.x,f[3*h+1]+=p.y,f[3*h+2]+=p.z}}else for(a=0,b=e.length;a<b;a+=9)m=e[a],n=e[a+1],q=e[a+2],s.set(m,n,q),m=e[a+3],n=e[a+4],q=e[a+5],r.set(m,n,q),m=e[a+6],n=e[a+7],q=e[a+8],
u.set(m,n,q),p.subVectors(u,r),w.subVectors(s,r),p.cross(w),f[a]=p.x,f[a+1]=p.y,f[a+2]=p.z,f[a+3]=p.x,f[a+4]=p.y,f[a+5]=p.z,f[a+6]=p.x,f[a+7]=p.y,f[a+8]=p.z;this.normalizeNormals();this.normalsNeedUpdate=!0}},normalizeNormals:function(){for(var a=this.attributes.normal.array,b,c,d,e=0,f=a.length;e<f;e+=3)b=a[e],c=a[e+1],d=a[e+2],b=1/Math.sqrt(b*b+c*c+d*d),a[e]*=b,a[e+1]*=b,a[e+2]*=b},computeTangents:function(){function a(a,b,c){q=d[3*a];s=d[3*a+1];r=d[3*a+2];u=d[3*b];p=d[3*b+1];w=d[3*b+2];v=d[3*c];
t=d[3*c+1];x=d[3*c+2];B=f[2*a];J=f[2*a+1];E=f[2*b];K=f[2*b+1];A=f[2*c];z=f[2*c+1];L=u-q;F=v-q;P=p-s;y=t-s;G=w-r;C=x-r;D=E-B;H=A-B;Q=K-J;aa=z-J;V=1/(D*aa-H*Q);ga.set((aa*L-Q*F)*V,(aa*P-Q*y)*V,(aa*G-Q*C)*V);Y.set((D*F-H*L)*V,(D*y-H*P)*V,(D*C-H*G)*V);h[a].add(ga);h[b].add(ga);h[c].add(ga);m[a].add(Y);m[b].add(Y);m[c].add(Y)}function b(a){ta.x=e[3*a];ta.y=e[3*a+1];ta.z=e[3*a+2];Ca.copy(ta);R=h[a];T.copy(R);T.sub(ta.multiplyScalar(ta.dot(R))).normalize();Aa.crossVectors(Ca,R);pa=Aa.dot(m[a]);Fa=0>pa?-1:
1;k[4*a]=T.x;k[4*a+1]=T.y;k[4*a+2]=T.z;k[4*a+3]=Fa}if(void 0===this.attributes.index||void 0===this.attributes.position||void 0===this.attributes.normal||void 0===this.attributes.uv)THREE.onwarning("Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");else{var c=this.attributes.index.array,d=this.attributes.position.array,e=this.attributes.normal.array,f=this.attributes.uv.array,g=d.length/3;void 0===this.attributes.tangent&&(this.attributes.tangent={itemSize:4,
array:new Float32Array(4*g)});for(var k=this.attributes.tangent.array,h=[],m=[],n=0;n<g;n++)h[n]=new THREE.Vector3,m[n]=new THREE.Vector3;var q,s,r,u,p,w,v,t,x,B,J,E,K,A,z,L,F,P,y,G,C,D,H,Q,aa,V,ga=new THREE.Vector3,Y=new THREE.Vector3,ha,N,ba,I,U,la=this.offsets,n=0;for(N=la.length;n<N;++n){ha=la[n].start;ba=la[n].count;var S=la[n].index,g=ha;for(ha+=ba;g<ha;g+=3)ba=S+c[g],I=S+c[g+1],U=S+c[g+2],a(ba,I,U)}var T=new THREE.Vector3,Aa=new THREE.Vector3,ta=new THREE.Vector3,Ca=new THREE.Vector3,Fa,R,
pa,n=0;for(N=la.length;n<N;++n)for(ha=la[n].start,ba=la[n].count,S=la[n].index,g=ha,ha+=ba;g<ha;g+=3)ba=S+c[g],I=S+c[g+1],U=S+c[g+2],b(ba),b(I),b(U)}},computeOffsets:function(a){var b=a;void 0===a&&(b=65535);Date.now();a=this.attributes.index.array;for(var c=this.attributes.position.array,d=a.length/3,e=new Uint16Array(a.length),f=0,g=0,k=[{start:0,count:0,index:0}],h=k[0],m=0,n=0,q=new Int32Array(6),s=new Int32Array(c.length),r=new Int32Array(c.length),u=0;u<c.length;u++)s[u]=-1,r[u]=-1;for(c=0;c<
d;c++){for(var p=n=0;3>p;p++)u=a[3*c+p],-1==s[u]?(q[2*p]=u,q[2*p+1]=-1,n++):s[u]<h.index?(q[2*p]=u,q[2*p+1]=-1,m++):(q[2*p]=u,q[2*p+1]=s[u]);if(g+n>h.index+b)for(h={start:f,count:0,index:g},k.push(h),n=0;6>n;n+=2)p=q[n+1],-1<p&&p<h.index&&(q[n+1]=-1);for(n=0;6>n;n+=2)u=q[n],p=q[n+1],-1===p&&(p=g++),s[u]=p,r[p]=u,e[f++]=p-h.index,h.count++}this.reorderBuffers(e,r,g);return this.offsets=k},reorderBuffers:function(a,b,c){var d={},e=[Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,
Uint32Array,Float32Array,Float64Array],f;for(f in this.attributes)if("index"!=f)for(var g=this.attributes[f].array,k=0,h=e.length;k<h;k++){var m=e[k];if(g instanceof m){d[f]=new m(this.attributes[f].itemSize*c);break}}for(e=0;e<c;e++)for(f in g=b[e],this.attributes)if("index"!=f)for(var k=this.attributes[f].array,h=this.attributes[f].itemSize,m=d[f],n=0;n<h;n++)m[e*h+n]=k[g*h+n];this.attributes.index.array=a;for(f in this.attributes)"index"!=f&&(this.attributes[f].array=d[f],this.attributes[f].numItems=
this.attributes[f].itemSize*c)},clone:function(){var a=new THREE.BufferGeometry,b=[Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array],c;for(c in this.attributes){for(var d=this.attributes[c],e=d.array,f={itemSize:d.itemSize,array:null},d=0,g=b.length;d<g;d++){var k=b[d];if(e instanceof k){f.array=new k(e);break}}a.attributes[c]=f}d=0;for(g=this.offsets.length;d<g;d++)b=this.offsets[d],a.offsets.push({start:b.start,index:b.index,count:b.count});
return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.BufferGeometry.prototype);THREE.Geometry=function(){this.id=THREE.GeometryIdCount++;this.uuid=THREE.Math.generateUUID();this.className="Geometry";this.name="";this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphColors=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.dynamic=this.hasTangents=!0;this.buffersNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=this.tangentsNeedUpdate=this.normalsNeedUpdate=
this.uvsNeedUpdate=this.elementsNeedUpdate=this.verticesNeedUpdate=!1};
THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(a){for(var b=(new THREE.Matrix3).getNormalMatrix(a),c=0,d=this.vertices.length;c<d;c++)this.vertices[c].applyMatrix4(a);c=0;for(d=this.faces.length;c<d;c++){var e=this.faces[c];e.normal.applyMatrix3(b).normalize();for(var f=0,g=e.vertexNormals.length;f<g;f++)e.vertexNormals[f].applyMatrix3(b).normalize();e.centroid.applyMatrix4(a)}this.boundingBox instanceof THREE.Box3&&this.computeBoundingBox();this.boundingSphere instanceof
THREE.Sphere&&this.computeBoundingSphere()},computeCentroids:function(){var a,b,c;a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],c.centroid.set(0,0,0),c.centroid.add(this.vertices[c.a]),c.centroid.add(this.vertices[c.b]),c.centroid.add(this.vertices[c.c]),c.centroid.divideScalar(3)},computeFaceNormals:function(){for(var a=new THREE.Vector3,b=new THREE.Vector3,c=0,d=this.faces.length;c<d;c++){var e=this.faces[c],f=this.vertices[e.a],g=this.vertices[e.b];a.subVectors(this.vertices[e.c],g);b.subVectors(f,
g);a.cross(b);a.normalize();e.normal.copy(a)}},computeVertexNormals:function(a){var b,c,d;d=Array(this.vertices.length);b=0;for(c=this.vertices.length;b<c;b++)d[b]=new THREE.Vector3;if(a){var e,f,g,k=new THREE.Vector3,h=new THREE.Vector3;new THREE.Vector3;new THREE.Vector3;new THREE.Vector3;a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],e=this.vertices[c.a],f=this.vertices[c.b],g=this.vertices[c.c],k.subVectors(g,f),h.subVectors(e,f),k.cross(h),d[c.a].add(k),d[c.b].add(k),d[c.c].add(k)}else for(a=
0,b=this.faces.length;a<b;a++)c=this.faces[a],d[c.a].add(c.normal),d[c.b].add(c.normal),d[c.c].add(c.normal);b=0;for(c=this.vertices.length;b<c;b++)d[b].normalize();a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],c.vertexNormals[0]=d[c.a].clone(),c.vertexNormals[1]=d[c.b].clone(),c.vertexNormals[2]=d[c.c].clone()},computeMorphNormals:function(){var a,b,c,d,e;c=0;for(d=this.faces.length;c<d;c++)for(e=this.faces[c],e.__originalFaceNormal?e.__originalFaceNormal.copy(e.normal):e.__originalFaceNormal=
e.normal.clone(),e.__originalVertexNormals||(e.__originalVertexNormals=[]),a=0,b=e.vertexNormals.length;a<b;a++)e.__originalVertexNormals[a]?e.__originalVertexNormals[a].copy(e.vertexNormals[a]):e.__originalVertexNormals[a]=e.vertexNormals[a].clone();var f=new THREE.Geometry;f.faces=this.faces;a=0;for(b=this.morphTargets.length;a<b;a++){if(!this.morphNormals[a]){this.morphNormals[a]={};this.morphNormals[a].faceNormals=[];this.morphNormals[a].vertexNormals=[];e=this.morphNormals[a].faceNormals;var g=
this.morphNormals[a].vertexNormals,k,h;c=0;for(d=this.faces.length;c<d;c++)k=new THREE.Vector3,h={a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3},e.push(k),g.push(h)}g=this.morphNormals[a];f.vertices=this.morphTargets[a].vertices;f.computeFaceNormals();f.computeVertexNormals();c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],k=g.faceNormals[c],h=g.vertexNormals[c],k.copy(e.normal),h.a.copy(e.vertexNormals[0]),h.b.copy(e.vertexNormals[1]),h.c.copy(e.vertexNormals[2])}c=0;for(d=this.faces.length;c<
d;c++)e=this.faces[c],e.normal=e.__originalFaceNormal,e.vertexNormals=e.__originalVertexNormals},computeTangents:function(){var a,b,c,d,e,f,g,k,h,m,n,q,s,r,u,p,w,v=[],t=[];c=new THREE.Vector3;var x=new THREE.Vector3,B=new THREE.Vector3,J=new THREE.Vector3,E=new THREE.Vector3;a=0;for(b=this.vertices.length;a<b;a++)v[a]=new THREE.Vector3,t[a]=new THREE.Vector3;a=0;for(b=this.faces.length;a<b;a++)e=this.faces[a],f=this.faceVertexUvs[0][a],d=e.a,w=e.b,e=e.c,g=this.vertices[d],k=this.vertices[w],h=this.vertices[e],
m=f[0],n=f[1],q=f[2],f=k.x-g.x,s=h.x-g.x,r=k.y-g.y,u=h.y-g.y,k=k.z-g.z,g=h.z-g.z,h=n.x-m.x,p=q.x-m.x,n=n.y-m.y,m=q.y-m.y,q=1/(h*m-p*n),c.set((m*f-n*s)*q,(m*r-n*u)*q,(m*k-n*g)*q),x.set((h*s-p*f)*q,(h*u-p*r)*q,(h*g-p*k)*q),v[d].add(c),v[w].add(c),v[e].add(c),t[d].add(x),t[w].add(x),t[e].add(x);x=["a","b","c","d"];a=0;for(b=this.faces.length;a<b;a++)for(e=this.faces[a],c=0;c<Math.min(e.vertexNormals.length,3);c++)E.copy(e.vertexNormals[c]),d=e[x[c]],w=v[d],B.copy(w),B.sub(E.multiplyScalar(E.dot(w))).normalize(),
J.crossVectors(e.vertexNormals[c],w),d=J.dot(t[d]),d=0>d?-1:1,e.vertexTangents[c]=new THREE.Vector4(B.x,B.y,B.z,d);this.hasTangents=!0},computeLineDistances:function(){for(var a=0,b=this.vertices,c=0,d=b.length;c<d;c++)0<c&&(a+=b[c].distanceTo(b[c-1])),this.lineDistances[c]=a},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);
this.boundingSphere.setFromPoints(this.vertices)},mergeVertices:function(){var a={},b=[],c=[],d,e=Math.pow(10,4),f,g;f=0;for(g=this.vertices.length;f<g;f++)d=this.vertices[f],d=Math.round(d.x*e)+"_"+Math.round(d.y*e)+"_"+Math.round(d.z*e),void 0===a[d]?(a[d]=f,b.push(this.vertices[f]),c[f]=b.length-1):c[f]=c[a[d]];a=[];f=0;for(g=this.faces.length;f<g;f++)for(e=this.faces[f],e.a=c[e.a],e.b=c[e.b],e.c=c[e.c],e=[e.a,e.b,e.c],d=0;3>d;d++)if(e[d]==e[(d+1)%3]){a.push(f);break}for(f=a.length-1;0<=f;f--)for(e=
a[f],this.faces.splice(e,1),c=0,g=this.faceVertexUvs.length;c<g;c++)this.faceVertexUvs[c].splice(e,1);f=this.vertices.length-b.length;this.vertices=b;return f},makeGroups:function(){var a=0;return function(b){var c,d,e,f,g={},k=this.morphTargets.length,h=this.morphNormals.length;this.geometryGroups={};c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],e=b?e.materialIndex:0,e in g||(g[e]={hash:e,counter:0}),f=g[e].hash+"_"+g[e].counter,f in this.geometryGroups||(this.geometryGroups[f]={faces3:[],
materialIndex:e,vertices:0,numMorphTargets:k,numMorphNormals:h}),65535<this.geometryGroups[f].vertices+3&&(g[e].counter+=1,f=g[e].hash+"_"+g[e].counter,f in this.geometryGroups||(this.geometryGroups[f]={faces3:[],materialIndex:e,vertices:0,numMorphTargets:k,numMorphNormals:h})),this.geometryGroups[f].faces3.push(c),this.geometryGroups[f].vertices+=3;this.geometryGroupsList=[];for(var m in this.geometryGroups)this.geometryGroups[m].id=a++,this.geometryGroupsList.push(this.geometryGroups[m])}}(),clone:function(){for(var a=
new THREE.Geometry,b=this.vertices,c=0,d=b.length;c<d;c++)a.vertices.push(b[c].clone());b=this.faces;c=0;for(d=b.length;c<d;c++)a.faces.push(b[c].clone());b=this.faceVertexUvs[0];c=0;for(d=b.length;c<d;c++){for(var e=b[c],f=[],g=0,k=e.length;g<k;g++)f.push(new THREE.Vector2(e[g].x,e[g].y));a.faceVertexUvs[0].push(f)}a.morphTargets=this.morphTargets.slice(0);a.morphColors=this.morphColors.slice(0);a.morphNormals=this.morphNormals.slice(0);a.skinWeights=this.skinWeights.slice(0);a.skinIndices=this.skinIndices.slice(0);
a.lineDistances=this.lineDistances.slice(0);this.boundingBox&&(a.boundingBox=this.boundingBox.clone());this.boundingSphere&&(a.boundingSphere=this.boundingSphere.clone());a.hasTangents=this.hasTangents;a.dynamic=this.dynamic;return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Geometry.prototype);THREE.GeometryIdCount=0;THREE.Geometry2=function(a){THREE.BufferGeometry.call(this);this.className="Geometry2";this.vertices=this.addAttribute("position",Float32Array,a,3).array;this.normals=this.addAttribute("normal",Float32Array,a,3).array;this.uvs=this.addAttribute("uv",Float32Array,a,2).array;this.boundingSphere=this.boundingBox=null};THREE.Geometry2.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.Camera=function(){THREE.Object3D.call(this);this.matrixWorldInverse=new THREE.Matrix4;this.projectionMatrix=new THREE.Matrix4;this.normalizedViewport={x:0,y:0,width:1,height:1}};THREE.Camera.prototype=Object.create(THREE.Object3D.prototype);THREE.Camera.prototype.lookAt=function(){var a=new THREE.Matrix4;return function(b){a.lookAt(this.position,b,this.up);this.quaternion.setFromRotationMatrix(a)}}();
THREE.Camera.prototype.clone=function(a){void 0===a&&(a=new THREE.Camera);THREE.Object3D.prototype.clone.call(this,a);a.matrixWorldInverse.copy(this.matrixWorldInverse);a.projectionMatrix.copy(this.projectionMatrix);a.normalizedViewport={x:this.normalizedViewport.x,y:this.normalizedViewport.y,width:this.normalizedViewport.width,height:this.normalizedViewport.height};return a};THREE.OrthographicCamera=function(a,b,c,d,e,f){THREE.Camera.call(this);this.left=a;this.right=b;this.top=c;this.bottom=d;this.near=void 0!==e?e:0.1;this.far=void 0!==f?f:2E3;this.updateProjectionMatrix()};THREE.OrthographicCamera.prototype=Object.create(THREE.Camera.prototype);
THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){this.projectionMatrix.makeOrthographic(this.left,this.right,this.top,this.bottom,this.near,this.far);var a=new THREE.Matrix4;a.elements[0]*=this.normalizedViewport.width;a.elements[1]*=this.normalizedViewport.height;a.elements[12]+=this.normalizedViewport.x;a.elements[13]+=this.normalizedViewport.y;this.projectionMatrix=a.multiply(this.projectionMatrix)};
THREE.OrthographicCamera.prototype.clone=function(){var a=new THREE.OrthographicCamera;THREE.Camera.prototype.clone.call(this,a);a.left=this.left;a.right=this.right;a.top=this.top;a.bottom=this.bottom;a.near=this.near;a.far=this.far;return a};THREE.PerspectiveCamera=function(a,b,c,d,e,f){THREE.Camera.call(this);this.fov=void 0!==a?a:50;this.aspect=void 0!==b?b:1;this.near=void 0!==c?c:0.1;this.far=void 0!==d?d:2E3;this.filmSize=void 0!==e?e:new THREE.Vector2(1,1);this.filmOffset=void 0!==f?f:new THREE.Vector2(0,0);this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype=Object.create(THREE.Camera.prototype);
THREE.PerspectiveCamera.prototype.setLens=function(a,b){void 0===b&&(b=24);this.fov=2*THREE.Math.radToDeg(Math.atan(b/(2*a)));this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype.setViewOffset=function(a,b,c,d,e,f){this.fullWidth=a;this.fullHeight=b;this.x=c;this.y=d;this.width=e;this.height=f;this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){if(this.fullWidth){var a=this.fullWidth/this.fullHeight,b=Math.tan(THREE.Math.degToRad(0.5*this.fov))*this.near,c=-b,d=a*c,a=Math.abs(a*b-d),c=Math.abs(b-c);this.projectionMatrix.makeFrustum(d+this.x*a/this.fullWidth,d+(this.x+this.width)*a/this.fullWidth,b-(this.y+this.height)*c/this.fullHeight,b-this.y*c/this.fullHeight,this.near,this.far,this.filmOffset,this.filmSize)}else this.projectionMatrix.makePerspective(this.fov,this.aspect,
this.near,this.far,this.filmOffset,this.filmSize);b=new THREE.Matrix4;b.elements[0]*=this.normalizedViewport.width;b.elements[1]*=this.normalizedViewport.height;b.elements[12]+=this.normalizedViewport.x;b.elements[13]+=this.normalizedViewport.y;this.projectionMatrix=b.multiply(this.projectionMatrix)};
THREE.PerspectiveCamera.prototype.clone=function(){var a=new THREE.PerspectiveCamera;THREE.Camera.prototype.clone.call(this,a);a.fov=this.fov;a.aspect=this.aspect;a.near=this.near;a.far=this.far;a.filmSize=this.filmSize;a.filmOffset=this.filmOffset;return a};THREE.Light=function(a){THREE.Object3D.call(this);this.color=new THREE.Color(a)};THREE.Light.prototype=Object.create(THREE.Object3D.prototype);THREE.Light.prototype.clone=function(a){void 0===a&&(a=new THREE.Light);THREE.Object3D.prototype.clone.call(this,a);a.color.copy(this.color);return a};THREE.AmbientLight=function(a){THREE.Light.call(this,a)};THREE.AmbientLight.prototype=Object.create(THREE.Light.prototype);THREE.AmbientLight.prototype.clone=function(){var a=new THREE.AmbientLight;THREE.Light.prototype.clone.call(this,a);return a};THREE.AreaLight=function(a,b,c,d,e){THREE.Light.call(this,a);this.position.set(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.decayExponent=void 0!==d?d:0;this.physicalFalloff=void 0!==e?e:!1;this.height=this.width=1};THREE.AreaLight.prototype=Object.create(THREE.Light.prototype);
THREE.AreaLight.prototype.clone=function(){var a=new THREE.AreaLight;THREE.Light.prototype.clone.call(this,a);a.target=this.target.clone();a.intensity=this.intensity;a.distance=this.distance;a.decayExponent=this.decayExponent;a.physicalFalloff=this.physicalFalloff;a.width=this.width;a.height=this.height;return a};THREE.DirectionalLight=function(a,b){THREE.Light.call(this,a);this.position.set(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraLeft=-500;this.shadowCameraTop=this.shadowCameraRight=500;this.shadowCameraBottom=-500;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowCascade=!1;this.shadowCascadeOffset=new THREE.Vector3(0,
0,-1E3);this.shadowCascadeCount=2;this.shadowCascadeBias=[0,0,0];this.shadowCascadeWidth=[512,512,512];this.shadowCascadeHeight=[512,512,512];this.shadowCascadeNearZ=[-1,0.99,0.998];this.shadowCascadeFarZ=[0.99,0.998,1];this.shadowCascadeArray=[];this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null};THREE.DirectionalLight.prototype=Object.create(THREE.Light.prototype);
THREE.DirectionalLight.prototype.clone=function(){var a=new THREE.DirectionalLight;THREE.Light.prototype.clone.call(this,a);a.target=this.target.clone();a.intensity=this.intensity;a.castShadow=this.castShadow;a.onlyShadow=this.onlyShadow;return a};THREE.HemisphereLight=function(a,b,c){THREE.Light.call(this,a);this.position.set(0,100,0);this.groundColor=new THREE.Color(b);this.intensity=void 0!==c?c:1};THREE.HemisphereLight.prototype=Object.create(THREE.Light.prototype);THREE.HemisphereLight.prototype.clone=function(){var a=new THREE.HemisphereLight;THREE.Light.prototype.clone.call(this,a);a.groundColor.copy(this.groundColor);a.intensity=this.intensity;return a};THREE.PointLight=function(a,b,c,d,e){THREE.Light.call(this,a);this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.decayExponent=void 0!==d?d:0;this.physicalFalloff=void 0!==e?e:!1};THREE.PointLight.prototype=Object.create(THREE.Light.prototype);THREE.PointLight.prototype.clone=function(){var a=new THREE.PointLight;THREE.Light.prototype.clone.call(this,a);a.intensity=this.intensity;a.distance=this.distance;a.decayExponent=this.decayExponent;a.physicalFalloff=this.physicalFalloff;return a};THREE.SpotLight=function(a,b,c,d,e,f,g){THREE.Light.call(this,a);this.position.set(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.decayExponent=void 0!==f?f:0;this.physicalFalloff=void 0!==g?g:!1;this.angle=void 0!==d?d:Math.PI/3;this.exponent=void 0!==e?e:10;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraFov=50;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=
this.shadowMapWidth=512;this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null};THREE.SpotLight.prototype=Object.create(THREE.Light.prototype);
THREE.SpotLight.prototype.clone=function(){var a=new THREE.SpotLight;THREE.Light.prototype.clone.call(this,a);a.target=this.target.clone();a.intensity=this.intensity;a.distance=this.distance;a.angle=this.angle;a.exponent=this.exponent;a.decayExponent=this.decayExponent;a.physicalFalloff=this.physicalFalloff;a.castShadow=this.castShadow;a.onlyShadow=this.onlyShadow;return a};THREE.Loader=function(a){this.statusDomElement=(this.showStatus=a)?THREE.Loader.prototype.addStatusElement():null;this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}};
THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:void 0,addStatusElement:function(){var a=document.createElement("div");a.style.position="absolute";a.style.right="0px";a.style.top="0px";a.style.fontSize="0.8em";a.style.textAlign="left";a.style.background="rgba(0,0,0,0.25)";a.style.color="#fff";a.style.width="120px";a.style.padding="0.5em 0.5em 0.5em 0.5em";a.style.zIndex=1E3;a.innerHTML="Loading ...";return a},updateProgress:function(a){var b="Loaded ",b=a.total?b+((100*a.loaded/a.total).toFixed(0)+
"%"):b+((a.loaded/1E3).toFixed(2)+" KB");this.statusDomElement.innerHTML=b},extractUrlBase:function(a){a=a.split("/");if(1===a.length)return"./";a.pop();return a.join("/")+"/"},initMaterials:function(a,b){for(var c=[],d=0;d<a.length;++d)c[d]=THREE.Loader.prototype.createMaterial(a[d],b);return c},needsTangents:function(a){for(var b=0,c=a.length;b<c;b++)if(a[b]instanceof THREE.ShaderMaterial)return!0;return!1},createMaterial:function(a,b){function c(a){a=Math.log(a)/Math.LN2;return Math.floor(a)==
a}function d(a){a=Math.log(a)/Math.LN2;return Math.pow(2,Math.round(a))}function e(a,b){var e=new Image;e.onload=function(){if(c(this.width)&&c(this.height))a.image=this;else{var b=d(this.width),e=d(this.height);a.image.width=b;a.image.height=e;a.image.getContext("2d").drawImage(this,0,0,b,e)}a.needsUpdate=!0};void 0!==k.crossOrigin&&(e.crossOrigin=k.crossOrigin);e.src=b}function f(a,c,d,f,g,k,h){var m=/\.dds$/i.test(d),n=b+d;if(m){var B=THREE.ImageUtils.loadCompressedTexture(n);a[c]=B}else B=document.createElement("canvas"),
a[c]=new THREE.Texture(B);a[c].sourceFile=d;f&&(a[c].repeat.set(f[0],f[1]),1!==f[0]&&(a[c].wrapS=THREE.RepeatWrapping),1!==f[1]&&(a[c].wrapT=THREE.RepeatWrapping));g&&a[c].offset.set(g[0],g[1]);k&&(d={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping},void 0!==d[k[0]]&&(a[c].wrapS=d[k[0]]),void 0!==d[k[1]]&&(a[c].wrapT=d[k[1]]));h&&(a[c].anisotropy=h);m||e(a[c],n)}function g(a){return(255*a[0]<<16)+(255*a[1]<<8)+255*a[2]}var k=this,h="MeshLambertMaterial",m={color:15658734,opacity:1,
map:null,lightMap:null,normalMap:null,bumpMap:null,wireframe:!1};if(a.shading){var n=a.shading.toLowerCase();"phong"===n?h="MeshPhongMaterial":"basic"===n?h="MeshBasicMaterial":"physical"===n&&(h="MeshPhysicalMaterial")}void 0!==a.blending&&void 0!==THREE[a.blending]&&(m.blending=THREE[a.blending]);if(void 0!==a.transparent||1>a.opacity)m.transparent=a.transparent;void 0!==a.depthTest&&(m.depthTest=a.depthTest);void 0!==a.depthWrite&&(m.depthWrite=a.depthWrite);void 0!==a.visible&&(m.visible=a.visible);
void 0!==a.flipSided&&(m.side=THREE.BackSide);void 0!==a.doubleSided&&(m.side=THREE.DoubleSide);void 0!==a.wireframe&&(m.wireframe=a.wireframe);void 0!==a.vertexColors&&("face"===a.vertexColors?m.vertexColors=THREE.FaceColors:a.vertexColors&&(m.vertexColors=THREE.VertexColors));a.colorDiffuse?m.color=g(a.colorDiffuse):a.DbgColor&&(m.color=a.DbgColor);a.colorSpecular&&(m.specular=g(a.colorSpecular));a.colorAmbient&&(m.ambient=g(a.colorAmbient));a.transparency&&(m.opacity=a.transparency);a.specularCoef&&
(m.shininess=a.specularCoef);a.mapDiffuse&&b&&f(m,"map",a.mapDiffuse,a.mapDiffuseRepeat,a.mapDiffuseOffset,a.mapDiffuseWrap,a.mapDiffuseAnisotropy);a.mapLight&&b&&f(m,"lightMap",a.mapLight,a.mapLightRepeat,a.mapLightOffset,a.mapLightWrap,a.mapLightAnisotropy);a.mapBump&&b&&f(m,"bumpMap",a.mapBump,a.mapBumpRepeat,a.mapBumpOffset,a.mapBumpWrap,a.mapBumpAnisotropy);a.mapNormal&&b&&f(m,"normalMap",a.mapNormal,a.mapNormalRepeat,a.mapNormalOffset,a.mapNormalWrap,a.mapNormalAnisotropy);a.mapSpecular&&b&&
f(m,"specularMap",a.mapSpecular,a.mapSpecularRepeat,a.mapSpecularOffset,a.mapSpecularWrap,a.mapSpecularAnisotropy);a.mapBumpScale&&(m.bumpScale=a.mapBumpScale);a.mapNormal?(h=THREE.ShaderLib.normalmap,n=THREE.UniformsUtils.clone(h.uniforms),n.tNormal.value=m.normalMap,a.mapNormalFactor&&n.uNormalScale.value.set(a.mapNormalFactor,a.mapNormalFactor),m.map&&(n.tDiffuse.value=m.map,n.enableDiffuse.value=!0),m.specularMap&&(n.tSpecular.value=m.specularMap,n.enableSpecular.value=!0),m.lightMap&&(n.tAO.value=
m.lightMap,n.enableAO.value=!0),n.diffuse.value.setHex(m.color),n.specular.value.setHex(m.specular),n.ambient.value.setHex(m.ambient),n.shininess.value=m.shininess,void 0!==m.opacity&&(n.opacity.value=m.opacity),h=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:n,lights:!0,fog:!0}),m.transparent&&(h.transparent=!0)):h=new THREE[h](m);void 0!==a.DbgName&&(h.name=a.DbgName);return h}};THREE.XHRLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.XHRLoader.prototype={constructor:THREE.XHRLoader,load:function(a,b,c,d){var e=this,f=new XMLHttpRequest;void 0!==b&&f.addEventListener("load",function(c){b(c.target.responseText);e.manager.itemEnd(a)},!1);void 0!==c&&f.addEventListener("progress",function(a){c(a)},!1);void 0!==d&&f.addEventListener("error",function(a){d(a)},!1);void 0!==this.crossOrigin&&(f.crossOrigin=this.crossOrigin);f.open("GET",a,!0);f.send(null);e.manager.itemStart(a)},setCrossOrigin:function(a){this.crossOrigin=a}};THREE.ImageLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(a,b,c,d){var e=this,f=document.createElement("img");void 0!==b&&f.addEventListener("load",function(c){e.manager.itemEnd(a);b(this)},!1);void 0!==c&&f.addEventListener("progress",function(a){c(a)},!1);void 0!==d&&f.addEventListener("error",function(a){d(a)},!1);void 0!==this.crossOrigin&&(f.crossOrigin=this.crossOrigin);f.src=a;e.manager.itemStart(a);return f},setCrossOrigin:function(a){this.crossOrigin=a}};THREE.JSONLoader=function(a){THREE.Loader.call(this,a);this.withCredentials=!1};THREE.JSONLoader.prototype=Object.create(THREE.Loader.prototype);THREE.JSONLoader.prototype.load=function(a,b,c){c=c&&"string"===typeof c?c:this.extractUrlBase(a);this.onLoadStart();this.loadAjaxJSON(this,a,b,c)};
THREE.JSONLoader.prototype.loadAjaxJSON=function(a,b,c,d,e){var f=new XMLHttpRequest,g=0;f.onreadystatechange=function(){if(f.readyState===f.DONE)if(200===f.status||0===f.status){if(f.responseText){var k=JSON.parse(f.responseText);if("scene"===k.metadata.type){THREE.onerror('THREE.JSONLoader: "'+b+'" seems to be a Scene. Use THREE.SceneLoader instead.');return}k=a.parse(k,d);c(k.geometry,k.materials)}else THREE.onerror('THREE.JSONLoader: "'+b+'" seems to be unreachable or the file is empty.');a.onLoadComplete()}else THREE.onerror("THREE.JSONLoader: Couldn't load \""+
b+'" ('+f.status+")");else f.readyState===f.LOADING?e&&(0===g&&(g=f.getResponseHeader("Content-Length")),e({total:g,loaded:f.responseText.length})):f.readyState===f.HEADERS_RECEIVED&&void 0!==e&&(g=f.getResponseHeader("Content-Length"))};f.open("GET",b,!0);f.withCredentials=this.withCredentials;f.send(null)};
THREE.JSONLoader.prototype.parse=function(a,b){var c=new THREE.Geometry,d=void 0!==a.scale?1/a.scale:1;(function(b){var d,g,k,h,m,n,q,s,r,u,p,w,v,t=a.faces;n=a.vertices;var x=a.normals,B=a.colors,J=0;if(void 0!==a.uvs){for(d=0;d<a.uvs.length;d++)a.uvs[d].length&&J++;for(d=0;d<J;d++)c.faceVertexUvs[d]=[]}h=0;for(m=n.length;h<m;)d=new THREE.Vector3,d.x=n[h++]*b,d.y=n[h++]*b,d.z=n[h++]*b,c.vertices.push(d);h=0;for(m=t.length;h<m;)if(b=t[h++],r=b&1,k=b&2,d=b&8,q=b&16,u=b&32,n=b&64,b&=128,r){r=new THREE.Face3;
r.a=t[h];r.b=t[h+1];r.c=t[h+3];p=new THREE.Face3;p.a=t[h+1];p.b=t[h+2];p.c=t[h+3];h+=4;k&&(k=t[h++],r.materialIndex=k,p.materialIndex=k);k=c.faces.length;if(d)for(d=0;d<J;d++)for(w=a.uvs[d],c.faceVertexUvs[d][k]=[],c.faceVertexUvs[d][k+1]=[],g=0;4>g;g++)s=t[h++],v=w[2*s],s=w[2*s+1],v=new THREE.Vector2(v,s),2!==g&&c.faceVertexUvs[d][k].push(v),0!==g&&c.faceVertexUvs[d][k+1].push(v);q&&(q=3*t[h++],r.normal.set(x[q++],x[q++],x[q]),p.normal.copy(r.normal));if(u)for(d=0;4>d;d++)q=3*t[h++],u=new THREE.Vector3(x[q++],
x[q++],x[q]),2!==d&&r.vertexNormals.push(u),0!==d&&p.vertexNormals.push(u);n&&(n=t[h++],n=B[n],r.color.setHex(n),p.color.setHex(n));if(b)for(d=0;4>d;d++)n=t[h++],n=B[n],2!==d&&r.vertexColors.push(new THREE.Color(n)),0!==d&&p.vertexColors.push(new THREE.Color(n));c.faces.push(r);c.faces.push(p)}else{r=new THREE.Face3;r.a=t[h++];r.b=t[h++];r.c=t[h++];k&&(k=t[h++],r.materialIndex=k);k=c.faces.length;if(d)for(d=0;d<J;d++)for(w=a.uvs[d],c.faceVertexUvs[d][k]=[],g=0;3>g;g++)s=t[h++],v=w[2*s],s=w[2*s+1],
v=new THREE.Vector2(v,s),c.faceVertexUvs[d][k].push(v);q&&(q=3*t[h++],r.normal.set(x[q++],x[q++],x[q]));if(u)for(d=0;3>d;d++)q=3*t[h++],u=new THREE.Vector3(x[q++],x[q++],x[q]),r.vertexNormals.push(u);n&&(n=t[h++],r.color.setHex(B[n]));if(b)for(d=0;3>d;d++)n=t[h++],r.vertexColors.push(new THREE.Color(B[n]));c.faces.push(r)}})(d);(function(){if(a.skinWeights)for(var b=0,d=a.skinWeights.length;b<d;b+=2)c.skinWeights.push(new THREE.Vector4(a.skinWeights[b],a.skinWeights[b+1],0,0));if(a.skinIndices)for(b=
0,d=a.skinIndices.length;b<d;b+=2)c.skinIndices.push(new THREE.Vector4(a.skinIndices[b],a.skinIndices[b+1],0,0));c.bones=a.bones;if(c.bones&&0<c.bones.length&&(c.skinWeights.length!==c.skinIndices.length||c.skinIndices.length!==c.vertices.length))THREE.onwarning("When skinning, number of vertices ("+c.vertices.length+"), skinIndices ("+c.skinIndices.length+"), and skinWeights ("+c.skinWeights.length+") should match.");c.animation=a.animation;c.animations=a.animations})();(function(b){if(void 0!==
a.morphTargets){var d,g,k,h,m,n;d=0;for(g=a.morphTargets.length;d<g;d++)for(c.morphTargets[d]={},c.morphTargets[d].name=a.morphTargets[d].name,c.morphTargets[d].vertices=[],m=c.morphTargets[d].vertices,n=a.morphTargets[d].vertices,k=0,h=n.length;k<h;k+=3){var q=new THREE.Vector3;q.x=n[k]*b;q.y=n[k+1]*b;q.z=n[k+2]*b;m.push(q)}}if(void 0!==a.morphColors)for(d=0,g=a.morphColors.length;d<g;d++)for(c.morphColors[d]={},c.morphColors[d].name=a.morphColors[d].name,c.morphColors[d].colors=[],h=c.morphColors[d].colors,
m=a.morphColors[d].colors,b=0,k=m.length;b<k;b+=3)n=new THREE.Color(16755200),n.setRGB(m[b],m[b+1],m[b+2]),h.push(n)})(d);c.computeCentroids();c.computeFaceNormals();c.computeBoundingSphere();if(void 0===a.materials)return{geometry:c};d=this.initMaterials(a.materials,b);this.needsTangents(d)&&c.computeTangents();return{geometry:c,materials:d}};THREE.LoadingManager=function(a,b,c){var d=this,e=0,f=0;this.onLoad=a;this.onProgress=b;this.onError=c;this.itemStart=function(a){f++};this.itemEnd=function(a){e++;if(void 0!==d.onProgress)d.onProgress(a,e,f);if(e===f&&void 0!==d.onLoad)d.onLoad()}};THREE.DefaultLoadingManager=new THREE.LoadingManager;THREE.BufferGeometryLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.BufferGeometryLoader.prototype={constructor:THREE.BufferGeometryLoader,load:function(a,b,c,d){var e=this;c=new THREE.XHRLoader;c.setCrossOrigin(this.crossOrigin);c.load(a,function(a){b(e.parse(JSON.parse(a)))})},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=new THREE.BufferGeometry,c=a.attributes,d=a.offsets;a=a.boundingSphere;for(var e in c){var f=c[e];b.attributes[e]={itemSize:f.itemSize,array:new self[f.type](f.array)}}void 0!==d&&(b.offsets=JSON.parse(JSON.stringify(d)));
void 0!==a&&(b.boundingSphere=new THREE.Sphere((new THREE.Vector3).fromArray(void 0!==a.center?a.center:[0,0,0]),a.radius));return b}};THREE.Geometry2Loader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.Geometry2Loader.prototype={constructor:THREE.Geometry2Loader,load:function(a,b,c,d){var e=this;c=new THREE.XHRLoader;c.setCrossOrigin(this.crossOrigin);c.load(a,function(a){b(e.parse(JSON.parse(a)))})},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=new THREE.Geometry2(a.vertices.length/3),c=["vertices","normals","uvs"],d=a.boundingSphere,e;for(e in c){var f=c[e];b[f].set(a[f])}void 0!==d&&(b.boundingSphere=new THREE.Sphere((new THREE.Vector3).fromArray(void 0!==d.center?
d.center:[0,0,0]),d.radius));return b}};THREE.MaterialLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.MaterialLoader.prototype={constructor:THREE.MaterialLoader,load:function(a,b,c,d){var e=this;c=new THREE.XHRLoader;c.setCrossOrigin(this.crossOrigin);c.load(a,function(a){b(e.parse(JSON.parse(a)))})},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=new THREE[a.type];void 0!==a.color&&b.color.setHex(a.color);void 0!==a.ambient&&b.ambient.setHex(a.ambient);void 0!==a.emissive&&b.emissive.setHex(a.emissive);void 0!==a.specular&&b.specular.setHex(a.specular);void 0!==a.falloff&&
(b.falloff=a.falloff);void 0!==a.falloffColor&&b.falloffColor.setHex(a.falloffColor);void 0!==a.roughness&&(b.roughness=a.roughness);void 0!==a.metallic&&(b.metallic=a.metallic);void 0!==a.clearCoat&&(b.clearCoat=a.clearCoat);void 0!==a.clearCoatRoughness&&(b.clearCoatRoughness=a.clearCoatRoughness);void 0!==a.anisotropy&&(b.anisotropy=a.anisotropy);void 0!==a.anisotropyRotation&&(b.anisotropyRotation=a.anisotropyRotation);void 0!==a.translucency&&b.translucency.setHex(a.translucency);void 0!==a.translucencyNormalAlpha&&
(b.translucencyNormalAlpha=a.translucencyNormalAlpha);void 0!==a.translucencyNormalPower&&(b.translucencyNormalPower=a.translucencyNormalPower);void 0!==a.translucencyViewAlpha&&(b.translucencyViewAlpha=a.translucencyViewAlpha);void 0!==a.translucencyViewPower&&(b.translucencyViewPower=a.translucencyViewPower);void 0!==a.shininess&&(b.shininess=a.shininess);void 0!==a.vertexColors&&(b.vertexColors=a.vertexColors);void 0!==a.blending&&(b.blending=a.blending);void 0!==a.side&&(b.side=a.side);void 0!==
a.opacity&&(b.opacity=a.opacity);void 0!==a.transparent&&(b.transparent=a.transparent);void 0!==a.wireframe&&(b.wireframe=a.wireframe);if(void 0!==a.materials)for(var c=0,d=a.materials.length;c<d;c++)b.materials.push(this.parse(a.materials[c]));return b}};THREE.ObjectLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.ObjectLoader.prototype={constructor:THREE.ObjectLoader,load:function(a,b,c,d){var e=this;c=new THREE.XHRLoader(e.manager);c.setCrossOrigin(this.crossOrigin);c.load(a,function(a){b(e.parse(JSON.parse(a)))})},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=this.parseGeometries(a.geometries),c=this.parseMaterials(a.materials);return this.parseObject(a.object,b,c)},parseGeometries:function(a){var b={};if(void 0!==a)for(var c=new THREE.JSONLoader,d=new THREE.Geometry2Loader,
e=new THREE.BufferGeometryLoader,f=0,g=a.length;f<g;f++){var k,h=a[f];switch(h.type){case "PlaneGeometry":k=new THREE.PlaneGeometry(h.width,h.height,h.widthSegments,h.heightSegments);break;case "BoxGeometry":case "CubeGeometry":k=new THREE.BoxGeometry(h.width,h.height,h.depth,h.widthSegments,h.heightSegments,h.depthSegments);break;case "CircleGeometry":k=new THREE.CircleGeometry(h.radius,h.segments);break;case "CylinderGeometry":k=new THREE.CylinderGeometry(h.radiusTop,h.radiusBottom,h.height,h.radialSegments,
h.heightSegments,h.openEnded);break;case "SphereGeometry":k=new THREE.SphereGeometry(h.radius,h.widthSegments,h.heightSegments,h.phiStart,h.phiLength,h.thetaStart,h.thetaLength);break;case "IcosahedronGeometry":k=new THREE.IcosahedronGeometry(h.radius,h.detail);break;case "TorusGeometry":k=new THREE.TorusGeometry(h.radius,h.tube,h.radialSegments,h.tubularSegments,h.arc);break;case "TorusKnotGeometry":k=new THREE.TorusKnotGeometry(h.radius,h.tube,h.radialSegments,h.tubularSegments,h.p,h.q,h.heightScale);
break;case "BufferGeometry":k=e.parse(h.data);break;case "Geometry2":k=d.parse(h.data);break;case "Geometry":k=c.parse(h.data).geometry}k.uuid=h.uuid;void 0!==h.name&&(k.name=h.name);b[h.uuid]=k}return b},parseMaterials:function(a){var b={};if(void 0!==a)for(var c=new THREE.MaterialLoader,d=0,e=a.length;d<e;d++){var f=a[d],g=c.parse(f);g.uuid=f.uuid;void 0!==f.name&&(g.name=f.name);b[f.uuid]=g}return b},parseObject:function(){var a=new THREE.Matrix4;return function(b,c,d){var e;switch(b.type){case "Scene":e=
new THREE.Scene;break;case "PerspectiveCamera":e=new THREE.PerspectiveCamera(b.fov,b.aspect,b.near,b.far);break;case "OrthographicCamera":e=new THREE.OrthographicCamera(b.left,b.right,b.top,b.bottom,b.near,b.far);break;case "AmbientLight":e=new THREE.AmbientLight(b.color);break;case "DirectionalLight":e=new THREE.DirectionalLight(b.color,b.intensity);break;case "PointLight":e=new THREE.PointLight(b.color,b.intensity,b.distance,b.decay,b.physicalFalloff);break;case "SpotLight":e=new THREE.SpotLight(b.color,
b.intensity,b.distance,b.angle,b.exponent,b.decay,b.physicalFalloff);break;case "HemisphereLight":e=new THREE.HemisphereLight(b.color,b.groundColor,b.intensity);break;case "AreaLight":e=new THREE.AreaLight(b.color,b.intensity,b.distance,b.decayExponent,b.decay,b.physicalFalloff);e.width=b.width||1;e.height=b.height||1;break;case "Mesh":e=c[b.geometry];var f=d[b.material];if(void 0===e)THREE.onerror("THREE.ObjectLoader: Undefined geometry "+b.geometry);if(void 0===f)THREE.onerror("THREE.ObjectLoader: Undefined material "+
b.material);e=new THREE.Mesh(e,f);break;case "Sprite":f=d[b.material];if(void 0===f)THREE.onerror("THREE.ObjectLoader: Undefined material "+b.material);e=new THREE.Sprite(f);break;default:e=new THREE.Object3D}e.uuid=b.uuid;void 0!==b.name&&(e.name=b.name);void 0!==b.matrix?(a.fromArray(b.matrix),a.decompose(e.position,e.quaternion,e.scale)):(void 0!==b.position&&e.position.fromArray(b.position),void 0!==b.rotation&&e.rotation.fromArray(b.rotation),void 0!==b.scale&&e.scale.fromArray(b.scale));void 0!==
b.visible&&(e.visible=b.visible);void 0!==b.userData&&(e.userData=b.userData);if(void 0!==b.children)for(var g in b.children)e.add(this.parseObject(b.children[g],c,d));return e}}()};THREE.SceneLoader=function(){this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){};this.callbackSync=function(){};this.callbackProgress=function(){};this.geometryHandlers={};this.hierarchyHandlers={};this.addGeometryHandler("ascii",THREE.JSONLoader)};
THREE.SceneLoader.prototype={constructor:THREE.SceneLoader,load:function(a,b,c,d){var e=this;c=new THREE.XHRLoader(e.manager);c.setCrossOrigin(this.crossOrigin);c.load(a,function(c){e.parse(JSON.parse(c),b,a)})},setCrossOrigin:function(a){this.crossOrigin=a},addGeometryHandler:function(a,b){this.geometryHandlers[a]={loaderClass:b}},addHierarchyHandler:function(a,b){this.hierarchyHandlers[a]={loaderClass:b}},parse:function(a,b,c){function d(a,b){return"relativeToHTML"==b?a:r+a}function e(){f(A.scene,
L.objects)}function f(a,b){var c,e,g,k,m,n;for(n in b){var q=A.objects[n],r=b[n];if(void 0===q){if(r.type&&r.type in s.hierarchyHandlers){if(void 0===r.loading){c={type:1,url:1,material:1,position:1,rotation:1,scale:1,visible:1,children:1,userData:1,skin:1,morph:1,mirroredLoop:1,duration:1};var t={},v;for(v in r)v in c||(t[v]=r[v]);p=A.materials[r.material];r.loading=!0;c=s.hierarchyHandlers[r.type].loaderObject;c.options?c.load(d(r.url,L.urlBaseType),h(n,a,p,r)):c.load(d(r.url,L.urlBaseType),h(n,
a,p,r),t)}}else if(void 0!==r.geometry){if(u=A.geometries[r.geometry]){q=!1;p=A.materials[r.material];q=p instanceof THREE.ShaderMaterial;e=r.position;g=r.rotation;k=r.scale;c=r.matrix;m=r.quaternion;r.material||(p=new THREE.MeshFaceMaterial(A.face_materials[r.geometry]));p instanceof THREE.MeshFaceMaterial&&0===p.materials.length&&(p=new THREE.MeshFaceMaterial(A.face_materials[r.geometry]));if(p instanceof THREE.MeshFaceMaterial)for(t=0;t<p.materials.length;t++)q=q||p.materials[t]instanceof THREE.ShaderMaterial;
q&&u.computeTangents();r.skin?q=new THREE.SkinnedMesh(u,p):r.morph?(q=new THREE.MorphAnimMesh(u,p),void 0!==r.duration&&(q.duration=r.duration),void 0!==r.time&&(q.time=r.time),void 0!==r.mirroredLoop&&(q.mirroredLoop=r.mirroredLoop),p.morphNormals&&u.computeMorphNormals()):q=new THREE.Mesh(u,p);q.name=n;c?(q.matrixAutoUpdate=!1,q.matrix.set(c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7],c[8],c[9],c[10],c[11],c[12],c[13],c[14],c[15])):(q.position.fromArray(e),m?q.quaternion.fromArray(m):q.rotation.fromArray(g),
q.scale.fromArray(k));q.visible=r.visible;q.castShadow=r.castShadow;q.receiveShadow=r.receiveShadow;a.add(q);A.objects[n]=q}}else if("AmbientLight"===r.type||"PointLight"===r.type||"DirectionalLight"===r.type||"SpotLight"===r.type||"HemisphereLight"===r.type||"AreaLight"===r.type){t=r.color;c=r.intensity;e=r.distance;g=r.position;k=r.rotation;switch(r.type){case "AmbientLight":x=new THREE.AmbientLight(t);break;case "PointLight":x=new THREE.PointLight(t,c,e);x.position.fromArray(g);break;case "DirectionalLight":x=
new THREE.DirectionalLight(t,c);x.position.fromArray(r.direction);break;case "SpotLight":x=new THREE.SpotLight(t,c,e,1);x.angle=r.angle;x.position.fromArray(g);x.target.set(g[0],g[1]-e,g[2]);x.target.applyEuler(new THREE.Euler(k[0],k[1],k[2],"XYZ"));break;case "HemisphereLight":x=new THREE.DirectionalLight(t,c,e);x.target.set(g[0],g[1]-e,g[2]);x.target.applyEuler(new THREE.Euler(k[0],k[1],k[2],"XYZ"));break;case "AreaLight":x=new THREE.AreaLight(t,c),x.position.fromArray(g),x.width=r.size,x.height=
r.size_y}a.add(x);x.name=n;A.lights[n]=x;A.objects[n]=x}else"PerspectiveCamera"===r.type||"OrthographicCamera"===r.type?(e=r.position,g=r.rotation,m=r.quaternion,"PerspectiveCamera"===r.type?w=new THREE.PerspectiveCamera(r.fov,r.aspect,r.near,r.far):"OrthographicCamera"===r.type&&(w=new THREE.OrthographicCamera(r.left,r.right,r.top,r.bottom,r.near,r.far)),w.name=n,w.position.fromArray(e),void 0!==m?w.quaternion.fromArray(m):void 0!==g&&w.rotation.fromArray(g),a.add(w),A.cameras[n]=w,A.objects[n]=
w):(e=r.position,g=r.rotation,k=r.scale,m=r.quaternion,q=new THREE.Object3D,q.name=n,q.position.fromArray(e),m?q.quaternion.fromArray(m):q.rotation.fromArray(g),q.scale.fromArray(k),q.visible=void 0!==r.visible?r.visible:!1,a.add(q),A.objects[n]=q,A.empties[n]=q);if(q){if(void 0!==r.userData)for(var B in r.userData)q.userData[B]=r.userData[B];if(void 0!==r.groups)for(t=0;t<r.groups.length;t++)c=r.groups[t],void 0===A.groups[c]&&(A.groups[c]=[]),A.groups[c].push(n)}}void 0!==q&&void 0!==r.children&&
f(q,r.children)}}function g(a,b,c,d,f){var g=f.rotation,k=f.quaternion,h=f.scale;a.position.fromArray(f.position);k?a.quaternion.fromArray(k):a.rotation.fromArray(g);a.scale.fromArray(h);d&&a.traverse(function(a){a.material=d});var m=void 0!==f.visible?f.visible:!0;a.traverse(function(a){a.visible=m});c.add(a);a.name=b;A.objects[b]=a;e()}function k(a){return function(b,c){b.name=a;A.geometries[a]=b;A.face_materials[a]=c;e();B-=1;s.onLoadComplete();n()}}function h(a,b,c,d){return function(e){g(e.content?
e.content:e.dae?e.scene:e,a,b,c,d);B-=1;s.onLoadComplete();n()}}function m(a){return function(b,c){b.name=a;A.geometries[a]=b;A.face_materials[a]=c}}function n(){s.callbackProgress({totalModels:E,totalTextures:K,loadedModels:E-B,loadedTextures:K-J},A);s.onLoadProgress();if(0===B&&0===J){for(var a=0;a<z.length;a++){var c=z[a],d=A.objects[c.targetName];d?c.object.target=d:(c.object.target=new THREE.Object3D,A.scene.add(c.object.target));c.object.target.userData.targetInverse=c.object}b(A)}}function q(a,
b){b(a);if(void 0!==a.children)for(var c in a.children)q(a.children[c],b)}var s=this,r=THREE.Loader.prototype.extractUrlBase(c),u,p,w,v,t,x,B,J,E,K,A,z=[],L=a,F;for(F in this.geometryHandlers)a=this.geometryHandlers[F].loaderClass,this.geometryHandlers[F].loaderObject=new a;for(F in this.hierarchyHandlers)a=this.hierarchyHandlers[F].loaderClass,this.hierarchyHandlers[F].loaderObject=new a;J=B=0;A={scene:new THREE.Scene,geometries:{},face_materials:{},materials:{},textures:{},objects:{},cameras:{},
lights:{},fogs:{},empties:{},groups:{}};L.transform&&(F=L.transform.position,a=L.transform.rotation,c=L.transform.scale,F&&A.scene.position.fromArray(F),a&&A.scene.rotation.fromArray(a),c&&A.scene.scale.fromArray(c),F||a||c)&&(A.scene.updateMatrix(),A.scene.updateMatrixWorld());F=function(a){return function(){J-=a;n();s.onLoadComplete()}};for(var P in L.fogs)a=L.fogs[P],"linear"===a.type?v=new THREE.Fog(0,a.near,a.far):"exp2"===a.type&&(v=new THREE.FogExp2(0,a.density)),a=a.color,v.color.setRGB(a[0],
a[1],a[2]),A.fogs[P]=v;for(var y in L.geometries)v=L.geometries[y],v.type in this.geometryHandlers&&(B+=1,s.onLoadStart());for(var G in L.objects)q(L.objects[G],function(a){a.type&&a.type in s.hierarchyHandlers&&(B+=1,s.onLoadStart())});E=B;for(y in L.geometries)if(v=L.geometries[y],"cube"===v.type)u=new THREE.BoxGeometry(v.width,v.height,v.depth,v.widthSegments,v.heightSegments,v.depthSegments),u.name=y,A.geometries[y]=u;else if("plane"===v.type)u=new THREE.PlaneGeometry(v.width,v.height,v.widthSegments,
v.heightSegments),u.name=y,A.geometries[y]=u;else if("sphere"===v.type)u=new THREE.SphereGeometry(v.radius,v.widthSegments,v.heightSegments),u.name=y,A.geometries[y]=u;else if("cylinder"===v.type)u=new THREE.CylinderGeometry(v.topRad,v.botRad,v.height,v.radSegs,v.heightSegs),u.name=y,A.geometries[y]=u;else if("torus"===v.type)u=new THREE.TorusGeometry(v.radius,v.tube,v.segmentsR,v.segmentsT),u.name=y,A.geometries[y]=u;else if("icosahedron"===v.type)u=new THREE.IcosahedronGeometry(v.radius,v.subdivisions),
u.name=y,A.geometries[y]=u;else if(v.type in this.geometryHandlers){G={};for(t in v)"type"!==t&&"url"!==t&&(G[t]=v[t]);this.geometryHandlers[v.type].loaderObject.load(d(v.url,L.urlBaseType),k(y),G)}else"embedded"===v.type&&(G=L.embeds[v.id],G.metadata=L.metadata,G&&(G=this.geometryHandlers.ascii.loaderObject.parse(G,""),m(y)(G.geometry,G.materials)));for(var C in L.textures)if(y=L.textures[C],y.url instanceof Array)for(J+=y.url.length,t=0;t<y.url.length;t++)s.onLoadStart();else J+=1,s.onLoadStart();
K=J;for(C in L.textures){y=L.textures[C];void 0!==y.mapping&&void 0!==THREE[y.mapping]&&(y.mapping=new THREE[y.mapping]);if(y.url instanceof Array){G=y.url.length;v=[];for(t=0;t<G;t++)v[t]=d(y.url[t],L.urlBaseType);t=(t=/\.dds$/i.test(v[0]))?THREE.ImageUtils.loadCompressedTextureCube(v,y.mapping,F(G)):THREE.ImageUtils.loadTextureCube(v,y.mapping,F(G))}else t=/\.dds$/i.test(y.url),G=d(y.url,L.urlBaseType),v=F(1),t=t?THREE.ImageUtils.loadCompressedTexture(G,y.mapping,v):THREE.ImageUtils.loadTexture(G,
y.mapping,v),void 0!==THREE[y.minFilter]&&(t.minFilter=THREE[y.minFilter]),void 0!==THREE[y.magFilter]&&(t.magFilter=THREE[y.magFilter]),y.anisotropy&&(t.anisotropy=y.anisotropy),y.repeat&&(t.repeat.set(y.repeat[0],y.repeat[1]),1!==y.repeat[0]&&(t.wrapS=THREE.RepeatWrapping),1!==y.repeat[1]&&(t.wrapT=THREE.RepeatWrapping)),y.offset&&t.offset.set(y.offset[0],y.offset[1]),y.wrap&&(G={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping},void 0!==G[y.wrap[0]]&&(t.wrapS=G[y.wrap[0]]),void 0!==
G[y.wrap[1]]&&(t.wrapT=G[y.wrap[1]]));A.textures[C]=t}var D,H;for(D in L.materials){C=L.materials[D];for(H in C.parameters)"envMap"===H||"map"===H||"lightMap"===H||"bumpMap"===H?C.parameters[H]=A.textures[C.parameters[H]]:"shading"===H?C.parameters[H]="flat"===C.parameters[H]?THREE.FlatShading:THREE.SmoothShading:"side"===H?C.parameters[H]="double"==C.parameters[H]?THREE.DoubleSide:"back"==C.parameters[H]?THREE.BackSide:THREE.FrontSide:"blending"===H?C.parameters[H]=C.parameters[H]in THREE?THREE[C.parameters[H]]:
THREE.NormalBlending:"combine"===H?C.parameters[H]=C.parameters[H]in THREE?THREE[C.parameters[H]]:THREE.MultiplyOperation:"vertexColors"===H?"face"==C.parameters[H]?C.parameters[H]=THREE.FaceColors:C.parameters[H]&&(C.parameters[H]=THREE.VertexColors):"wrapRGB"===H&&(F=C.parameters[H],C.parameters[H]=new THREE.Vector3(F[0],F[1],F[2]));void 0!==C.parameters.opacity&&1>C.parameters.opacity&&(C.parameters.transparent=!0);C.parameters.normalMap?(F=THREE.ShaderLib.normalmap,y=THREE.UniformsUtils.clone(F.uniforms),
t=C.parameters.color,G=C.parameters.specular,v=C.parameters.ambient,P=C.parameters.shininess,y.tNormal.value=A.textures[C.parameters.normalMap],C.parameters.normalScale&&y.uNormalScale.value.set(C.parameters.normalScale[0],C.parameters.normalScale[1]),C.parameters.map&&(y.tDiffuse.value=C.parameters.map,y.enableDiffuse.value=!0),C.parameters.envMap&&(y.tCube.value=C.parameters.envMap,y.enableReflection.value=!0,y.reflectivity.value=C.parameters.reflectivity),C.parameters.lightMap&&(y.tAO.value=C.parameters.lightMap,
y.enableAO.value=!0),C.parameters.specularMap&&(y.tSpecular.value=A.textures[C.parameters.specularMap],y.enableSpecular.value=!0),C.parameters.displacementMap&&(y.tDisplacement.value=A.textures[C.parameters.displacementMap],y.enableDisplacement.value=!0,y.uDisplacementBias.value=C.parameters.displacementBias,y.uDisplacementScale.value=C.parameters.displacementScale),y.diffuse.value.setHex(t),y.specular.value.setHex(G),y.ambient.value.setHex(v),y.shininess.value=P,C.parameters.opacity&&(y.opacity.value=
C.parameters.opacity),p=new THREE.ShaderMaterial({fragmentShader:F.fragmentShader,vertexShader:F.vertexShader,uniforms:y,lights:!0,fog:!0})):p=new THREE[C.type](C.parameters);p.name=D;A.materials[D]=p}for(D in L.materials)if(C=L.materials[D],C.parameters.materials){H=[];for(t=0;t<C.parameters.materials.length;t++)H.push(A.materials[C.parameters.materials[t]]);A.materials[D].materials=H}e();A.cameras&&L.defaults.camera&&(A.currentCamera=A.cameras[L.defaults.camera]);A.fogs&&L.defaults.fog&&(A.scene.fog=
A.fogs[L.defaults.fog]);s.callbackSync(A);n()}};THREE.TextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(a,b,c,d){c=new THREE.ImageLoader(this.manager);c.setCrossOrigin(this.crossOrigin);c.load(a,function(a){a=new THREE.Texture(a);a.needsUpdate=!0;void 0!==b&&b(a)})},setCrossOrigin:function(a){this.crossOrigin=a}};THREE.Material=function(){this.id=THREE.MaterialIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.side=THREE.FrontSide;this.opacity=1;this.transparent=!1;this.blending=THREE.NormalBlending;this.blendSrc=THREE.SrcAlphaFactor;this.blendDst=THREE.OneMinusSrcAlphaFactor;this.blendEquation=THREE.AddEquation;this.depthWrite=this.depthTest=!0;this.polygonOffset=!1;this.overdraw=this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.needsUpdate=this.visible=!0};
THREE.Material.prototype={constructor:THREE.Material,setValues:function(a){if(void 0!==a)for(var b in a){var c=a[b];if(void 0===c)THREE.onwarning("THREE.Material: '"+b+"' parameter is undefined.");else if(b in this){var d=this[b];d instanceof THREE.Color?d.set(c):d instanceof THREE.Vector3&&c instanceof THREE.Vector3?d.copy(c):this[b]="overdraw"==b?Number(c):c}}},clone:function(a){void 0===a&&(a=new THREE.Material);a.name=this.name;a.side=this.side;a.opacity=this.opacity;a.transparent=this.transparent;
a.blending=this.blending;a.blendSrc=this.blendSrc;a.blendDst=this.blendDst;a.blendEquation=this.blendEquation;a.depthTest=this.depthTest;a.depthWrite=this.depthWrite;a.polygonOffset=this.polygonOffset;a.polygonOffsetFactor=this.polygonOffsetFactor;a.polygonOffsetUnits=this.polygonOffsetUnits;a.alphaTest=this.alphaTest;a.overdraw=this.overdraw;a.visible=this.visible;return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Material.prototype);
THREE.MaterialIdCount=0;THREE.LineBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.linewidth=1;this.linejoin=this.linecap="round";this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.LineBasicMaterial.prototype.clone=function(){var a=new THREE.LineBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.linecap=this.linecap;a.linejoin=this.linejoin;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.LineDashedMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.scale=this.linewidth=1;this.dashSize=3;this.gapSize=1;this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.LineDashedMaterial.prototype.clone=function(){var a=new THREE.LineDashedMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.scale=this.scale;a.dashSize=this.dashSize;a.gapSize=this.gapSize;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.MeshBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.envMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphTargets=this.skinning=!1;this.setValues(a)};
THREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshBasicMaterial.prototype.clone=function(){var a=new THREE.MeshBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=
this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;return a};THREE.MeshLambertMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.envMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=
"round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshLambertMaterial.prototype.clone=function(){var a=new THREE.MeshLambertMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;
a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.MeshPhongMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(0);this.emissive=new THREE.Color(0);this.specular=new THREE.Color(16777215);this.shininess=30;this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.bumpMap=this.emissiveMap=this.lightMap=this.opacityMap=this.map=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.envMap=this.specularMap=null;this.combine=THREE.MultiplyOperation;
this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshPhongMaterial.prototype.clone=function(){var a=new THREE.MeshPhongMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.specular.copy(this.specular);a.shininess=this.shininess;a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.opacityMap=this.opacityMap;a.lightMap=this.lightMap;a.emissiveMap=this.emissiveMap;a.bumpMap=this.bumpMap;a.bumpScale=this.bumpScale;a.normalMap=this.normalMap;
a.normalScale.copy(this.normalScale);a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;
return a};THREE.MeshPhysicalMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.opacityMap=this.map=null;this.fog=!0;this.falloff=!1;this.falloffColor=new THREE.Color(16777215);this.falloffMap=null;this.falloffBlendParams=new THREE.Vector4(1,0,0,1);this.specular=new THREE.Color(16777215);this.specularMap=null;this.roughness=0.5;this.roughnessMap=null;this.metallic=0;this.metallicMap=null;this.clearCoat=0;this.clearCoatRoughness=0.2;this.anisotropy=0;this.anisotropyMap=null;
this.anisotropyRotation=0;this.anisotropyRotationMap=null;this.translucency=new THREE.Color(0);this.translucencyMap=null;this.translucencyNormalAlpha=0.75;this.translucencyNormalPower=1;this.translucencyViewPower=2;this.translucencyViewAlpha=0.75;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.emissive=new THREE.Color(0);this.emissiveMap=null;this.ambient=new THREE.Color(0);this.diffuseEnvMap=this.envMap=this.lightMap=null;this.combine=THREE.AddOperation;
this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.blending=THREE.CustomBlending;this.blendSrc=THREE.OneFactor;this.blendDst=THREE.OneMinusSrcAlphaFactor;this.blendEquation=THREE.AddEquation;this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshPhysicalMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshPhysicalMaterial.prototype.clone=function(){var a=new THREE.MeshPhysicalMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.opacityMap=this.opacityMap;a.fog=this.fog;a.falloff=this.falloff;a.falloffColor.copy(this.falloffColor);a.falloffMap=this.falloffMap;a.falloffBlendParams.copy(this.falloffBlendParams);a.specular.copy(this.specular);a.specularMap=this.specularMap;a.roughness=this.roughness;a.roughnessMap=this.roughnessMap;a.metallic=this.metallic;
a.metallicMap=this.metallicMap;a.shading=this.shading;a.translucency.copy(this.translucency);a.translucencyMap=this.translucencyMap;a.translucencyNormalAlpha=this.translucencyNormalAlpha;a.translucencyNormalPower=this.translucencyNormalPower;a.translucencyViewPower=this.translucencyViewPower;a.translucencyViewAlpha=this.translucencyViewAlpha;a.bumpMap=this.bumpMap;a.bumpScale=this.bumpScale;a.normalMap=this.normalMap;a.normalScale.copy(this.normalScale);a.emissive.copy(this.emissive);a.emissiveMap=
this.emissiveMap;a.ambient.copy(this.ambient);a.lightMap=this.lightMap;a.envMap=this.envMap;a.diffuseEnvMap=this.diffuseEnvMap;a.combine=this.combine;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.MeshDepthMaterial=function(a){THREE.Material.call(this);this.wireframe=!1;this.wireframeLinewidth=1;this.setValues(a)};THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshDepthMaterial.prototype.clone=function(){var a=new THREE.MeshDepthMaterial;THREE.Material.prototype.clone.call(this,a);a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};THREE.MeshNormalMaterial=function(a){THREE.Material.call(this,a);this.shading=THREE.FlatShading;this.wireframe=!1;this.wireframeLinewidth=1;this.morphTargets=!1;this.setValues(a)};THREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshNormalMaterial.prototype.clone=function(){var a=new THREE.MeshNormalMaterial;THREE.Material.prototype.clone.call(this,a);a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};THREE.MeshFaceMaterial=function(a){this.materials=a instanceof Array?a:[]};THREE.MeshFaceMaterial.prototype.clone=function(){for(var a=new THREE.MeshFaceMaterial,b=0;b<this.materials.length;b++)a.materials.push(this.materials[b].clone());return a};THREE.ParticleSystemMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.map=null;this.size=1;this.sizeAttenuation=!0;this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.ParticleSystemMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ParticleSystemMaterial.prototype.clone=function(){var a=new THREE.ParticleSystemMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.size=this.size;a.sizeAttenuation=this.sizeAttenuation;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.ParticleBasicMaterial=THREE.ParticleSystemMaterial;THREE.ShaderMaterial=function(a){THREE.Material.call(this);this.shaderID=null;this.vertexShader=this.fragmentShader="void main() {}";this.uniforms={};this.defines={};this.attributes=null;this.shading=THREE.SmoothShading;this.linewidth=1;this.wireframe=!1;this.wireframeLinewidth=1;this.lights=this.fog=!1;this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName="position";this.setValues(a)};
THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ShaderMaterial.prototype.clone=function(){var a=new THREE.ShaderMaterial;THREE.Material.prototype.clone.call(this,a);a.fragmentShader=this.fragmentShader;a.vertexShader=this.vertexShader;a.uniforms=THREE.UniformsUtils.clone(this.uniforms);a.attributes=this.attributes;a.defines=this.defines;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.fog=this.fog;a.lights=this.lights;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=
this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.SpriteMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.map=null;this.rotation=0;this.fog=!1;this.setValues(a)};THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype);THREE.SpriteMaterial.prototype.clone=function(){var a=new THREE.SpriteMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.rotation=this.rotation;a.fog=this.fog;return a};THREE.SpriteCanvasMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.program=function(a,c){};this.setValues(a)};THREE.SpriteCanvasMaterial.prototype=Object.create(THREE.Material.prototype);THREE.SpriteCanvasMaterial.prototype.clone=function(){var a=new THREE.SpriteCanvasMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.program=this.program;return a};THREE.ParticleCanvasMaterial=THREE.SpriteCanvasMaterial;THREE.Texture=function(a,b,c,d,e,f,g,k,h){this.id=THREE.TextureIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.image=a;this.mipmaps=[];this.mapping=void 0!==b?b:new THREE.UVMapping;this.wrapS=void 0!==c?c:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==d?d:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==e?e:THREE.LinearFilter;this.minFilter=void 0!==f?f:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==h?h:1;this.format=void 0!==g?g:THREE.RGBAFormat;this.type=void 0!==k?k:THREE.UnsignedByteType;
this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.invert=!1;this.gainPivot=0;this.gain=1;this.brightness=0;this.encoding=THREE.sRGB;this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this._needsUpdate=!1;this.onUpdate=null};
THREE.Texture.prototype={constructor:THREE.Texture,get needsUpdate(){return this._needsUpdate},set needsUpdate(a){!0===a&&this.update();this._needsUpdate=a},clone:function(a){void 0===a&&(a=new THREE.Texture);a.image=this.image;a.mipmaps=this.mipmaps.slice(0);a.mapping=this.mapping;a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.format=this.format;a.type=this.type;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.invert=
this.invert;a.gainPivot=this.gainPivot;a.gain=this.gain;a.brightness=this.brightness;a.encoding=this.encoding;a.generateMipmaps=this.generateMipmaps;a.premultiplyAlpha=this.premultiplyAlpha;a.flipY=this.flipY;a.unpackAlignment=this.unpackAlignment;return a},update:function(){this.dispatchEvent({type:"update"})},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Texture.prototype);THREE.TextureIdCount=0;THREE.CompressedTexture=function(a,b,c,d,e,f,g,k,h,m,n){THREE.Texture.call(this,null,f,g,k,h,m,d,e,n);this.image={width:b,height:c};this.mipmaps=a;this.generateMipmaps=!1};THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype);THREE.CompressedTexture.prototype.clone=function(){var a=new THREE.CompressedTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.DataTexture=function(a,b,c,d,e,f,g,k,h,m,n){THREE.Texture.call(this,null,f,g,k,h,m,d,e,n);this.image={data:a,width:b,height:c}};THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DataTexture.prototype.clone=function(){var a=new THREE.DataTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.ParticleSystem=function(a,b){THREE.Object3D.call(this);this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.ParticleSystemMaterial({color:16777215*Math.random()});this.frustumCulled=this.sortParticles=!1};THREE.ParticleSystem.prototype=Object.create(THREE.Object3D.prototype);
THREE.ParticleSystem.prototype.clone=function(a){void 0===a&&(a=new THREE.ParticleSystem(this.geometry,this.material));a.sortParticles=this.sortParticles;THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Line=function(a,b,c){THREE.Object3D.call(this);this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.LineBasicMaterial({color:16777215*Math.random()});this.type=void 0!==c?c:THREE.LineStrip};THREE.LineStrip=0;THREE.LinePieces=1;THREE.Line.prototype=Object.create(THREE.Object3D.prototype);THREE.Line.prototype.clone=function(a){void 0===a&&(a=new THREE.Line(this.geometry,this.material,this.type));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Mesh=function(a,b){THREE.Object3D.call(this);this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.MeshBasicMaterial({color:16777215*Math.random()});this.updateMorphTargets()};THREE.Mesh.prototype=Object.create(THREE.Object3D.prototype);
THREE.Mesh.prototype.updateMorphTargets=function(){if(void 0!==this.geometry.morphTargets&&0<this.geometry.morphTargets.length){this.morphTargetBase=-1;this.morphTargetForcedOrder=[];this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var a=0,b=this.geometry.morphTargets.length;a<b;a++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[a].name]=a}};
THREE.Mesh.prototype.getMorphTargetIndexByName=function(a){if(void 0!==this.morphTargetDictionary[a])return this.morphTargetDictionary[a];THREE.onwarning("THREE.Mesh.getMorphTargetIndexByName: morph target "+a+" does not exist. Returning 0.");return 0};THREE.Mesh.prototype.clone=function(a){void 0===a&&(a=new THREE.Mesh(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Bone=function(a){THREE.Object3D.call(this);this.skin=a;this.skinMatrix=new THREE.Matrix4};THREE.Bone.prototype=Object.create(THREE.Object3D.prototype);THREE.Bone.prototype.update=function(a,b){this.matrixAutoUpdate&&(b|=this.updateMatrix());if(b||this.matrixWorldNeedsUpdate)a?this.skinMatrix.multiplyMatrices(a,this.matrix):this.skinMatrix.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,b=!0;var c,d=this.children.length;for(c=0;c<d;c++)this.children[c].update(this.skinMatrix,b)};THREE.SkinnedMesh=function(a,b,c){THREE.Mesh.call(this,a,b);this.useVertexTexture=void 0!==c?c:!0;this.identityMatrix=new THREE.Matrix4;this.bones=[];this.boneMatrices=[];var d,e,f;if(this.geometry&&void 0!==this.geometry.bones){for(a=0;a<this.geometry.bones.length;a++)c=this.geometry.bones[a],d=c.pos,e=c.rotq,f=c.scl,b=this.addBone(),b.name=c.name,b.position.set(d[0],d[1],d[2]),b.quaternion.set(e[0],e[1],e[2],e[3]),void 0!==f?b.scale.set(f[0],f[1],f[2]):b.scale.set(1,1,1);for(a=0;a<this.bones.length;a++)c=
this.geometry.bones[a],b=this.bones[a],-1===c.parent?this.add(b):this.bones[c.parent].add(b);a=this.bones.length;this.useVertexTexture?(this.boneTextureHeight=this.boneTextureWidth=a=256<a?64:64<a?32:16<a?16:8,this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType),this.boneTexture.minFilter=THREE.NearestFilter,this.boneTexture.magFilter=
THREE.NearestFilter,this.boneTexture.generateMipmaps=!1,this.boneTexture.flipY=!1):this.boneMatrices=new Float32Array(16*a);this.pose()}};THREE.SkinnedMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.SkinnedMesh.prototype.addBone=function(a){void 0===a&&(a=new THREE.Bone(this));this.bones.push(a);return a};
THREE.SkinnedMesh.prototype.updateMatrixWorld=function(){var a=new THREE.Matrix4;return function(b){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||b)this.parent?this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1;b=0;for(var c=this.children.length;b<c;b++){var d=this.children[b];d instanceof THREE.Bone?d.update(this.identityMatrix,!1):d.updateMatrixWorld(!0)}if(void 0==this.boneInverses)for(this.boneInverses=
[],b=0,c=this.bones.length;b<c;b++)d=new THREE.Matrix4,d.getInverse(this.bones[b].skinMatrix),this.boneInverses.push(d);b=0;for(c=this.bones.length;b<c;b++)a.multiplyMatrices(this.bones[b].skinMatrix,this.boneInverses[b]),a.flattenToArrayOffset(this.boneMatrices,16*b);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)}}();THREE.SkinnedMesh.prototype.pose=function(){this.updateMatrixWorld(!0);this.normalizeSkinWeights()};
THREE.SkinnedMesh.prototype.normalizeSkinWeights=function(){if(this.geometry instanceof THREE.Geometry)for(var a=0;a<this.geometry.skinIndices.length;a++){var b=this.geometry.skinWeights[a],c=1/b.lengthManhattan();Infinity!==c?b.multiplyScalar(c):b.set(1)}};THREE.SkinnedMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.SkinnedMesh(this.geometry,this.material,this.useVertexTexture));THREE.Mesh.prototype.clone.call(this,a);return a};THREE.MorphAnimMesh=function(a,b){THREE.Mesh.call(this,a,b);this.duration=1E3;this.mirroredLoop=!1;this.currentKeyframe=this.lastKeyframe=this.time=0;this.direction=1;this.directionBackwards=!1;this.setFrameRange(0,this.geometry.morphTargets.length-1)};THREE.MorphAnimMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.MorphAnimMesh.prototype.setFrameRange=function(a,b){this.startKeyframe=a;this.endKeyframe=b;this.length=this.endKeyframe-this.startKeyframe+1};
THREE.MorphAnimMesh.prototype.setDirectionForward=function(){this.direction=1;this.directionBackwards=!1};THREE.MorphAnimMesh.prototype.setDirectionBackward=function(){this.direction=-1;this.directionBackwards=!0};
THREE.MorphAnimMesh.prototype.parseAnimations=function(){var a=this.geometry;a.animations||(a.animations={});for(var b,c=a.animations,d=/([a-z]+)(\d+)/,e=0,f=a.morphTargets.length;e<f;e++){var g=a.morphTargets[e].name.match(d);if(g&&1<g.length){g=g[1];c[g]||(c[g]={start:Infinity,end:-Infinity});var k=c[g];e<k.start&&(k.start=e);e>k.end&&(k.end=e);b||(b=g)}}a.firstAnimation=b};
THREE.MorphAnimMesh.prototype.setAnimationLabel=function(a,b,c){this.geometry.animations||(this.geometry.animations={});this.geometry.animations[a]={start:b,end:c}};THREE.MorphAnimMesh.prototype.playAnimation=function(a,b){var c=this.geometry.animations[a];if(c)this.setFrameRange(c.start,c.end),this.duration=(c.end-c.start)/b*1E3,this.time=0;else THREE.onwarning("animation["+a+"] undefined")};
THREE.MorphAnimMesh.prototype.updateAnimation=function(a){var b=this.duration/this.length;this.time+=this.direction*a;if(this.mirroredLoop){if(this.time>this.duration||0>this.time)this.direction*=-1,this.time>this.duration&&(this.time=this.duration,this.directionBackwards=!0),0>this.time&&(this.time=0,this.directionBackwards=!1)}else this.time%=this.duration,0>this.time&&(this.time+=this.duration);a=this.startKeyframe+THREE.Math.clamp(Math.floor(this.time/b),0,this.length-1);a!==this.currentKeyframe&&
(this.morphTargetInfluences[this.lastKeyframe]=0,this.morphTargetInfluences[this.currentKeyframe]=1,this.morphTargetInfluences[a]=0,this.lastKeyframe=this.currentKeyframe,this.currentKeyframe=a);b=this.time%b/b;this.directionBackwards&&(b=1-b);this.morphTargetInfluences[this.currentKeyframe]=b;this.morphTargetInfluences[this.lastKeyframe]=1-b};
THREE.MorphAnimMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.MorphAnimMesh(this.geometry,this.material));a.duration=this.duration;a.mirroredLoop=this.mirroredLoop;a.time=this.time;a.lastKeyframe=this.lastKeyframe;a.currentKeyframe=this.currentKeyframe;a.direction=this.direction;a.directionBackwards=this.directionBackwards;THREE.Mesh.prototype.clone.call(this,a);return a};THREE.LOD=function(){THREE.Object3D.call(this);this.objects=[]};THREE.LOD.prototype=Object.create(THREE.Object3D.prototype);THREE.LOD.prototype.addLevel=function(a,b){void 0===b&&(b=0);b=Math.abs(b);for(var c=0;c<this.objects.length&&!(b<this.objects[c].distance);c++);this.objects.splice(c,0,{distance:b,object:a});this.add(a)};THREE.LOD.prototype.getObjectForDistance=function(a){for(var b=1,c=this.objects.length;b<c&&!(a<this.objects[b].distance);b++);return this.objects[b-1].object};
THREE.LOD.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){if(1<this.objects.length){a.setFromMatrixPosition(c.matrixWorld);b.setFromMatrixPosition(this.matrixWorld);c=a.distanceTo(b);this.objects[0].object.visible=!0;for(var d=1,e=this.objects.length;d<e;d++)if(c>=this.objects[d].distance)this.objects[d-1].object.visible=!1,this.objects[d].object.visible=!0;else break;for(;d<e;d++)this.objects[d].object.visible=!1}}}();
THREE.LOD.prototype.clone=function(a){void 0===a&&(a=new THREE.LOD);THREE.Object3D.prototype.clone.call(this,a);for(var b=0,c=this.objects.length;b<c;b++){var d=this.objects[b].object.clone();d.visible=0===b;a.addLevel(d,this.objects[b].distance)}return a};THREE.Sprite=function(){var a=new THREE.Geometry2(3);a.vertices.set([-0.5,-0.5,0,0.5,-0.5,0,0.5,0.5,0]);return function(b){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.SpriteMaterial}}();THREE.Sprite.prototype=Object.create(THREE.Object3D.prototype);THREE.Sprite.prototype.updateMatrix=function(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0};
THREE.Sprite.prototype.clone=function(a){void 0===a&&(a=new THREE.Sprite(this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Particle=THREE.Sprite;THREE.Scene=function(){THREE.Object3D.call(this);this.overrideMaterial=this.fog=null;this.autoUpdate=!0;this.matrixAutoUpdate=!1;this.__lights=[];this.__objectsAdded=[];this.__objectsRemoved=[]};THREE.Scene.prototype=Object.create(THREE.Object3D.prototype);
THREE.Scene.prototype.__addObject=function(a){if(a instanceof THREE.Light)-1===this.__lights.indexOf(a)&&this.__lights.push(a),a.target&&void 0===a.target.parent&&this.add(a.target);else if(!(a instanceof THREE.Camera||a instanceof THREE.Bone)){this.__objectsAdded.push(a);var b=this.__objectsRemoved.indexOf(a);-1!==b&&this.__objectsRemoved.splice(b,1)}this.dispatchEvent({type:"objectAdded",object:a});a.dispatchEvent({type:"addedToScene",scene:this});for(b=0;b<a.children.length;b++)this.__addObject(a.children[b])};
THREE.Scene.prototype.__removeObject=function(a){if(a instanceof THREE.Light){var b=this.__lights.indexOf(a);-1!==b&&this.__lights.splice(b,1);if(a.shadowCascadeArray)for(b=0;b<a.shadowCascadeArray.length;b++)this.__removeObject(a.shadowCascadeArray[b])}else a instanceof THREE.Camera||(this.__objectsRemoved.push(a),b=this.__objectsAdded.indexOf(a),-1!==b&&this.__objectsAdded.splice(b,1));this.dispatchEvent({type:"objectRemoved",object:a});a.dispatchEvent({type:"removedFromScene",scene:this});for(b=
0;b<a.children.length;b++)this.__removeObject(a.children[b])};THREE.Scene.prototype.clone=function(a){void 0===a&&(a=new THREE.Scene);THREE.Object3D.prototype.clone.call(this,a);null!==this.fog&&(a.fog=this.fog.clone());null!==this.overrideMaterial&&(a.overrideMaterial=this.overrideMaterial.clone());a.autoUpdate=this.autoUpdate;a.matrixAutoUpdate=this.matrixAutoUpdate;return a};THREE.Fog=function(a,b,c){this.name="";this.color=new THREE.Color(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3};THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)};THREE.FogExp2=function(a,b){this.name="";this.color=new THREE.Color(a);this.density=void 0!==b?b:2.5E-4};THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)};THREE.CanvasRenderer=function(a){function b(a,b,c){for(var d=0,e=E.length;d<e;d++){var f=E[d];La.copy(f.color);if(f instanceof THREE.DirectionalLight){var g=da.setFromMatrixPosition(f.matrixWorld).normalize(),k=b.dot(g);0>=k||(k*=f.intensity,c.add(La.multiplyScalar(k)))}else f instanceof THREE.PointLight&&(g=da.setFromMatrixPosition(f.matrixWorld),k=b.dot(da.subVectors(g,a).normalize()),0>=k||(k*=0==f.distance?1:1-Math.min(a.distanceTo(g)/f.distance,1),0!=k&&(k*=f.intensity,c.add(La.multiplyScalar(k)))))}}
function c(a,b,c,d){s(b);r(c);u(d);p(a.getStyle());y.stroke();Wa.expandByScalar(2*b)}function d(a){w(a.getStyle());y.fill()}function e(a){f(a.target)}function f(a){var b=a.wrapS===THREE.RepeatWrapping,c=a.wrapT===THREE.RepeatWrapping,d=a.image,e=document.createElement("canvas");e.width=d.width;e.height=d.height;var f=e.getContext("2d");f.setTransform(1,0,0,-1,0,d.height);f.drawImage(d,0,0);ka[a.id]=y.createPattern(e,!0===b&&!0===c?"repeat":!0===b&&!1===c?"repeat-x":!1===b&&!0===c?"repeat-y":"no-repeat")}
function g(a,b,c,d,g,k,l,h,m,n,p,s,r){if(!(r instanceof THREE.DataTexture)){!1===r.hasEventListener("update",e)&&(void 0!==r.image&&0<r.image.width&&f(r),r.addEventListener("update",e));var q=ka[r.id];if(void 0!==q){w(q);var q=r.offset.x/r.repeat.x,u=r.offset.y/r.repeat.y,t=r.image.width*r.repeat.x;r=r.image.height*r.repeat.y;l=(l+q)*t;h=(h+u)*r;c-=a;d-=b;g-=a;k-=b;m=(m+q)*t-l;n=(n+u)*r-h;p=(p+q)*t-l;s=(s+u)*r-h;r=m*s-p*n;0!==r&&(q=1/r,r=(s*c-n*g)*q,n=(s*d-n*k)*q,c=(m*g-p*c)*q,d=(m*k-p*d)*q,a=a-r*
l-c*h,b=b-n*l-d*h,y.save(),y.transform(r,n,c,d,a,b),y.fill(),y.restore())}else w("rgba(0,0,0,1)"),y.fill()}}function k(a,b,c,d,e,f,g,k,l,h,m,n,p){var r,s;r=p.width-1;s=p.height-1;g*=r;k*=s;c-=a;d-=b;e-=a;f-=b;l=l*r-g;h=h*s-k;m=m*r-g;n=n*s-k;s=1/(l*n-m*h);r=(n*c-h*e)*s;h=(n*d-h*f)*s;c=(l*e-m*c)*s;d=(l*f-m*d)*s;a=a-r*g-c*k;b=b-h*g-d*k;y.save();y.transform(r,h,c,d,a,b);y.clip();y.drawImage(p,0,0);y.restore()}function h(a,b,c,d){ma[0]=255*a.r|0;ma[1]=255*a.g|0;ma[2]=255*a.b|0;ma[4]=255*b.r|0;ma[5]=255*
b.g|0;ma[6]=255*b.b|0;ma[8]=255*c.r|0;ma[9]=255*c.g|0;ma[10]=255*c.b|0;ma[12]=255*d.r|0;ma[13]=255*d.g|0;ma[14]=255*d.b|0;Na.putImageData(ib,0,0);Oa.drawImage(l,0,0);return Qa}function m(a,b,c){var d=b.x-a.x,e=b.y-a.y,f=d*d+e*e;0!==f&&(c/=Math.sqrt(f),d*=c,e*=c,b.x+=d,b.y+=e,a.x-=d,a.y-=e)}function n(a){D!==a&&(D=y.globalAlpha=a)}function q(a){H!==a&&(a===THREE.NormalBlending?y.globalCompositeOperation="source-over":a===THREE.AdditiveBlending?y.globalCompositeOperation="lighter":a===THREE.SubtractiveBlending&&
(y.globalCompositeOperation="darker"),H=a)}function s(a){V!==a&&(V=y.lineWidth=a)}function r(a){ga!==a&&(ga=y.lineCap=a)}function u(a){Y!==a&&(Y=y.lineJoin=a)}function p(a){Q!==a&&(Q=y.strokeStyle=a)}function w(a){aa!==a&&(aa=y.fillStyle=a)}function v(a,b){if(ha!==a||N!==b)y.setLineDash([a,b]),ha=a,N=b}console.log("THREE.CanvasRenderer",THREE.REVISION);var t=THREE.Math.smoothstep;a=a||{};var x=this,B,J,E,K=new THREE.Projector,A=void 0!==a.canvas?a.canvas:document.createElement("canvas"),z=A.width,
L=A.height,F=Math.floor(z/2),P=Math.floor(L/2),y=A.getContext("2d",{alpha:!0===a.alpha}),G=new THREE.Color(0),C=0,D=1,H=0,Q=null,aa=null,V=null,ga=null,Y=null,ha=null,N=0,ba,I,U,la;new THREE.RenderableVertex;new THREE.RenderableVertex;var S,T,Aa,ta,Ca,Fa,R=new THREE.Color,pa=new THREE.Color,ja=new THREE.Color,Ja=new THREE.Color,Da=new THREE.Color,Ea=new THREE.Color,Z=new THREE.Color,La=new THREE.Color,ka={},Pa,Ma,wa,qa,ca,ya,Ka,Ga,hb,za,Ba=new THREE.Box2,ra=new THREE.Box2,Wa=new THREE.Box2,ia=new THREE.Color,
db=new THREE.Color,Sa=new THREE.Color,da=new THREE.Vector3,ea=new THREE.Vector3,Ra=new THREE.Matrix3,l,Na,ib,ma,Qa,Oa,Za=16;l=document.createElement("canvas");l.width=l.height=2;Na=l.getContext("2d");Na.fillStyle="rgba(0,0,0,1)";Na.fillRect(0,0,2,2);ib=Na.getImageData(0,0,2,2);ma=ib.data;Qa=document.createElement("canvas");Qa.width=Qa.height=Za;Oa=Qa.getContext("2d");Oa.translate(-Za/2,-Za/2);Oa.scale(Za,Za);Za--;void 0===y.setLineDash&&(y.setLineDash=void 0!==y.mozDash?function(a){y.mozDash=null!==
a[0]?a:null}:function(){});this.domElement=A;this.devicePixelRatio=void 0!==a.devicePixelRatio?a.devicePixelRatio:void 0!==self.devicePixelRatio?self.devicePixelRatio:1;this.sortElements=this.sortObjects=this.autoClear=!0;this.info={render:{vertices:0,faces:0}};this.supportsVertexTextures=function(){};this.setFaceCulling=function(){};this.setSize=function(a,b,c){z=a*this.devicePixelRatio;L=b*this.devicePixelRatio;F=Math.floor(z/2);P=Math.floor(L/2);A.width=z;A.height=L;1!==this.devicePixelRatio&&
!1!==c&&(A.style.width=a+"px",A.style.height=b+"px");Ba.min.set(-F,-P);Ba.max.set(F,P);ra.min.set(-F,-P);ra.max.set(F,P);D=1;H=0;Y=ga=V=aa=Q=null};this.setClearColor=function(a,b){G.set(a);C=void 0!==b?b:1;ra.min.set(-F,-P);ra.max.set(F,P)};this.setClearColorHex=function(a,b){THREE.onwarning("DEPRECATED: .setClearColorHex() is being removed. Use .setClearColor() instead.");this.setClearColor(a,b)};this.getMaxAnisotropy=function(){return 0};this.clear=function(){y.setTransform(1,0,0,-1,F,P);!1===ra.empty()&&
(ra.intersect(Ba),ra.expandByScalar(2),1>C&&y.clearRect(ra.min.x|0,ra.min.y|0,ra.max.x-ra.min.x|0,ra.max.y-ra.min.y|0),0<C&&(q(THREE.NormalBlending),n(1),w("rgba("+Math.floor(255*G.r)+","+Math.floor(255*G.g)+","+Math.floor(255*G.b)+","+C+")"),y.fillRect(ra.min.x|0,ra.min.y|0,ra.max.x-ra.min.x|0,ra.max.y-ra.min.y|0)),ra.makeEmpty())};this.clearColor=function(){};this.clearDepth=function(){};this.clearStencil=function(){};this.render=function(a,l){if(!1===l instanceof THREE.Camera)THREE.onerror("THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.");
else{!0===this.autoClear&&this.clear();y.setTransform(1,0,0,-1,F,P);x.info.render.vertices=0;x.info.render.faces=0;B=K.projectScene(a,l,this.sortObjects,this.sortElements);J=B.elements;E=B.lights;ba=l;Ra.getNormalMatrix(l.matrixWorldInverse);ia.setRGB(0,0,0);db.setRGB(0,0,0);Sa.setRGB(0,0,0);for(var A=0,L=E.length;A<L;A++){var C=E[A],H=C.color;C instanceof THREE.AmbientLight?ia.add(H):C instanceof THREE.DirectionalLight?db.add(H):C instanceof THREE.PointLight&&Sa.add(H)}A=0;for(L=J.length;A<L;A++){var z=
J[A],D=z.material;if(void 0!==D&&!1!==D.visible){Wa.makeEmpty();if(z instanceof THREE.RenderableSprite){I=z;I.x*=F;I.y*=P;C=I;H=D;n(H.opacity);q(H.blending);var G=z.scale.x*F,z=z.scale.y*P,D=0.5*Math.sqrt(G*G+z*z);Wa.min.set(C.x-D,C.y-D);Wa.max.set(C.x+D,C.y+D);if(H instanceof THREE.SpriteMaterial||H instanceof THREE.ParticleSystemMaterial){var N=H.map;if(null!==N){!1===N.hasEventListener("update",e)&&(void 0!==N.image&&0<N.image.width&&f(N),N.addEventListener("update",e));D=ka[N.id];void 0!==D?w(D):
w("rgba( 0, 0, 0, 1 )");var Q=N.image,D=Q.width*N.offset.x,V=Q.height*N.offset.y,aa=Q.width*N.repeat.x,N=Q.height*N.repeat.y,Q=G/aa,Y=z/N;y.save();y.translate(C.x,C.y);0!==H.rotation&&y.rotate(H.rotation);y.translate(-G/2,-z/2);y.scale(Q,Y);y.translate(-D,-V);y.fillRect(D,V,aa,N)}else w(H.color.getStyle()),y.save(),y.translate(C.x,C.y),0!==H.rotation&&y.rotate(H.rotation),y.scale(G,-z),y.fillRect(-0.5,-0.5,1,1);y.restore()}else H instanceof THREE.SpriteCanvasMaterial&&(p(H.color.getStyle()),w(H.color.getStyle()),
y.save(),y.translate(C.x,C.y),0!==H.rotation&&y.rotate(H.rotation),y.scale(G,z),H.program(y),y.restore())}else if(z instanceof THREE.RenderableLine){if(I=z.v1,U=z.v2,I.positionScreen.x*=F,I.positionScreen.y*=P,U.positionScreen.x*=F,U.positionScreen.y*=P,Wa.setFromPoints([I.positionScreen,U.positionScreen]),!0===Ba.isIntersectionBox(Wa))if(C=I,H=U,G=z,z=D,n(z.opacity),q(z.blending),y.beginPath(),y.moveTo(C.positionScreen.x,C.positionScreen.y),y.lineTo(H.positionScreen.x,H.positionScreen.y),z instanceof
THREE.LineBasicMaterial){s(z.linewidth);r(z.linecap);u(z.linejoin);if(z.vertexColors!==THREE.VertexColors)p(z.color.getStyle());else if(D=G.vertexColors[0].getStyle(),G=G.vertexColors[1].getStyle(),D===G)p(D);else{try{var da=y.createLinearGradient(C.positionScreen.x,C.positionScreen.y,H.positionScreen.x,H.positionScreen.y);da.addColorStop(0,D);da.addColorStop(1,G)}catch(ga){da=D}p(da)}y.stroke();Wa.expandByScalar(2*z.linewidth)}else z instanceof THREE.LineDashedMaterial&&(s(z.linewidth),r(z.linecap),
u(z.linejoin),p(z.color.getStyle()),v(z.dashSize,z.gapSize),y.stroke(),Wa.expandByScalar(2*z.linewidth),v(null,null))}else if(z instanceof THREE.RenderableFace){I=z.v1;U=z.v2;la=z.v3;if(-1>I.positionScreen.z||1<I.positionScreen.z)continue;if(-1>U.positionScreen.z||1<U.positionScreen.z)continue;if(-1>la.positionScreen.z||1<la.positionScreen.z)continue;I.positionScreen.x*=F;I.positionScreen.y*=P;U.positionScreen.x*=F;U.positionScreen.y*=P;la.positionScreen.x*=F;la.positionScreen.y*=P;0<D.overdraw&&
(m(I.positionScreen,U.positionScreen,D.overdraw),m(U.positionScreen,la.positionScreen,D.overdraw),m(la.positionScreen,I.positionScreen,D.overdraw));Wa.setFromPoints([I.positionScreen,U.positionScreen,la.positionScreen]);if(!0===Ba.isIntersectionBox(Wa)){C=I;H=U;G=la;x.info.render.vertices+=3;x.info.render.faces++;n(D.opacity);q(D.blending);S=C.positionScreen.x;T=C.positionScreen.y;Aa=H.positionScreen.x;ta=H.positionScreen.y;Ca=G.positionScreen.x;Fa=G.positionScreen.y;var V=S,aa=T,N=Aa,Q=ta,Y=Ca,ha=
Fa;y.beginPath();y.moveTo(V,aa);y.lineTo(N,Q);y.lineTo(Y,ha);y.closePath();(D instanceof THREE.MeshLambertMaterial||D instanceof THREE.MeshPhongMaterial||D instanceof THREE.MeshPhysicalMaterial)&&null===D.map?(Ea.copy(D.color),Z.copy(D.emissive),D.vertexColors===THREE.FaceColors&&Ea.multiply(z.color),!1===D.wireframe&&D.shading===THREE.SmoothShading&&3===z.vertexNormalsLength?(pa.copy(ia),ja.copy(ia),Ja.copy(ia),b(z.v1.positionWorld,z.vertexNormalsModel[0],pa),b(z.v2.positionWorld,z.vertexNormalsModel[1],
ja),b(z.v3.positionWorld,z.vertexNormalsModel[2],Ja),pa.multiply(Ea).add(Z),ja.multiply(Ea).add(Z),Ja.multiply(Ea).add(Z),Da.addColors(ja,Ja).multiplyScalar(0.5),wa=h(pa,ja,Ja,Da),k(S,T,Aa,ta,Ca,Fa,0,0,1,0,0,1,wa)):(R.copy(ia),b(z.centroidModel,z.normalModel,R),R.multiply(Ea).add(Z),!0===D.wireframe?c(R,D.wireframeLinewidth,D.wireframeLinecap,D.wireframeLinejoin):d(R))):D instanceof THREE.MeshBasicMaterial||D instanceof THREE.MeshLambertMaterial||D instanceof THREE.MeshPhongMaterial?null!==D.map?
D.map.mapping instanceof THREE.UVMapping&&(qa=z.uvs[0],g(S,T,Aa,ta,Ca,Fa,qa[0].x,qa[0].y,qa[1].x,qa[1].y,qa[2].x,qa[2].y,D.map)):null!==D.envMap?D.envMap.mapping instanceof THREE.SphericalReflectionMapping&&(ea.copy(z.vertexNormalsModel[0]).applyMatrix3(Ra),ca=0.5*ea.x+0.5,ya=0.5*ea.y+0.5,ea.copy(z.vertexNormalsModel[1]).applyMatrix3(Ra),Ka=0.5*ea.x+0.5,Ga=0.5*ea.y+0.5,ea.copy(z.vertexNormalsModel[2]).applyMatrix3(Ra),hb=0.5*ea.x+0.5,za=0.5*ea.y+0.5,g(S,T,Aa,ta,Ca,Fa,ca,ya,Ka,Ga,hb,za,D.envMap)):
(R.copy(D.color),D.vertexColors===THREE.FaceColors&&R.multiply(z.color),!0===D.wireframe?c(R,D.wireframeLinewidth,D.wireframeLinecap,D.wireframeLinejoin):d(R)):D instanceof THREE.MeshDepthMaterial?(Pa=ba.near,Ma=ba.far,pa.r=pa.g=pa.b=1-t(C.positionScreen.z*C.positionScreen.w,Pa,Ma),ja.r=ja.g=ja.b=1-t(H.positionScreen.z*H.positionScreen.w,Pa,Ma),Ja.r=Ja.g=Ja.b=1-t(G.positionScreen.z*G.positionScreen.w,Pa,Ma),Da.addColors(ja,Ja).multiplyScalar(0.5),wa=h(pa,ja,Ja,Da),k(S,T,Aa,ta,Ca,Fa,0,0,1,0,0,1,wa)):
D instanceof THREE.MeshNormalMaterial&&(D.shading===THREE.FlatShading?(ea.copy(z.normalModel).applyMatrix3(Ra),R.setRGB(ea.x,ea.y,ea.z).multiplyScalar(0.5).addScalar(0.5),!0===D.wireframe?c(R,D.wireframeLinewidth,D.wireframeLinecap,D.wireframeLinejoin):d(R)):D.shading===THREE.SmoothShading&&(ea.copy(z.vertexNormalsModel[0]).applyMatrix3(Ra),pa.setRGB(ea.x,ea.y,ea.z).multiplyScalar(0.5).addScalar(0.5),ea.copy(z.vertexNormalsModel[1]).applyMatrix3(Ra),ja.setRGB(ea.x,ea.y,ea.z).multiplyScalar(0.5).addScalar(0.5),
ea.copy(z.vertexNormalsModel[2]).applyMatrix3(Ra),Ja.setRGB(ea.x,ea.y,ea.z).multiplyScalar(0.5).addScalar(0.5),Da.addColors(ja,Ja).multiplyScalar(0.5),wa=h(pa,ja,Ja,Da),k(S,T,Aa,ta,Ca,Fa,0,0,1,0,0,1,wa)))}}ra.union(Wa)}}y.setTransform(1,0,0,1,0,0)}}};THREE.ShaderChunk={common:"#define PI 3.14159\n#define PI2 6.28318\n#define LOG2 1.442695\n#define ENCODING_Linear 3000\n#define ENCODING_sRGB 3001\n#define ENCODING_RGBE 3002\n#define ENCODING_RGBM7 3004\n#define ENCODING_RGBM16 3005\n#define SPECULAR_COEFF 0.18\nfloat square( float a ) { return a*a; }\nvec2  square( vec2 a )  { return vec2( a.x*a.x, a.y*a.y ); }\nvec3  square( vec3 a )  { return vec3( a.x*a.x, a.y*a.y, a.z*a.z ); }\nvec4  square( vec4 a )  { return vec4( a.x*a.x, a.y*a.y, a.z*a.z, a.w*a.w ); }\nfloat saturate( float a ) { return clamp( a, 0.0, 1.0 ); }\nvec2  saturate( vec2 a )  { return clamp( a, 0.0, 1.0 ); }\nvec3  saturate( vec3 a )  { return clamp( a, 0.0, 1.0 ); }\nvec4  saturate( vec4 a )  { return clamp( a, 0.0, 1.0 ); }\nfloat average( float a ) { return a; }\nfloat average( vec2 a )  { return ( a.x + a.y) * 0.5; }\nfloat average( vec3 a )  { return ( a.x + a.y + a.z) * 0.3333333333; }\nfloat average( vec4 a )  { return ( a.x + a.y + a.z + a.w) * 0.25; }\nfloat whiteCompliment( float a ) { return saturate( 1.0 - a ); }\nvec2  whiteCompliment( vec2 a )  { return saturate( vec2(1.0) - a ); }\nvec3  whiteCompliment( vec3 a )  { return saturate( vec3(1.0) - a ); }\nvec4  whiteCompliment( vec4 a )  { return saturate( vec4(1.0) - a ); }\nvec3 projectOnPlane( vec3 point, vec3 pointOnPlane, vec3 planeNormal) {\nfloat distance = dot( planeNormal, point-pointOnPlane );\nreturn point - distance * planeNormal;\n}\nfloat sideOfPlane( vec3 point, vec3 pointOnPlane, vec3 planeNormal ) {\nreturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec2 applyUVOffsetRepeat( vec2 uv, vec4 offsetRepeat ) {\nreturn uv * offsetRepeat.zw + offsetRepeat.xy;\n}\nvec3 linePlaneIntersect( vec3 pointOnLine, vec3 lineDirection, vec3 pointOnPlane, vec3 planeNormal ) {\nreturn pointOnLine + lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) );\n}\nvec4 applyGainBrightness( vec4 texel, vec4 gainBrightnessCoeff ) {\nif( gainBrightnessCoeff.w < 0.0 ) {\ntexel.xyz = whiteCompliment( texel.xyz );\n}\ntexel.xyz = ( texel.xyz - vec3( gainBrightnessCoeff.x ) ) * gainBrightnessCoeff.y + vec3( gainBrightnessCoeff.z + gainBrightnessCoeff.x );\nreturn texel;\n}\nvec4 texelDecode( vec4 texel, int encoding ) {\nif( encoding == 3001 ) {\ntexel = vec4( pow( max( texel.xyz, vec3( 0.0 ) ), vec3( 2.2 ) ), texel.w );\n}\nelse if( encoding == 3002 ) {\ntexel = vec4( texel.xyz * pow( 2.0, texel.w*256.0 - 128.0 ), 1.0 );\n}\nelse if( encoding == 3004 ) {\ntexel = vec4( texel.xyz * texel.w * 7.0, 1.0 );\n}\nelse if( encoding == 3005 ) {\ntexel = vec4( texel.xyz * texel.w * 16.0, 1.0 );\n}\nreturn texel;\n}",
fog_pars_fragment:"#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif",fog_fragment:"#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nfloat fogFactor = exp2( - square( fogDensity ) * square( depth ) * LOG2 );\nfogFactor = 1.0 - saturate( fogFactor );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n#endif",
diffuseenvmap_pars_fragment:"#if defined( USE_DIFFUSEENVMAP )\nuniform samplerCube diffuseEnvMap;\nuniform int diffuseEnvEncoding;\n#endif",envmap_pars_fragment:"#if defined( USE_DIFFUSEENVMAP ) || defined( USE_ENVMAP )\nuniform float flipEnvMap;\n#endif\n#ifdef USE_ENVMAP\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform int combine;\nuniform int envEncoding;\n#endif",envmap_fragment:"#if defined( USE_ENVMAP ) && ! defined( PHYSICAL )\nvec3 worldNormal = vec3( normalize( ( vec4( normal, 0.0 ) * viewMatrix ).xyz ) );\nvec3 worldView = -vec3( normalize( ( vec4( viewDirection, 0.0 ) * viewMatrix ).xyz ) );\nvec3 reflectVec = reflect( worldView, worldNormal );\n#ifdef DOUBLE_SIDED\nfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\nvec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#else\nvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#endif\ncubeColor = texelDecode( cubeColor, envEncoding );\nfloat fresnelReflectivity = saturate( reflectivity );\nif ( combine == 1 ) {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, fresnelReflectivity );\n} else if ( combine == 2 ) {\ngl_FragColor.xyz += cubeColor.xyz * fresnelReflectivity;\n} else {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, fresnelReflectivity );\n}\n#endif",
worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n#ifdef USE_SKINNING\nvec4 worldPosition = modelMatrix * skinned;\n#endif\n#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n#endif\n#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n#endif\n#endif",map_particle_pars_fragment:"#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_particle_fragment:"#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texelDecode( texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ), ENCODING_sRGB );\n#endif",map_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_REFLECTIVITYMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALLICMAP ) || defined( USE_OPACITYMAP ) || defined( USE_FALLOFFMAP ) || defined( USE_TRANSLUCENCYMAP ) || defined( USE_ANISOTROPYMAP ) || defined( USE_ANISOTROPYROTATIONMAP )\nvarying vec2 vUv;\n#endif",
map_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_REFLECTIVITYMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALLICMAP ) || defined( USE_OPACITYMAP ) || defined( USE_FALLOFFMAP ) || defined( USE_TRANSLUCENCYMAP ) || defined( USE_ANISOTROPYMAP ) || defined( USE_ANISOTROPYROTATIONMAP )\nvarying vec2 vUv;\nuniform vec4 offsetRepeat;\nuniform vec4 gainBrightness;\n#endif\n#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_REFLECTIVITYMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALLICMAP ) || defined( USE_OPACITYMAP ) || defined( USE_FALLOFFMAP ) || defined( USE_TRANSLUCENCYMAP ) || defined( USE_ANISOTROPYMAP ) || defined( USE_ANISOTROPYROTATIONMAP )\nvUv = uv;\n#endif",map_fragment:"#if defined( USE_MAP ) || defined( USE_FALLOFFMAP )\nvec2 vUvLocal = applyUVOffsetRepeat( vUv, offsetRepeat );\n#endif\n#ifdef USE_MAP\nvec4 texelColor = clamp( applyGainBrightness( texelDecode( texture2D( map, vUvLocal ), ENCODING_sRGB ), gainBrightness ), vec4(0.0), vec4(1.0) );\ngl_FragColor = gl_FragColor * texelColor;\n#if defined( PHYSICAL ) || defined( PHONG )\ndiffuseColor *= texelColor.xyz;\n#endif\n#endif",
falloffmap_pars_fragment:"#ifdef USE_FALLOFFMAP\nuniform sampler2D falloffMap;\n#endif",opacitymap_pars_fragment:"#ifdef USE_OPACITYMAP\nuniform sampler2D opacityMap;\nuniform vec4 opacityOffsetRepeat;\nuniform vec4 opacityGainBrightness;\n#endif",opacitymap_fragment:"#ifdef USE_OPACITYMAP\nvec2 vOpacityUv = applyUVOffsetRepeat( vUv, opacityOffsetRepeat );\nvec4 texelOpacity = applyGainBrightness( texture2D( opacityMap, vOpacityUv ), opacityGainBrightness );\ngl_FragColor.w = clamp( gl_FragColor.w * texelOpacity.r, 0.0, 1.0 );\n#endif",
translucencymap_pars_fragment:"#ifdef USE_TRANSLUCENCYMAP\nuniform sampler2D translucencyMap;\nuniform vec4 translucencyOffsetRepeat;\nuniform vec4 translucencyGainBrightness;\n#endif",translucencymap_fragment:"#ifdef USE_TRANSLUCENCYMAP\nvec2 vTranslucencyUv = applyUVOffsetRepeat( vUv, translucencyOffsetRepeat );\nvec4 texelTranslucency = applyGainBrightness( texture2D( translucencyMap, vTranslucencyUv ), translucencyGainBrightness );\ntranslucencyColor.xyz = clamp( translucencyColor.xyz * texelTranslucency.xyz, vec3( 0.0 ), vec3( 1.0 ) );\n#endif",
lightmap_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_EMISSIVEMAP )\nvarying vec2 vUv2;\n#endif\n#if defined( USE_LIGHTMAP )\nuniform sampler2D lightMap;\n#endif\n#if defined( USE_EMISSIVEMAP )\nuniform sampler2D emissiveMap;\n#endif",lightmap_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_EMISSIVEMAP )\nvarying vec2 vUv2;\n#endif",lightmap_fragment:"#ifdef USE_LIGHTMAP\n#endif",lightmap_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_EMISSIVEMAP )\nvUv2 = uv2;\n#endif",
bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\nuniform sampler2D bumpMap;\nuniform vec4 bumpOffsetRepeat;\nuniform float bumpScale;\nvec2 dHdxy_fwd() {\n#ifdef GL_OES_standard_derivatives\nvec2 vBumpUv = applyUVOffsetRepeat( vUv, bumpOffsetRepeat );\nvec2 dSTdx = dFdx( vBumpUv );\nvec2 dSTdy = dFdy( vBumpUv );\nfloat Hll = bumpScale * texture2D( bumpMap, vBumpUv ).x;\nfloat dBx = bumpScale * texture2D( bumpMap, vBumpUv + dSTdx ).x - Hll;\nfloat dBy = bumpScale * texture2D( bumpMap, vBumpUv + dSTdy ).x - Hll;\nreturn vec2( dBx, dBy );\n#else\nreturn vec2( 0.0, 0.0 );\n#endif\n}\nvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n#ifdef GL_OES_standard_derivatives\nvec3 vSigmaX = dFdx( surf_pos );\nvec3 vSigmaY = dFdy( surf_pos );\nvec3 vN = surf_norm;\nvec3 R1 = cross( vSigmaY, vN );\nvec3 R2 = cross( vN, vSigmaX );\nfloat fDet = dot( vSigmaX, R1 );\nvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\nreturn normalize( abs( fDet ) * surf_norm - vGrad );\n#else\nreturn surf_norm;\n#endif\n}\n#endif",
lightattenuation_func_fragment:"float calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {\nif ( decayExponent > 0.0 && cutoffDistance > 0.0 ) {\nreturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n}\nelse if ( decayExponent < 0.0 ) {\nfloat numerator = 1.0;\nif( cutoffDistance > 0.0 ) {\nnumerator = ( saturate( 1.0 - pow( lightDistance / cutoffDistance, 4.0 ) ) );\nnumerator *= numerator;\n} \nreturn numerator / ( ( lightDistance * lightDistance ) + 1.0 );\n}\nelse {\nreturn 1.0;\n}\n}",
normalmap_pars_fragment:"#ifdef USE_NORMALMAP\nuniform sampler2D normalMap;\nuniform vec4 normalOffsetRepeat;\nuniform vec2 normalScale;\nvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n#ifdef GL_OES_standard_derivatives\nvec2 vNormalUv = applyUVOffsetRepeat( vUv, normalOffsetRepeat );\nvec3 q0 = dFdx( eye_pos.xyz );\nvec3 q1 = dFdy( eye_pos.xyz );\nvec2 st0 = dFdx( vNormalUv.st );\nvec2 st1 = dFdy( vNormalUv.st );\nvec3 S = normalize(  q0 * st1.t - q1 * st0.t );\nvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\nvec3 N = normalize( surf_norm );\nvec3 mapN = texture2D( normalMap, vNormalUv ).xyz * 2.0 - 1.0;\nmapN.xy = normalScale * mapN.xy;\nmat3 tsn = mat3( S, T, N );\nreturn normalize( tsn * mapN );\n#else\nreturn surf_norm;\n#endif\n}\n#endif",
anisotropymap_pars_fragment:"#ifdef USE_ANISOTROPYMAP\nuniform sampler2D anisotropyMap;\nuniform vec4 anisotropyGainBrightness;\nuniform vec4 anisotropyOffsetRepeat;\n#endif",anisotropymap_fragment:"#ifdef USE_ANISOTROPYMAP\nvec2 vAnisotropyUv = applyUVOffsetRepeat( vUv, anisotropyOffsetRepeat );\n#else\n#ifdef ANISOTROPY\n#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_REFLECTIVITYMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALLICMAP ) || defined( USE_OPACITYMAP ) || defined( USE_FALLOFFMAP ) || defined( USE_TRANSLUCENCYMAP ) || defined( USE_ANISOTROPYMAP ) || defined( USE_ANISOTROPYROTATIONMAP )\nvec2 vAnisotropyUv = vUv;\n#else\nvec2 vAnisotropyUv = vec2( 0, 0 );\n#endif\n#endif\n#endif\nfloat anisotropyStrength = anisotropy;\n#ifdef USE_ANISOTROPYMAP\nvec4 texelAnisotropy = applyGainBrightness( texture2D( anisotropyMap, vAnisotropyUv ), anisotropyGainBrightness );\nanisotropyStrength = clamp( anisotropyStrength + texelAnisotropy.r, -1.0, 1.0 );\n#endif",
anisotropyrotationmap_pars_fragment:"#ifdef USE_ANISOTROPYROTATIONMAP\nuniform sampler2D anisotropyRotationMap;\nuniform vec4 anisotropyRotationGainBrightness;\nuniform vec4 anisotropyRotationOffsetRepeat;\n#endif",anisotropyrotationmap_fragment:"float anisotropyRotationStrength = anisotropyRotation;\n#ifdef USE_ANISOTROPYROTATIONMAP\nvec2 vAnisotropyRotationUv = applyUVOffsetRepeat( vUv, anisotropyRotationOffsetRepeat );\nvec4 texelAnisotropyRotation = applyGainBrightness( texture2D( anisotropyRotationMap, vAnisotropyRotationUv ), anisotropyRotationGainBrightness );\nanisotropyRotationStrength += texelAnisotropyRotation.r;\n#endif",
metallicmap_pars_fragment:"#ifdef USE_METALLICMAP\nuniform sampler2D metallicMap;\nuniform vec4 metallicGainBrightness;\nuniform vec4 metallicOffsetRepeat;\n#endif",metallicmap_fragment:"float metallicStrength = metallic;\n#ifdef USE_METALLICMAP\nvec2 vMetallicUv = applyUVOffsetRepeat( vUv, metallicOffsetRepeat );\nvec4 texelMetallic = applyGainBrightness( texture2D( metallicMap, vMetallicUv ), metallicGainBrightness );\nmetallicStrength = clamp( metallicStrength * texelMetallic.r, 0.0, 1.0 );\n#endif",
roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\nuniform sampler2D roughnessMap;\nuniform vec4 roughnessOffsetRepeat;\nuniform vec4 roughnessGainBrightness;\n#endif",roughnessmap_fragment:"float roughnessStrength = roughness;\n#ifdef USE_ROUGHNESSMAP\nvec2 vRoughnessUv = applyUVOffsetRepeat( vUv, roughnessOffsetRepeat );\nvec4 texelRoughness = applyGainBrightness( texture2D( roughnessMap, vRoughnessUv ), roughnessGainBrightness );\nroughnessStrength = clamp( roughnessStrength * texelRoughness.r, 0.0, 1.0 );\n#endif",
specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\nuniform sampler2D specularMap;\nuniform vec4 specularGainBrightness;\nuniform vec4 specularOffsetRepeat;\n#endif",specularmap_fragment:"#ifdef PHYSICAL\nvec3 specularColor = specular;\n#else\nfloat specularStrength = 1.0;\n#endif\n#ifdef USE_SPECULARMAP\nvec2 vSpecularUv = applyUVOffsetRepeat( vUv, specularOffsetRepeat );\nvec4 texelSpecular = applyGainBrightness( texelDecode( texture2D( specularMap, vSpecularUv ), ENCODING_sRGB ), specularGainBrightness );\n#ifdef PHYSICAL\nspecularColor.rgb = clamp( specularColor.rgb * texelSpecular.rgb, vec3( 0.0 ), vec3( 1.0 ) );\n#else\nspecularStrength = clamp( specularStrength * texelSpecular.r, 0.0, 1.0 );\n#endif\n#endif",
lights_lambert_pars_vertex:"uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nuniform float pointLightDecayExponent[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDecayExponent[ MAX_SPOT_LIGHTS ];\n#endif\n#if MAX_AREA_LIGHTS > 0\nuniform vec3 areaLightColor[ MAX_AREA_LIGHTS ];\nuniform vec3 areaLightPosition[ MAX_AREA_LIGHTS ];\nuniform vec3 areaLightWidth[ MAX_AREA_LIGHTS ];\nuniform vec3 areaLightHeight[ MAX_AREA_LIGHTS ];\nuniform float areaLightDistance[ MAX_AREA_LIGHTS ];\nuniform float areaLightDecayExponent[ MAX_AREA_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif",
lights_lambert_vertex:"vLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\nvLightBack = vec3( 0.0 );\n#endif\ntransformedNormal = normalize( transformedNormal );\n#if MAX_DIR_LIGHTS > 0\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, dirVector );\nvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\ndirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\ndirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n#ifdef DOUBLE_SIDED\nvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n#endif\n}\n#endif\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat distanceAttenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecayExponent[i] );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\npointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\npointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += pointLightColor[ i ] * pointLightWeighting * distanceAttenuation;\n#ifdef DOUBLE_SIDED\nvLightBack += pointLightColor[ i ] * pointLightWeightingBack * distanceAttenuation;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat distanceAttenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecayExponent[i] );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\nspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\nspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += spotLightColor[ i ] * spotLightWeighting * distanceAttenuation * spotEffect;\n#ifdef DOUBLE_SIDED\nvLightBack += spotLightColor[ i ] * spotLightWeightingBack * distanceAttenuation * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\nvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n#ifdef DOUBLE_SIDED\nvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n#endif\n}\n#endif\nvLightFront = ( vLightFront + ambientLightColor + ambient) * diffuse + emissive;\n#ifdef DOUBLE_SIDED\nvLightBack = ( vLightFront + ambientLightColor + ambient) * diffuse + emissive;\n#endif",
lights_physical_pars_vertex:"#if MAX_SPOT_LIGHTS > 0 || MAX_AREA_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\nvarying vec3 vWorldPosition;\n#endif",lights_physical_vertex:"#if MAX_SPOT_LIGHTS > 0 || MAX_AREA_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\nvWorldPosition = worldPosition.xyz;\n#endif\n#ifdef USE_SKINNING\nvNormal = normalize( normalMatrix * skinnedNormal.xyz );\nvec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\nvTangent = normalize( normalMatrix * skinnedTangent.xyz );\n#else\nvNormal = normalize( normalMatrix * normal );\nvTangent = normalize( normalMatrix * tangent.xyz );\n#endif\nvBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );",
lights_physical_pars_fragment:"uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nuniform float pointLightDecayExponent[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDecayExponent[ MAX_SPOT_LIGHTS ];\n#endif\n#if MAX_AREA_LIGHTS > 0\nuniform vec3 areaLightColor[ MAX_AREA_LIGHTS ];\nuniform vec3 areaLightPosition[ MAX_AREA_LIGHTS ];\nuniform vec3 areaLightWidth[ MAX_AREA_LIGHTS ];\nuniform vec3 areaLightHeight[ MAX_AREA_LIGHTS ];\nuniform float areaLightDistance[ MAX_AREA_LIGHTS ];\nuniform float areaLightDecayExponent[ MAX_AREA_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0 || MAX_AREA_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvec3 Fresnel_Schlick_SpecularBlendToWhite(vec3 specularColor, float hDotV) {\nfloat Fc = pow(max( 1.0 - hDotV, 0.0 ), 5.0);\nreturn saturate( 50.0 * average( specularColor ) ) * Fc + (1.0 - Fc) * specularColor;\n}\nvec3 Fresnel_Schlick_SpecularBlendToWhiteRoughness(vec3 specularColor, float hDotV, float roughness) {\nfloat Fc = pow(max( 1.0 - hDotV, 0.0 ), 5.0) / ( 1.0 + 3.0 * roughness );\nreturn mix( specularColor, vec3( saturate( 50.0 * average( specularColor ) ) ), Fc );\n}\nfloat Distribution_GGX( float roughness2, float nDotH ) {\nfloat denom = nDotH * nDotH * (roughness2 - 1.0) + 1.0;\nreturn roughness2 / ( PI * square( denom ) + 0.0000001 );\n}\nfloat Distribution_GGXAniso( vec2 anisotropicM, vec2 xyDotH, float nDotH ) {\nfloat anisoTerm = ( xyDotH.x * xyDotH.x / ( anisotropicM.x * anisotropicM.x ) + xyDotH.y * xyDotH.y / ( anisotropicM.y * anisotropicM.y ) + nDotH * nDotH );\nreturn 1.0 / ( PI * anisotropicM.x * anisotropicM.y * anisoTerm * anisoTerm + 0.0000001 );\n}\nfloat Visibility_Kelemen( float vDotH ) {\nreturn 1.0 / ( 4.0 * vDotH * vDotH + 0.0000001 );\n}\nfloat Visibility_Schlick( float roughness2, float nDotL, float nDotV) {\nfloat termL = (nDotL + sqrt(roughness2 + (1.0 - roughness2) * nDotL * nDotL));\nfloat termV = (nDotV + sqrt(roughness2 + (1.0 - roughness2) * nDotV * nDotV));\nreturn 1.0 / ( abs( termL * termV ) + 0.0000001 );\n}\nfloat Diffuse_Lambert() {\nreturn 1.0 / PI;\n}\nfloat Diffuse_OrenNayer( float m2, float nDotV, float nDotL, float vDotH ) {\nfloat termA = 1.0 - 0.5 * m2 / (m2 + 0.33);\nfloat Cosri = 2.0 * vDotH - 1.0 - nDotV * nDotL;\nfloat termB = 0.45 * m2 / (m2 + 0.09) * Cosri * ( Cosri >= 0.0 ? min( 1.0, nDotL / nDotV ) : nDotL );\nreturn 1.0 / PI * ( nDotL * termA + termB );\n}\nmat2 createRotationMat2( float rads) {\nfloat cos_rads = cos( rads );\nfloat sin_rads = sin( rads );\nreturn mat2( vec2( cos_rads, sin_rads ), vec2( -sin_rads, cos_rads ) );\n}\nvec2 calcAnisotropyUV( float anisotropyLocal) {\nfloat oneMinusAbsAnisotropy = 1.0 - min( abs( anisotropyLocal ) * 0.9, 0.9 );\nvec2 anisotropyUV = vec2 ( 1.0 / oneMinusAbsAnisotropy, oneMinusAbsAnisotropy );\nif( anisotropy < 0.0 ) {\nanisotropyUV.xy = anisotropyUV.yx;\n}\nreturn anisotropyUV;\n}",
lights_physical_fragment:"mat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normal );\n#ifdef USE_NORMALMAP\nnormal = perturbNormal2Arb( -vViewPosition, normal );\n#endif\n#if defined( USE_BUMPMAP )\nnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n#ifdef DOUBLE_SIDED\nnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\n#ifdef FALLOFF\nvec3 modulatedFalloffColor = falloffColor;\n#ifdef USE_FALLOFFMAP\nvec4 falloffTexelColor = texelDecode( texture2D( falloffMap, vUvLocal ), ENCODING_sRGB );\nmodulatedFalloffColor = modulatedFalloffColor * falloffTexelColor.xyz;\n#endif\nfloat fm = abs( dot( normal, viewDirection ) );\nfm = /*falloffBlendParams.x * fm + falloffBlendParams.y * */ ( fm * fm * ( 3.0 - 2.0 * fm ) );\ndiffuseColor = mix( modulatedFalloffColor, diffuseColor, fm );\n#endif\nfloat nDotV = saturate( dot( normal, viewDirection ) );\nfloat m2 = pow( clamp( roughnessStrength, 0.02, 1.0 ), 4.0 );\nfloat m2ClearCoat = pow( clamp( clearCoatRoughness, 0.02, 1.0 ), 4.0 );\nspecularColor = mix( specularColor * SPECULAR_COEFF, diffuseColor, metallicStrength );\ndiffuseColor *= ( 1.0 - metallicStrength );\n#ifdef ANISOTROPY\nvec2 anisotropicM = calcAnisotropyUV( anisotropyStrength ) * sqrt( m2 );\n#ifdef ANISOTROPYROTATION\nmat2 anisotropicRotationMatrix = createRotationMat2( anisotropyRotationStrength * 2.0 * PI );\n#endif\nvec3 anisotropicS = tsb[1];\nvec3 anisotropicT = tsb[0];\n#endif\nvec3 totalLighting  = vec3( 0.0 );\n#if ( defined( USE_ENVMAP ) || defined( USE_DIFFUSEENVMAP ) ) && defined( PHYSICAL )\n{\nvec3 worldNormal = vec3( normalize( ( vec4( normal, 0.0 ) * viewMatrix ).xyz ) );\nvec3 worldView = -vec3( normalize( ( vec4( viewDirection, 0.0 ) * viewMatrix ).xyz ) );\nvec3 reflectVec = reflect( worldView, worldNormal );\nvec3 hVector = normal;//normalize( viewDirection.xyz + lVector.xyz );\nfloat nDotH = saturate( dot( normal, normal ) );\nfloat hDotV = saturate( dot( normal, viewDirection ) );\nfloat nDotL = hDotV;//saturate( dot( normal, lVector ) );\nvec3 queryVector = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n#ifdef DOUBLE_SIDED\nqueryVector *= ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\nvec3 worldEnvNormal = vec3( normalize( ( vec4( normal, 0.0 ) * viewMatrix ).xyz ) );\nworldEnvNormal = vec3( flipEnvMap * worldEnvNormal.x, worldEnvNormal.yz );\n#ifdef DOUBLE_SIDED\nworldEnvNormal *= ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\nvec4 diffuseEnvColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n#if defined( USE_DIFFUSEENVMAP )\ndiffuseEnvColor = texelDecode( textureCube( diffuseEnvMap, worldEnvNormal ), diffuseEnvEncoding );\n#elif defined( USE_ENVMAP )\n#if defined( TEXTURE_CUBE_LOD_EXT )\ndiffuseEnvColor = texelDecode( textureCubeLodEXT( envMap, worldEnvNormal, 9.5 ), envEncoding );\n#else\ndiffuseEnvColor = texelDecode( textureCube( envMap, worldEnvNormal, 10.0 ), envEncoding );\n#endif\n#endif\nvec4 specularEnvColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n#if defined( USE_ENVMAP )\n#if defined( TEXTURE_CUBE_LOD_EXT )\nspecularEnvColor = texelDecode( textureCubeLodEXT( envMap, queryVector, roughnessStrength * 9.5 ), envEncoding );\n#else\nspecularEnvColor = mix( texelDecode( textureCube( envMap, queryVector ), envEncoding ), texelDecode( textureCube( envMap, queryVector, 10.0 ), envEncoding ), roughnessStrength );\n#endif\n#endif\nvec3 specClearCoat = vec3(0, 0, 0);\n#if defined( CLEARCOAT ) && defined( USE_ENVMAP )\n#if defined( TEXTURE_CUBE_LOD_EXT )\nvec4 specularClearCoatEnvColor = texelDecode( textureCubeLodEXT( envMap, queryVector, clearCoatRoughness * 9.5 ), envEncoding );\n#else\nvec4 specularClearCoatEnvColor = mix( texelDecode( textureCube( envMap, queryVector ), envEncoding ), texelDecode( textureCube( envMap, queryVector, 10.0 ), envEncoding ), clearCoatRoughness );\n#endif\nvec3 fresnelClearCoat = Fresnel_Schlick_SpecularBlendToWhiteRoughness( vec3( SPECULAR_COEFF ), nDotL, m2ClearCoat );\nspecClearCoat = specularClearCoatEnvColor.rgb * fresnelClearCoat;\n#endif\nvec3 fresnelColor = Fresnel_Schlick_SpecularBlendToWhiteRoughness( specularColor, nDotL, m2 );\nvec3 spec = fresnelColor * specularEnvColor.rgb;\nvec3 diff = diffuseColor * diffuseEnvColor.rgb;\nvec3 shadingResult = spec + diff;\n#ifdef CLEARCOAT\nshadingResult = mix( shadingResult, specClearCoat, clearCoat );\n#endif\ntotalLighting  += shadingResult;\n}\n#endif\n#if MAX_POINT_LIGHTS > 0\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat distanceAttenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecayExponent[i] );\nvec3 incidentLight = pointLightColor[ i ] * distanceAttenuation;\nlVector = normalize( lVector );\nvec3 hVector = normalize( viewDirection.xyz + lVector.xyz );\nfloat nDotH = saturate( dot( normal, hVector ) );\nfloat nDotL = saturate( dot( normal, lVector ) );\nfloat hDotV = saturate( dot( hVector, viewDirection ) );\n#ifdef CLEARCOAT\nfloat dClearCoat = Distribution_GGX( m2ClearCoat, nDotH );\nfloat visClearCoat = Visibility_Kelemen( hDotV );\nvec3 fresnelClearCoat = Fresnel_Schlick_SpecularBlendToWhite( vec3( SPECULAR_COEFF ), hDotV );\nvec3 specClearCoat = clamp( nDotL * dClearCoat * visClearCoat, 0.0, 10.0 ) * fresnelClearCoat;\n#endif\n#ifdef ANISOTROPY\nvec2 xyDotH = vec2( dot( anisotropicS, hVector ), dot( anisotropicT, hVector ) );\n#ifdef ANISOTROPYROTATION\nxyDotH = anisotropicRotationMatrix * xyDotH;\n#endif\nfloat d = Distribution_GGXAniso( anisotropicM, xyDotH, nDotH );\n#else\nfloat d = Distribution_GGX( m2, nDotH );\n#endif\nfloat vis = Visibility_Schlick(m2, nDotL, nDotV);\nvec3 fresnelColor = Fresnel_Schlick_SpecularBlendToWhite( specularColor, hDotV );\nvec3 spec = clamp( nDotL * d * vis, 0.0, 10.0 ) * fresnelColor;\nvec3 diff = nDotL * Diffuse_Lambert() * diffuseColor;\n#ifdef TRANSLUCENCY\ndiff *= whiteCompliment( translucencyColor.xyz );\n#endif\nvec3 shadingResult = spec + diff;\n#ifdef CLEARCOAT\nshadingResult = mix( shadingResult, specClearCoat, clearCoat );\n#endif\ntotalLighting  += incidentLight * shadingResult;\n#ifdef TRANSLUCENCY\nfloat lightNormalTL = mix( 1.0, pow( abs( dot( lVector.xyz, normal ) ), translucencyNormalPower ), translucencyNormalAlpha );\nfloat viewNormalTL = mix( 1.0, pow( abs( dot( viewDirection.xyz, lVector.xyz) ), translucencyViewPower ), translucencyViewAlpha );\ntotalLighting += lightNormalTL * viewNormalTL * translucencyColor.rgb * incidentLight;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat distanceAttenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecayExponent[i] );\nvec3 incidentLight = spotLightColor[ i ] * distanceAttenuation;\nlVector = normalize( lVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] );\nincidentLight *= spotEffect;\nvec3 hVector = normalize( viewDirection.xyz + lVector.xyz );\nfloat nDotH = saturate( dot( normal, hVector ) );\nfloat nDotL = saturate( dot( normal, lVector ) );\nfloat hDotV = saturate( dot( hVector, viewDirection ) );\n#ifdef CLEARCOAT\nfloat dClearCoat = Distribution_GGX( m2ClearCoat, nDotH );\nfloat visClearCoat = Visibility_Kelemen( hDotV );\nvec3 fresnelClearCoat = Fresnel_Schlick_SpecularBlendToWhite( vec3( SPECULAR_COEFF ), hDotV );\nvec3 specClearCoat = clamp( nDotL * dClearCoat * visClearCoat, 0.0, 10.0 ) * fresnelClearCoat;\n#endif\n#ifdef ANISOTROPY\nvec2 xyDotH = vec2( dot( anisotropicS, hVector ), dot( anisotropicT, hVector ) );\n#ifdef ANISOTROPYROTATION\nxyDotH = anisotropicRotationMatrix * xyDotH;\n#endif\nfloat d = Distribution_GGXAniso( anisotropicM, xyDotH, nDotH );\n#else\nfloat d = Distribution_GGX( m2, nDotH );\n#endif\nfloat vis = Visibility_Schlick(m2, nDotL, nDotV);\nvec3 fresnelColor = Fresnel_Schlick_SpecularBlendToWhite( specularColor, hDotV );\nvec3 spec = clamp( nDotL * d * vis, 0.0, 10.0 ) * fresnelColor;\nvec3 diff = nDotL * Diffuse_Lambert() * diffuseColor;\n#ifdef TRANSLUCENCY\ndiff *= whiteCompliment( translucencyColor.xyz );\n#endif\nvec3 shadingResult = spec + diff;\n#ifdef CLEARCOAT\nshadingResult = mix( shadingResult, specClearCoat, clearCoat );\n#endif\ntotalLighting  += incidentLight * shadingResult;\n#ifdef TRANSLUCENCY\nfloat lightNormalTL = mix( 1.0, pow( abs( dot( lVector.xyz, normal ) ), translucencyNormalPower ), translucencyNormalAlpha );\nfloat viewNormalTL = mix( 1.0, pow( abs( dot( viewDirection.xyz, lVector.xyz) ), translucencyViewPower ), translucencyViewAlpha );\ntotalLighting += lightNormalTL * viewNormalTL * translucencyColor.rgb * incidentLight;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nvec3 incidentLight = directionalLightColor[ i ];\nvec3 hVector = normalize( viewDirection.xyz + lVector.xyz );\nfloat nDotH = saturate( dot( normal, hVector ) );\nfloat nDotL = saturate( dot( normal, lVector ) );\nfloat hDotV = saturate( dot( hVector, viewDirection ) );\n#ifdef CLEARCOAT\nfloat dClearCoat = Distribution_GGX( m2ClearCoat, nDotH );\nfloat visClearCoat = Visibility_Kelemen( hDotV );\nvec3 fresnelClearCoat = Fresnel_Schlick_SpecularBlendToWhite( vec3( SPECULAR_COEFF ), hDotV );\nvec3 specClearCoat = clamp( nDotL * dClearCoat * visClearCoat, 0.0, 10.0 ) * fresnelClearCoat;\n#endif\n#ifdef ANISOTROPY\nvec2 xyDotH = vec2( dot( anisotropicS, hVector ), dot( anisotropicT, hVector ) );\n#ifdef ANISOTROPYROTATION\nxyDotH = anisotropicRotationMatrix * xyDotH;\n#endif\nfloat d = Distribution_GGXAniso( anisotropicM, xyDotH, nDotH );\n#else\nfloat d = Distribution_GGX( m2, nDotH );\n#endif\nfloat vis = Visibility_Schlick(m2, nDotL, nDotV);\nvec3 fresnelColor = Fresnel_Schlick_SpecularBlendToWhite( specularColor, hDotV );\nvec3 spec = clamp( nDotL * d * vis, 0.0, 10.0 ) * fresnelColor;\nvec3 diff = nDotL * Diffuse_Lambert() * diffuseColor;\n#ifdef TRANSLUCENCY\ndiff *= whiteCompliment( translucencyColor.xyz );\n#endif\nvec3 shadingResult = spec + diff;\n#ifdef CLEARCOAT\nshadingResult = mix( shadingResult, specClearCoat, clearCoat );\n#endif\ntotalLighting  += incidentLight * shadingResult;\n#ifdef TRANSLUCENCY\nfloat lightNormalTL = mix( 1.0, pow( abs( dot( lVector.xyz, normal ) ), translucencyNormalPower ), translucencyNormalAlpha );\nfloat viewNormalTL = mix( 1.0, pow( abs( dot( viewDirection.xyz, lVector.xyz) ), translucencyViewPower ), translucencyViewAlpha );\ntotalLighting += lightNormalTL * viewNormalTL * translucencyColor.rgb * incidentLight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat nDotL = dot( normal, lVector );\nvec3 hemiColor = ( PI / 2.0 ) * ( ( 1.0 + nDotL ) * hemisphereLightSkyColor[ i ] + ( 1.0 - nDotL ) * hemisphereLightGroundColor[ i ] );\ntotalLighting += diffuseColor * hemiColor;\n}\n#endif\n#if MAX_AREA_LIGHTS > 0\nfor( int i = 0; i < MAX_AREA_LIGHTS; i ++ ) {\nvec3 lPosition = ( viewMatrix * vec4( areaLightPosition[ i ], 1.0 ) ).xyz;\nvec3 width = areaLightWidth[ i ];\nvec3 height = areaLightHeight[ i ];\nvec3 up = normalize( ( viewMatrix * vec4( height, 0.0 ) ).xyz );\nvec3 right = normalize( ( viewMatrix * vec4( width, 0.0 ) ).xyz );\nvec3 pnormal = normalize( cross( right, up ) );\nfloat widthScalar = length( width );\nfloat heightScalar = length( height );\nvec3 projection = projectOnPlane( -vViewPosition.xyz, lPosition, pnormal );\nvec3 dir = projection - lPosition;\nvec2 diagonal = vec2( dot( dir, right ), dot( dir, up ) );\nvec2 nearest2D = vec2( clamp( diagonal.x, -widthScalar, widthScalar ), clamp( diagonal.y, -heightScalar, heightScalar ) );\nvec3 nearestPointInside = lPosition + ( right *nearest2D.x + up * nearest2D.y );\nvec3 lVector = ( nearestPointInside + vViewPosition.xyz );\nfloat distanceAttenuation = calcLightAttenuation( length( lVector ), areaLightDistance[ i ], areaLightDecayExponent[i] );\nlVector = normalize( lVector );\nvec3 incidentLight = areaLightColor[ i ] * distanceAttenuation * 0.01;\nfloat nDotLDiffuse = saturate( dot( normal, lVector ) );\nvec3 diff = Diffuse_Lambert() * diffuseColor * widthScalar * heightScalar;\nvec3 viewReflection = reflect( viewDirection.xyz, normal );\nvec3 reflectionLightPlaneIntersection = linePlaneIntersect( -vViewPosition.xyz, viewReflection, lPosition, pnormal );\nfloat specAngle = dot( viewReflection, pnormal );\nif ( specAngle < 0.0 ) {\nvec3 dirSpec = reflectionLightPlaneIntersection - lPosition;\nvec2 dirSpec2D = vec2( dot( dirSpec, right ), dot( dirSpec, up ) );\nvec2 nearestSpec2D = vec2( clamp( dirSpec2D.x, -widthScalar, widthScalar ), clamp( dirSpec2D.y, -heightScalar, heightScalar ) );\nlVector = normalize( lPosition + ( right *nearestSpec2D.x + up * nearestSpec2D.y ) + vViewPosition.xyz );\n} else { \nlVector = vec3( 0 );\n}\nvec3 hVector = normalize( viewDirection.xyz + lVector.xyz );\nfloat nDotH = saturate( dot( normal, hVector ) );\nfloat nDotL = saturate( dot( normal, lVector ) );\nfloat hDotV = saturate( dot( hVector, viewDirection ) );\n#ifdef CLEARCOAT\nfloat dClearCoat = Distribution_GGX( m2ClearCoat, nDotH );\nfloat visClearCoat = Visibility_Kelemen( hDotV );\nvec3 fresnelClearCoat = Fresnel_Schlick_SpecularBlendToWhite( vec3( SPECULAR_COEFF ), hDotV );\nvec3 specClearCoat = clamp( nDotL * dClearCoat * visClearCoat, 0.0, 10.0 ) * fresnelClearCoat;\n#endif\n#ifdef TRANSLUCENCY\ndiff *= whiteCompliment( translucencyColor.xyz );\n#endif\n#ifdef CLEARCOAT\ndiff = mix( diff, specClearCoat, clearCoat );\n#endif\n#ifdef ANISOTROPY\nvec2 xyDotH = vec2( dot( anisotropicS, hVector ), dot( anisotropicT, hVector ) );\n#ifdef ANISOTROPYROTATION\nxyDotH = anisotropicRotationMatrix * xyDotH;\n#endif\nfloat d = Distribution_GGXAniso( anisotropicM, xyDotH, nDotH );\n#else\nfloat d = Distribution_GGX( m2, nDotH );\n#endif\nfloat vis = Visibility_Schlick(m2, nDotL, nDotV);\nvec3 fresnelColor = Fresnel_Schlick_SpecularBlendToWhite( specularColor, hDotV );\nvec3 spec = clamp( nDotL * d * vis, 0.0, 10.0 ) * fresnelColor;\ntotalLighting  += incidentLight * spec;\ntotalLighting  += incidentLight * nDotLDiffuse * diff;\n#ifdef TRANSLUCENCY\nfloat lightNormalTL = mix( 1.0, pow( abs( dot( lVector.xyz, normal ) ), translucencyNormalPower ), translucencyNormalAlpha );\nfloat viewNormalTL = mix( 1.0, pow( abs( dot( viewDirection.xyz, lVector.xyz) ), translucencyViewPower ), translucencyViewAlpha );\ntotalLighting += lightNormalTL * viewNormalTL * translucencyColor.rgb * incidentLight;\n#endif\n}\n#endif\n#ifdef CLEARCOAT\ntotalLighting += diffuseColor * ( ambientLightColor * ( 1.0 - clearCoat ) );\n#else\ntotalLighting += diffuseColor * ambientLightColor;\n#endif\ngl_FragColor.xyz += totalLighting;\nvec3 emissiveLocal = emissive;\n#ifdef USE_EMISSIVEMAP\nvec3 emissiveColor = texture2D( emissiveMap, vUv2 ).xyz;\n#ifdef GAMMA_INPUT\nemissiveColor *= emissiveColor;\n#endif\nemissiveLocal *= emissiveColor;\n#endif\ngl_FragColor.xyz += emissiveLocal;\nvec3 ambientLocal = ambient;\n#ifdef USE_LIGHTMAP\nvec3 ambientColor = texture2D( lightMap, vUv2 ).xyz;\n#ifdef GAMMA_INPUT\nambientColor *= ambientColor;\n#endif\nambientLocal *= ambientColor;\n#ifdef CLEARCOAT\nambientLocal *= ( 1.0 - clearCoat );\n#endif\n#endif\ngl_FragColor.xyz += diffuseColor * ambientLocal;",
lights_phong_pars_vertex:"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\nvarying vec3 vWorldPosition;\n#endif",lights_phong_vertex:"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\nvWorldPosition = worldPosition.xyz;\n#endif",lights_phong_pars_fragment:"uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nuniform float pointLightDecayExponent[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDecayExponent[ MAX_SPOT_LIGHTS ];\n#endif\n#if MAX_AREA_LIGHTS > 0\nuniform vec3 areaLightColor[ MAX_AREA_LIGHTS ];\nuniform vec3 areaLightPosition[ MAX_AREA_LIGHTS ];\nuniform vec3 areaLightWidth[ MAX_AREA_LIGHTS ];\nuniform vec3 areaLightHeight[ MAX_AREA_LIGHTS ];\nuniform float areaLightDistance[ MAX_AREA_LIGHTS ];\nuniform float areaLightDecayExponent[ MAX_AREA_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0 || MAX_AREA_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",
lights_phong_fragment:"vec3 normal = normalize( vNormal );\nvec3 viewDirection = normalize( vViewPosition );\n#ifdef DOUBLE_SIDED\nnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\n#ifdef USE_NORMALMAP\nnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\nnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse  = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat distanceAttenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecayExponent[i] );\nlVector = normalize( lVector );\nfloat dotProduct = dot( normal, lVector );\nfloat pointDiffuseWeight = max( dotProduct, 0.0 );\npointDiffuse  += pointLightColor[ i ] * pointDiffuseWeight * distanceAttenuation;\nvec3 pointHalfVector = normalize( lVector + viewDirection );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularStrength * pow( max( pointDotNormalHalf, 0.0 ), shininess );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * distanceAttenuation * specularNormalization;\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse  = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat distanceAttenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecayExponent[i] );\nlVector = normalize( lVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] );\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n#endif\nspotDiffuse += spotLightColor[ i ] * spotDiffuseWeight * distanceAttenuation * spotEffect;\nvec3 spotHalfVector = normalize( lVector + viewDirection );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularStrength * pow( max( spotDotNormalHalf, 0.0 ), shininess );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, spotHalfVector ), 0.0 ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * distanceAttenuation * specularNormalization * spotEffect;\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse  = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, dirVector );\n#ifdef WRAP_AROUND\nfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n#endif\ndirDiffuse  += directionalLightColor[ i ] * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewDirection );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularStrength * pow( max( dirDotNormalHalf, 0.0 ), shininess );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewDirection );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularStrength * pow( max( hemiDotNormalHalfSky, 0.0 ), shininess );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewDirection );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularStrength * pow( max( hemiDotNormalHalfGround, 0.0 ), shininess );\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );\nvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n}\n#endif\n#if MAX_AREA_LIGHTS > 0\nvec3 areaDiffuse  = vec3( 0.0 );\nvec3 areaSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_AREA_LIGHTS; i ++ ) {\nvec3 lPosition = ( viewMatrix * vec4( areaLightPosition[ i ], 1.0 ) ).xyz;\nvec3 width = areaLightWidth[ i ];\nvec3 height = areaLightHeight[ i ];\nvec3 up = normalize( ( viewMatrix * vec4( height, 0.0 ) ).xyz );\nvec3 right = normalize( ( viewMatrix * vec4( width, 0.0 ) ).xyz );\nvec3 pnormal = normalize( cross( right, up ) );\nfloat widthScalar = length( width );\nfloat heightScalar = length( height );\nvec3 projection = projectOnPlane( -vViewPosition.xyz, lPosition, pnormal );\nvec3 dir = projection - lPosition;\nvec2 diagonal = vec2( dot( dir, right ), dot( dir, up ) );\nvec2 nearest2D = vec2( clamp( diagonal.x, -widthScalar, widthScalar ), clamp( diagonal.y, -heightScalar, heightScalar ) );\nvec3 nearestPointInside = lPosition + ( right *nearest2D.x + up * nearest2D.y );\nvec3 lVector = ( nearestPointInside + vViewPosition.xyz );\nfloat distanceAttenuation = calcLightAttenuation( length( lVector ), areaLightDistance[ i ], areaLightDecayExponent[i] );\nlVector = normalize( lVector );\nfloat nDotLDiffuse = saturate( dot( normal, lVector ) );\nvec3 viewReflection = reflect( viewDirection.xyz, normal );\nvec3 reflectionLightPlaneIntersection = linePlaneIntersect( -vViewPosition.xyz, viewReflection, lPosition, pnormal );\nfloat specAngle = dot( viewReflection, pnormal );\nif ( specAngle < 0.0 ) {\nvec3 dirSpec = reflectionLightPlaneIntersection - lPosition;\nvec2 dirSpec2D = vec2( dot( dirSpec, right ), dot( dirSpec, up ) );\nvec2 nearestSpec2D = vec2( clamp( dirSpec2D.x, -widthScalar, widthScalar ), clamp( dirSpec2D.y, -heightScalar, heightScalar ) );\nlVector = normalize( lPosition + ( right *nearestSpec2D.x + up * nearestSpec2D.y ) + vViewPosition.xyz );\n} else { \nlVector = vec3( 0 );\n}\nfloat dotProduct = nDotLDiffuse;\nfloat areaDiffuseWeight = max( dotProduct, 0.0 );\nareaDiffuse  += areaLightColor[ i ] * areaDiffuseWeight * distanceAttenuation * widthScalar * heightScalar * 0.01;\nvec3 areaHalfVector = normalize( lVector + viewDirection );\nfloat areaDotNormalHalf = max( dot( normal, areaHalfVector ), 0.0 );\nfloat areaSpecularWeight = specularStrength * pow( max( areaDotNormalHalf, 0.0 ), shininess );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, areaHalfVector ), 0.0 ), 5.0 );\nareaSpecular += schlick * areaLightColor[ i ] * areaSpecularWeight * areaDiffuseWeight * distanceAttenuation * specularNormalization * 0.01;\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#if MAX_AREA_LIGHTS > 0\ntotalDiffuse += areaDiffuse;\ntotalSpecular += areaSpecular;\n#endif\nvec3 ambientLocal = ambient;\n#ifdef USE_LIGHTMAP\nvec3 ambientColor = texture2D( lightMap, vUv2 ).xyz;\n#ifdef GAMMA_INPUT\nambientColor *= ambientColor;\n#endif\nambientLocal *= ambientColor;\n#endif\ngl_FragColor.xyz = diffuseColor * ( totalDiffuse + ambientLightColor + ambientLocal ) + totalSpecular;\nvec3 emissiveLocal = emissive;\n#ifdef USE_EMISSIVEMAP\nvec3 emissiveColor = texture2D( emissiveMap, vUv2 ).xyz;\n#ifdef GAMMA_INPUT\nemissiveColor *= emissiveColor;\n#endif\nemissiveLocal *= emissiveColor;\n#endif\ngl_FragColor.xyz += emissiveLocal.xyz;",
color_pars_fragment:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_fragment:"#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, 1.0 );\n#endif",color_pars_vertex:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n#ifdef GAMMA_INPUT\nvColor = color * color;\n#else\nvColor = color;\n#endif\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n#ifdef BONE_TEXTURE\nuniform sampler2D boneTexture;\nuniform int boneTextureWidth;\nuniform int boneTextureHeight;\nmat4 getBoneMatrix( const float i ) {\nfloat j = i * 4.0;\nfloat x = mod( j, float( boneTextureWidth ) );\nfloat y = floor( j / float( boneTextureWidth ) );\nfloat dx = 1.0 / float( boneTextureWidth );\nfloat dy = 1.0 / float( boneTextureHeight );\ny = dy * ( y + 0.5 );\nvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\nvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\nvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\nvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\nmat4 bone = mat4( v1, v2, v3, v4 );\nreturn bone;\n}\n#else\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\nmat4 getBoneMatrix( const float i ) {\nmat4 bone = boneGlobalMatrices[ int(i) ];\nreturn bone;\n}\n#endif\n#endif",
skinbase_vertex:"#ifdef USE_SKINNING\nmat4 boneMatX = getBoneMatrix( skinIndex.x );\nmat4 boneMatY = getBoneMatrix( skinIndex.y );\nmat4 boneMatZ = getBoneMatrix( skinIndex.z );\nmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n#ifdef USE_MORPHTARGETS\nvec4 skinVertex = vec4( morphed, 1.0 );\n#else\nvec4 skinVertex = vec4( position, 1.0 );\n#endif\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned      += boneMatY * skinVertex * skinWeight.y;\nskinned      += boneMatZ * skinVertex * skinWeight.z;\nskinned      += boneMatW * skinVertex * skinWeight.w;\n#endif",
morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n#ifndef USE_MORPHNORMALS\nuniform float morphTargetInfluences[ 8 ];\n#else\nuniform float morphTargetInfluences[ 4 ];\n#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\nvec3 morphed = vec3( 0.0 );\nmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\nmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\nmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\nmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n#ifndef USE_MORPHNORMALS\nmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\nmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\nmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\nmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n#endif\nmorphed += position;\n#endif",
default_vertex:"vec4 mvPosition;\n#ifdef USE_SKINNING\nmvPosition = modelViewMatrix * skinned;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( position, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\nvec3 morphedNormal = vec3( 0.0 );\nmorphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\nmorphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\nmorphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\nmorphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\nmorphedNormal += normal;\n#endif",
skinnormal_vertex:"#ifdef USE_SKINNING\nmat4 skinMatrix = skinWeight.x * boneMatX;\nskinMatrix \t+= skinWeight.y * boneMatY;\n#ifdef USE_MORPHNORMALS\nvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n#else\nvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n#endif\n#endif",defaultnormal_vertex:"vec3 objectNormal;\n#ifdef USE_SKINNING\nobjectNormal = skinnedNormal.xyz;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\nobjectNormal = morphedNormal;\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\nobjectNormal = normal;\n#endif\n#ifdef FLIP_SIDED\nobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;",
shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform vec2 shadowMapSize[ MAX_SHADOWS ];\nuniform float shadowDarkness[ MAX_SHADOWS ];\nuniform float shadowBias[ MAX_SHADOWS ];\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif",shadowmap_fragment:"#ifdef USE_SHADOWMAP\n#ifdef SHADOWMAP_DEBUG\nvec3 frustumColors[3];\nfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\nfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\nfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n#endif\n#ifdef SHADOWMAP_CASCADE\nint inFrustumCount = 0;\n#endif\nfloat fDepth;\nvec3 shadowColor = vec3( 1.0 );\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\nbool inFrustum = all( inFrustumVec );\n#ifdef SHADOWMAP_CASCADE\ninFrustumCount += int( inFrustum );\nbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n#else\nbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n#endif\nbool frustumTest = all( frustumTestVec );\nif ( frustumTest ) {\nshadowCoord.z += shadowBias[ i ];\n#if defined( SHADOWMAP_TYPE_PCF )\nfloat shadow = 0.0;\nconst float shadowDelta = 1.0 / 9.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.25 * xPixelOffset;\nfloat dy0 = -1.25 * yPixelOffset;\nfloat dx1 = 1.25 * xPixelOffset;\nfloat dy1 = 1.25 * yPixelOffset;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\nfloat shadow = 0.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.0 * xPixelOffset;\nfloat dy0 = -1.0 * yPixelOffset;\nfloat dx1 = 1.0 * xPixelOffset;\nfloat dy1 = 1.0 * yPixelOffset;\nmat3 shadowKernel;\nmat3 depthKernel;\ndepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\ndepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\ndepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\ndepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\ndepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\ndepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\ndepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\ndepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\ndepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nvec3 shadowZ = vec3( shadowCoord.z );\nshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\nshadowKernel[0] *= vec3(0.25);\nshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\nshadowKernel[1] *= vec3(0.25);\nshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\nshadowKernel[2] *= vec3(0.25);\nvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\nshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\nshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\nvec4 shadowValues;\nshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\nshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\nshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\nshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\nshadow = dot( shadowValues, vec4( 1.0 ) );\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth < shadowCoord.z )\nshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n#endif\n}\n#ifdef SHADOWMAP_DEBUG\n#ifdef SHADOWMAP_CASCADE\nif ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n#else\nif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n#endif\n#endif\n}\n#ifdef GAMMA_OUTPUT\nshadowColor *= shadowColor;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n#endif",
shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif",alphatest_fragment:"#ifdef ALPHATEST\nif ( gl_FragColor.a < ALPHATEST ) discard;\n#endif",linear_to_gamma_fragment:"#ifdef GAMMA_OUTPUT\ngl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n#endif"};THREE.UniformsUtils={merge:function(a){var b,c,d,e={};for(b=0;b<a.length;b++)for(c in d=this.clone(a[b]),d)e[c]=d[c];return e},clone:function(a){var b,c,d,e={};for(b in a)for(c in e[b]={},a[b])d=a[b][c],e[b][c]=d instanceof THREE.Color||d instanceof THREE.Vector2||d instanceof THREE.Vector3||d instanceof THREE.Vector4||d instanceof THREE.Matrix4||d instanceof THREE.Texture?d.clone():d instanceof Array?d.slice():d;return e}};THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},gainBrightness:{type:"v4",value:new THREE.Vector4(0,1,0,1)},lightMap:{type:"t",value:null},emissiveMap:{type:"t",value:null},envMap:{type:"t",value:null},envEncoding:{type:"i",value:0},diffuseEnvMap:{type:"t",value:null},diffuseEnvEncoding:{type:"i",value:0},flipEnvMap:{type:"f",value:-1},useRefract:{type:"i",value:0},
reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:0.98},combine:{type:"i",value:0},morphTargetInfluences:{type:"f",value:0}},specularmap:{specularMap:{type:"t",value:null},specularOffsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},specularGainBrightness:{type:"v4",value:new THREE.Vector4(0,1,0,1)}},bumpmap:{bumpMap:{type:"t",value:null},bumpScale:{type:"f",value:1},bumpOffsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)}},opacitymap:{opacityMap:{type:"t",value:null},opacityOffsetRepeat:{type:"v4",
value:new THREE.Vector4(0,0,1,1)},opacityGainBrightness:{type:"v4",value:new THREE.Vector4(0,1,0,1)}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new THREE.Vector2(1,1)},normalOffsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)}},fog:{fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]},
directionalLightColor:{type:"fv",value:[]},hemisphereLightDirection:{type:"fv",value:[]},hemisphereLightSkyColor:{type:"fv",value:[]},hemisphereLightGroundColor:{type:"fv",value:[]},pointLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightDistance:{type:"fv1",value:[]},pointLightDecayExponent:{type:"fv1",value:[]},spotLightColor:{type:"fv",value:[]},spotLightPosition:{type:"fv",value:[]},spotLightDirection:{type:"fv",value:[]},spotLightDistance:{type:"fv1",value:[]},
spotLightDecayExponent:{type:"fv1",value:[]},spotLightAngleCos:{type:"fv1",value:[]},spotLightExponent:{type:"fv1",value:[]},areaLightColor:{type:"fv",value:[]},areaLightPosition:{type:"fv",value:[]},areaLightDistance:{type:"fv1",value:[]},areaLightDecayExponent:{type:"fv1",value:[]},areaLightWidth:{type:"fv",value:[]},areaLightHeight:{type:"fv",value:[]}},particle:{psColor:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},size:{type:"f",value:1},scale:{type:"f",value:1},map:{type:"t",
value:null},fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},shadowmap:{shadowMap:{type:"tv",value:[]},shadowMapSize:{type:"v2v",value:[]},shadowBias:{type:"fv1",value:[]},shadowDarkness:{type:"fv1",value:[]},shadowMatrix:{type:"m4v",value:[]}}};THREE.ShaderLib={physical:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.bumpmap,THREE.UniformsLib.normalmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,THREE.UniformsLib.opacitymap,THREE.UniformsLib.specularmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",value:new THREE.Color(16777215)},falloffColor:{type:"c",value:new THREE.Color(16777215)},falloffMap:{type:"t",
value:null},falloffBlendParams:{type:"v4",value:new THREE.Vector4(1,0,0,1)},clearCoat:{type:"f",value:0},clearCoatRoughness:{type:"f",value:0.25},roughness:{type:"f",value:0.5},roughnessMap:{type:"t",value:null},roughnessOffsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},roughnessGainBrightness:{type:"v4",value:new THREE.Vector4(0,1,0,1)},metallic:{type:"f",value:0.5},metallicMap:{type:"t",value:null},metallicOffsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},metallicGainBrightness:{type:"v4",
value:new THREE.Vector4(0,1,0,1)},anisotropy:{type:"f",value:0},anisotropyMap:{type:"t",value:null},anisotropyOffsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},anisotropyGainBrightness:{type:"v4",value:new THREE.Vector4(0,1,0,1)},anisotropyRotation:{type:"f",value:0},anisotropyRotationMap:{type:"t",value:null},anisotropyRotationOffsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},anisotropyRotationGainBrightness:{type:"v4",value:new THREE.Vector4(0,1,0,1)},translucency:{type:"c",value:new THREE.Color(0)},
translucencyMap:{type:"t",value:null},translucencyNormalAlpha:{type:"f",value:0.75},translucencyNormalPower:{type:"f",value:2},translucencyViewAlpha:{type:"f",value:0.75},translucencyViewPower:{type:"f",value:2}}]),vertexShader:["attribute vec4 tangent;\n#define PHONG\n#define PHYSICAL\nvarying vec3 vViewPosition;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;",THREE.ShaderChunk.common,THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.normalmap_pars_vertex,THREE.ShaderChunk.roughnessmap_pars_vertex,
THREE.ShaderChunk.specularmap_pars_vertex,THREE.ShaderChunk.opacitymap_pars_vertex,THREE.ShaderChunk.anisotropymap_pars_vertex,THREE.ShaderChunk.anisotropyrotationmap_pars_vertex,THREE.ShaderChunk.metallicmap_pars_vertex,THREE.ShaderChunk.translucencymap_pars_vertex,THREE.ShaderChunk.bumpmap_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.lights_physical_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,
THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.normalmap_vertex,THREE.ShaderChunk.roughnessmap_vertex,THREE.ShaderChunk.opacitymap_vertex,THREE.ShaderChunk.specularmap_vertex,THREE.ShaderChunk.anisotropymap_vertex,THREE.ShaderChunk.anisotropyrotationmap_vertex,THREE.ShaderChunk.metallicmap_vertex,THREE.ShaderChunk.translucencymap_vertex,THREE.ShaderChunk.bumpmap_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,
THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"vNormal = normalize( transformedNormal );",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"vViewPosition = -mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.lights_physical_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["#ifdef TEXTURE_CUBE_LOD_EXT\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#define PHYSICAL\nuniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 falloffColor;\nuniform vec4 falloffBlendParams;\nuniform vec3 specular;\nuniform float roughness;\nuniform float metallic;\nuniform float clearCoat;\nuniform float clearCoatRoughness;\nuniform vec3 translucency;\nuniform float translucencyNormalAlpha;\nuniform float translucencyNormalPower;\nuniform float translucencyViewPower;\nuniform float translucencyViewAlpha;\nuniform float anisotropy;\nuniform float anisotropyRotation;",
THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.falloffmap_pars_fragment,THREE.ShaderChunk.opacitymap_pars_fragment,THREE.ShaderChunk.translucencymap_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.diffuseenvmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_physical_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.bumpmap_pars_fragment,
THREE.ShaderChunk.normalmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,THREE.ShaderChunk.anisotropymap_pars_fragment,THREE.ShaderChunk.anisotropyrotationmap_pars_fragment,THREE.ShaderChunk.metallicmap_pars_fragment,THREE.ShaderChunk.roughnessmap_pars_fragment,THREE.ShaderChunk.reflectivitymap_pars_fragment,THREE.ShaderChunk.lightattenuation_func_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 0.0 ), opacity );\nvec3 diffuseColor = diffuse;\nvec3 translucencyColor = translucency;\nvec3 normal = normalize( vNormal );\nvec3 viewDirection = normalize( vViewPosition );",
THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.opacitymap_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.anisotropymap_fragment,THREE.ShaderChunk.anisotropyrotationmap_fragment,THREE.ShaderChunk.roughnessmap_fragment,THREE.ShaderChunk.metallicmap_fragment,THREE.ShaderChunk.translucencymap_fragment,THREE.ShaderChunk.reflectivitymap_fragment,THREE.ShaderChunk.lights_physical_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,
THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"gl_FragColor.xyz *= gl_FragColor.w;\n}"].join("\n")},basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.shadowmap]),vertexShader:[THREE.ShaderChunk.common,THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,
THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.skinbase_vertex,"#ifdef USE_ENVMAP",THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#endif",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,
THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.map_fragment,
THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},
emissive:{type:"c",value:new THREE.Color(0)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.lights_lambert_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,
THREE.ShaderChunk.lightattenuation_func_fragment,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.lights_lambert_vertex,THREE.ShaderChunk.shadowmap_vertex,
"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",
THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,"#ifdef DOUBLE_SIDED\nif ( gl_FrontFacing )\ngl_FragColor.xyz *= vLightFront;\nelse\ngl_FragColor.xyz *= vLightBack;\n#else\ngl_FragColor.xyz *= vLightFront;\n#endif",THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},
phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.bumpmap,THREE.UniformsLib.normalmap,THREE.UniformsLib.specularmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,THREE.UniformsLib.opacitymap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",value:new THREE.Color(1118481)},shininess:{type:"f",value:30},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define PHONG\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",
THREE.ShaderChunk.common,THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.normalmap_pars_vertex,THREE.ShaderChunk.bumpmap_pars_vertex,THREE.ShaderChunk.specularmap_pars_vertex,THREE.ShaderChunk.opacitymap_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,
THREE.ShaderChunk.normalmap_vertex,THREE.ShaderChunk.bumpmap_vertex,THREE.ShaderChunk.opacitymap_vertex,THREE.ShaderChunk.specularmap_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"vNormal = normalize( transformedNormal );",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"vViewPosition = -mvPosition.xyz;",
THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["#define PHONG\nuniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.opacitymap_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,
THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.bumpmap_pars_fragment,THREE.ShaderChunk.normalmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,THREE.ShaderChunk.lightattenuation_func_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );\nvec3 diffuseColor = diffuse;",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.opacitymap_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,
THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},particle_basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.particle,THREE.UniformsLib.shadowmap]),vertexShader:["uniform float size;\nuniform float scale;",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,
"void main() {",THREE.ShaderChunk.color_vertex,"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n#else\ngl_PointSize = size;\n#endif\ngl_Position = projectionMatrix * mvPosition;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 psColor;\nuniform float opacity;",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_particle_pars_fragment,
THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( psColor, opacity );",THREE.ShaderChunk.map_particle_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:"f",value:1},dashSize:{type:"f",value:1},totalSize:{type:"f",value:2}}]),
vertexShader:["uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vLineDistance = scale * lineDistance;\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;",
THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\nif ( mod( vLineDistance, totalSize ) > dashSize ) {\ndiscard;\n}\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2E3},opacity:{type:"f",value:1}},vertexShader:"void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
fragmentShader:"uniform float mNear;\nuniform float mFar;\nuniform float opacity;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = clamp( ( depth - mNear ) / ( mFar - mNear ), 0.0, 1.0 );\ngl_FragColor = vec4( vec3( color ), opacity );\n}"},normal:{uniforms:{opacity:{type:"f",value:1}},vertexShader:["varying vec3 vNormal;",THREE.ShaderChunk.common,THREE.ShaderChunk.morphtarget_pars_vertex,"void main() {\nvNormal = normalize( normalMatrix * normal );",THREE.ShaderChunk.morphtarget_vertex,
THREE.ShaderChunk.default_vertex,"}"].join("\n"),fragmentShader:"uniform float opacity;\nvarying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n}"},normalmap:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{enableAO:{type:"i",value:0},enableDiffuse:{type:"i",value:0},enableSpecular:{type:"i",value:0},enableReflection:{type:"i",value:0},enableDisplacement:{type:"i",value:0},tDisplacement:{type:"t",
value:null},tDiffuse:{type:"t",value:null},tCube:{type:"t",value:null},tNormal:{type:"t",value:null},tSpecular:{type:"t",value:null},tAO:{type:"t",value:null},uNormalScale:{type:"v2",value:new THREE.Vector2(1,1)},uDisplacementBias:{type:"f",value:0},uDisplacementScale:{type:"f",value:1},diffuse:{type:"c",value:new THREE.Color(16777215)},specular:{type:"c",value:new THREE.Color(1118481)},ambient:{type:"c",value:new THREE.Color(16777215)},shininess:{type:"f",value:30},opacity:{type:"f",value:1},useRefract:{type:"i",
value:0},refractionRatio:{type:"f",value:0.98},reflectivity:{type:"f",value:0.5},uOffset:{type:"v2",value:new THREE.Vector2(0,0)},uRepeat:{type:"v2",value:new THREE.Vector2(1,1)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),fragmentShader:["uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform bool enableReflection;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform samplerCube tCube;\nuniform vec2 uNormalScale;\nuniform bool useRefract;\nuniform float refractionRatio;\nuniform float reflectivity;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.common,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3( 1.0 ), opacity );\nvec3 specularTex = vec3( 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse ) {\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( tDiffuse, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\n#endif\n}\nif( enableAO ) {\n#ifdef GAMMA_INPUT\nvec4 aoColor = texture2D( tAO, vUv );\naoColor.xyz *= aoColor.xyz;\ngl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\n#endif\n}\nif( enableSpecular )\nspecularTex = texture2D( tSpecular, vUv ).xyz;\nmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\nvec3 finalNormal = tsb * normalTex;\n#ifdef FLIP_SIDED\nfinalNormal = -finalNormal;\n#endif\nvec3 normal = normalize( finalNormal );\nvec3 viewDirection = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 pointVector = lPosition.xyz + vViewPosition.xyz;\nfloat pointDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\npointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\npointVector = normalize( pointVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\n#endif\npointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\nvec3 pointHalfVector = normalize( pointVector + viewDirection );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 spotVector = lPosition.xyz + vViewPosition.xyz;\nfloat spotDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nspotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\nspotVector = normalize( spotVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\n#endif\nspotDiffuse += spotDistance * spotLightColor[ i ] * diffuse * spotDiffuseWeight * spotEffect;\nvec3 spotHalfVector = normalize( spotVector + viewDirection );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, shininess ), 0.0 );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\nfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n#endif\ndirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewDirection );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += diffuse * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewDirection );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewDirection );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n#endif\nif ( enableReflection ) {\nvec3 vReflect;\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, normal, refractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, normal );\n}\nvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * reflectivity );\n}",
THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n"),vertexShader:["attribute vec4 tangent;\nuniform vec2 uOffset;\nuniform vec2 uRepeat;\nuniform bool enableDisplacement;\n#ifdef VERTEX_TEXTURES\nuniform sampler2D tDisplacement;\nuniform float uDisplacementScale;\nuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.common,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,"#ifdef USE_SKINNING\nvNormal = normalize( normalMatrix * skinnedNormal.xyz );\nvec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\nvTangent = normalize( normalMatrix * skinnedTangent.xyz );\n#else\nvNormal = normalize( normalMatrix * normal );\nvTangent = normalize( normalMatrix * tangent.xyz );\n#endif\nvBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );\nvUv = uv * uRepeat + uOffset;\nvec3 displacedPosition;\n#ifdef VERTEX_TEXTURES\nif ( enableDisplacement ) {\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\ndisplacedPosition = position + normalize( normal ) * df;\n} else {\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n}\n#else\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n#endif\nvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\nvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\nvWorldPosition = worldPosition.xyz;\nvViewPosition = -mvPosition.xyz;\n#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif\n}"].join("\n")},
cube:{uniforms:{tCube:{type:"t",value:null},tFlip:{type:"f",value:-1},tEncoding:{type:"i",value:0},blurring:{type:"f",value:0}},vertexShader:"varying vec3 vWorldPosition;\nvoid main() {\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\nvWorldPosition = worldPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:["#ifdef TEXTURE_CUBE_LOD_EXT\n#extension GL_EXT_shader_texture_lod : enable\n#endif",THREE.ShaderChunk.common,"uniform samplerCube tCube;\nuniform float tFlip;\nuniform int tEncoding;\nuniform float blurring;\nvarying vec3 vWorldPosition;\nvoid main() {\nvec3 queryVector = vec3( tFlip * vWorldPosition.x, vWorldPosition.yz );\n#if defined( TEXTURE_CUBE_LOD_EXT )\nvec4 color = textureCubeLodEXT( tCube, queryVector, blurring );\n#else\nvec4 color = textureCube( tCube, queryVector );\n#endif\ncolor = texelDecode( color, tEncoding );\n#ifdef GAMMA_OUTPUT\ncolor.xyz = sqrt( color.xyz );\n#endif\ngl_FragColor = color;\n}"].join("\n")},
depthRGBA:{uniforms:{},vertexShader:[THREE.ShaderChunk.common,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"}"].join("\n"),fragmentShader:"vec4 pack_depth( const float depth ) {\n\t\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\n\tres -= res.xxyz * bit_mask;\n\treturn res;\n}\nvoid main() {\ngl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n}"},
linearDepthRGBA:{uniforms:{zNear:{type:"f",value:0.5},zFar:{type:"f",value:1E3}},vertexShader:[THREE.ShaderChunk.common,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,"varying vec3 vViewPosition;\nvoid main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"vViewPosition = -mvPosition.xyz;\n}"].join("\n"),fragmentShader:"uniform float zNear;\nuniform float zFar;\nvarying vec3 vViewPosition;\nvec4 pack_depth( const float depth ) {\n\t\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\n\tres -= res.xxyz * bit_mask;\n\treturn res;\n}\nvoid main() {\ngl_FragColor = pack_depth( clamp( ( vViewPosition.z - zNear ) / ( zFar - zNear ), 0.0, 1.0 ) );\n}"}};THREE.WebGLRenderer=function(a){function b(a,b){var c=a.vertices.length,d=b.material;if(d.attributes){void 0===a.__webglCustomAttributesList&&(a.__webglCustomAttributesList=[]);for(var e in d.attributes){var f=d.attributes[e];if(!f.__webglInitialized||f.createUniqueBuffers){f.__webglInitialized=!0;var g=1;"v2"===f.type?g=2:"v3"===f.type?g=3:"v4"===f.type?g=4:"c"===f.type&&(g=3);f.size=g;f.array=new Float32Array(c*g);f.buffer=l.createBuffer();f.buffer.belongsToAttribute=e;f.needsUpdate=!0}a.__webglCustomAttributesList.push(f)}}}
function c(a,b){var c=b.geometry,f=a.faces3,g=3*f.length,k=1*f.length,h=3*f.length,f=d(b,a),m=e(f),n=f.vertexColors?f.vertexColors:!1;a.__vertexArray=new Float32Array(3*g);m&&(a.__normalArray=new Float32Array(3*g));c.hasTangents&&(a.__tangentArray=new Float32Array(4*g));n&&(a.__colorArray=new Float32Array(3*g));0<c.faceVertexUvs.length&&(a.__uvArray=new Float32Array(2*g));1<c.faceVertexUvs.length&&(a.__uv2Array=new Float32Array(2*g));b.geometry.skinWeights.length&&b.geometry.skinIndices.length&&(a.__skinIndexArray=
new Float32Array(4*g),a.__skinWeightArray=new Float32Array(4*g));a.__faceArray=new Uint16Array(3*k);a.__lineArray=new Uint16Array(2*h);if(a.numMorphTargets)for(a.__morphTargetsArrays=[],c=0,m=a.numMorphTargets;c<m;c++)a.__morphTargetsArrays.push(new Float32Array(3*g));if(a.numMorphNormals)for(a.__morphNormalsArrays=[],c=0,m=a.numMorphNormals;c<m;c++)a.__morphNormalsArrays.push(new Float32Array(3*g));a.__webglFaceCount=3*k;a.__webglLineCount=2*h;if(f.attributes){void 0===a.__webglCustomAttributesList&&
(a.__webglCustomAttributesList=[]);for(var p in f.attributes){var k=f.attributes[p],h={},r;for(r in k)h[r]=k[r];if(!h.__webglInitialized||h.createUniqueBuffers)h.__webglInitialized=!0,c=1,"v2"===h.type?c=2:"v3"===h.type?c=3:"v4"===h.type?c=4:"c"===h.type&&(c=3),h.size=c,h.array=new Float32Array(g*c),h.buffer=l.createBuffer(),h.buffer.belongsToAttribute=p,k.needsUpdate=!0,h.__original=k;a.__webglCustomAttributesList.push(h)}}a.__inittedArrays=!0}function d(a,b){return a.material instanceof THREE.MeshFaceMaterial?
a.material.materials[b.materialIndex]:a.material}function e(a){return a instanceof THREE.MeshBasicMaterial&&!a.envMap||a instanceof THREE.MeshDepthMaterial?!1:a&&void 0!==a.shading&&a.shading===THREE.SmoothShading?THREE.SmoothShading:THREE.FlatShading}function f(a,b,c,d){var e,f,k,h;for(f in b)k=b[f],e=c[f],0<=k&&(e?(h=e.itemSize,l.bindBuffer(l.ARRAY_BUFFER,e.buffer),g(k),l.vertexAttribPointer(k,h,l.FLOAT,!1,0,d*h*4)):a.defaultAttributeValues&&(2===a.defaultAttributeValues[f].length?l.vertexAttrib2fv(k,
a.defaultAttributeValues[f]):3===a.defaultAttributeValues[f].length&&l.vertexAttrib3fv(k,a.defaultAttributeValues[f])))}function g(a){0===za[a]&&(l.enableVertexAttribArray(a),za[a]=1)}function k(){for(var a in za)1===za[a]&&(l.disableVertexAttribArray(a),za[a]=0)}function h(a,b){return a.z!==b.z?b.z-a.z:a.id-b.id}function m(a,b){return b[0]-a[0]}function n(a,b,c){if(a.length)for(var d=0,e=a.length;d<e;d++)Ca=S=null,Aa=ta=pa=R=La=Z=ja=-1,ea=!0,a[d].render(b,c,Ga,hb),Ca=S=null,Aa=ta=pa=R=La=Z=ja=-1,
ea=!0}function q(a,b,c,d,e,f,g,k){var h,l,m,n;b?(l=a.length-1,n=b=-1):(l=0,b=a.length,n=1);for(var p=l;p!==b;p+=n)if(h=a[p],h.render){l=h.object;m=h.buffer;if(k)h=k;else{h=h[c];if(!h)continue;g&&I.setBlending(h.blending,h.blendEquation,h.blendSrc,h.blendDst);I.setDepthTest(h.depthTest);I.setDepthWrite(h.depthWrite);A(h.polygonOffset,h.polygonOffsetFactor,h.polygonOffsetUnits)}I.setMaterialFaces(h);m instanceof THREE.BufferGeometry?I.renderBufferDirect(d,e,f,h,m,l):I.renderBuffer(d,e,f,h,m,l)}}function s(a,
b,c,d,e,f,g){for(var k,h,l=0,m=a.length;l<m;l++)if(k=a[l],h=k.object,h.visible){if(g)k=g;else{k=k[b];if(!k)continue;f&&I.setBlending(k.blending,k.blendEquation,k.blendSrc,k.blendDst);I.setDepthTest(k.depthTest);I.setDepthWrite(k.depthWrite);A(k.polygonOffset,k.polygonOffsetFactor,k.polygonOffsetUnits)}I.renderImmediateObject(c,d,e,k,h)}}function r(a,d){var e,f,g;if(void 0===a.__webglInit&&(a.__webglInit=!0,a._modelViewMatrix=new THREE.Matrix4,a._normalMatrix=new THREE.Matrix3,void 0!==a.geometry&&
void 0===a.geometry.__webglInit&&(a.geometry.__webglInit=!0,a.geometry.addEventListener("dispose",Kb)),f=a.geometry,void 0!==f))if(f instanceof THREE.BufferGeometry){var k,h;for(g in f.attributes)h="index"===g?l.ELEMENT_ARRAY_BUFFER:l.ARRAY_BUFFER,k=f.attributes[g],k.buffer=l.createBuffer(),l.bindBuffer(h,k.buffer),l.bufferData(h,k.array,l.STATIC_DRAW)}else if(a instanceof THREE.Mesh)for(e in g=a.material,void 0===f.geometryGroups&&f.makeGroups(g instanceof THREE.MeshFaceMaterial),f.geometryGroups){if(g=
f.geometryGroups[e],!g.__webglVertexBuffer){k=g;k.__webglVertexBuffer=l.createBuffer();k.__webglNormalBuffer=l.createBuffer();k.__webglTangentBuffer=l.createBuffer();k.__webglColorBuffer=l.createBuffer();k.__webglUVBuffer=l.createBuffer();k.__webglUV2Buffer=l.createBuffer();k.__webglSkinIndicesBuffer=l.createBuffer();k.__webglSkinWeightsBuffer=l.createBuffer();k.__webglFaceBuffer=l.createBuffer();k.__webglLineBuffer=l.createBuffer();var m=h=void 0;if(k.numMorphTargets)for(k.__webglMorphTargetsBuffers=
[],h=0,m=k.numMorphTargets;h<m;h++)k.__webglMorphTargetsBuffers.push(l.createBuffer());if(k.numMorphNormals)for(k.__webglMorphNormalsBuffers=[],h=0,m=k.numMorphNormals;h<m;h++)k.__webglMorphNormalsBuffers.push(l.createBuffer());I.info.memory.geometries++;c(g,a);f.verticesNeedUpdate=!0;f.morphTargetsNeedUpdate=!0;f.elementsNeedUpdate=!0;f.uvsNeedUpdate=!0;f.normalsNeedUpdate=!0;f.tangentsNeedUpdate=!0;f.colorsNeedUpdate=!0}}else a instanceof THREE.Line?f.__webglVertexBuffer||(g=f,g.__webglVertexBuffer=
l.createBuffer(),g.__webglColorBuffer=l.createBuffer(),g.__webglLineDistanceBuffer=l.createBuffer(),I.info.memory.geometries++,g=f,k=g.vertices.length,g.__vertexArray=new Float32Array(3*k),g.__colorArray=new Float32Array(3*k),g.__lineDistanceArray=new Float32Array(1*k),g.__webglLineCount=k,b(g,a),f.verticesNeedUpdate=!0,f.colorsNeedUpdate=!0,f.lineDistancesNeedUpdate=!0):a instanceof THREE.ParticleSystem&&!f.__webglVertexBuffer&&(g=f,g.__webglVertexBuffer=l.createBuffer(),g.__webglColorBuffer=l.createBuffer(),
I.info.memory.geometries++,g=f,k=g.vertices.length,g.__vertexArray=new Float32Array(3*k),g.__colorArray=new Float32Array(3*k),g.__sortArray=[],g.__webglParticleCount=k,b(g,a),f.verticesNeedUpdate=!0,f.colorsNeedUpdate=!0);if(void 0===a.__webglActive){if(a instanceof THREE.Mesh)if(f=a.geometry,f instanceof THREE.BufferGeometry)u(d.__webglObjects,f,a);else{if(f instanceof THREE.Geometry)for(e in f.geometryGroups)g=f.geometryGroups[e],u(d.__webglObjects,g,a)}else a instanceof THREE.Line||a instanceof
THREE.ParticleSystem?(f=a.geometry,u(d.__webglObjects,f,a)):a instanceof THREE.ImmediateRenderObject||a.immediateRenderCallback?d.__webglObjectsImmediate.push({id:null,object:a,opaque:null,transparent:null,z:0}):a instanceof THREE.Sprite?d.__webglSprites.push(a):a instanceof THREE.LensFlare&&d.__webglFlares.push(a);a.__webglActive=!0}}function u(a,b,c){a.push({id:null,buffer:b,object:c,opaque:null,transparent:null,z:0})}function p(a){for(var b in a.attributes)if(a.attributes[b].needsUpdate)return!0;
return!1}function w(a){for(var b in a.attributes)a.attributes[b].needsUpdate=!1}function v(a,b){a instanceof THREE.Mesh||a instanceof THREE.ParticleSystem||a instanceof THREE.Line?t(b.__webglObjects,a):a instanceof THREE.Sprite?x(b.__webglSprites,a):a instanceof THREE.LensFlare?x(b.__webglFlares,a):(a instanceof THREE.ImmediateRenderObject||a.immediateRenderCallback)&&t(b.__webglObjectsImmediate,a);delete a.__webglActive}function t(a,b){for(var c=a.length-1;0<=c;c--)a[c].object===b&&a.splice(c,1)}
function x(a,b){for(var c=a.length-1;0<=c;c--)a[c]===b&&a.splice(c,1)}function B(a,b,c,d,e){Fa=0;if(d.needsUpdate){var f=d.program;I.initMaterial(d,b,c,e);d.needsUpdate=!1;f&&Db(d,f)}d.morphTargets&&!e.__webglMorphTargetInfluences&&(e.__webglMorphTargetInfluences=new Float32Array(I.maxMorphTargets));var g=!1,f=d.program,k=f.uniforms,h=d.uniforms;f!==S&&(l.useProgram(f),S=f,g=!0);d.id!==Aa&&(Aa=d.id,g=!0);if(g||a!==Ca)l.uniformMatrix4fv(k.projectionMatrix,!1,a.projectionMatrix.elements),a!==Ca&&(Ca=
a);if(d.skinning)if(Ab&&e.useVertexTexture){if(null!==k.boneTexture){var m=J();l.uniform1i(k.boneTexture,m);I.setTexture(e.boneTexture,m)}null!==k.boneTextureWidth&&l.uniform1i(k.boneTextureWidth,e.boneTextureWidth);null!==k.boneTextureHeight&&l.uniform1i(k.boneTextureHeight,e.boneTextureHeight)}else null!==k.boneGlobalMatrices&&l.uniformMatrix4fv(k.boneGlobalMatrices,!1,e.boneMatrices);if(g){c&&d.fog&&(h.fogColor.value=c.color,c instanceof THREE.Fog?(h.fogNear.value=c.near,h.fogFar.value=c.far):
c instanceof THREE.FogExp2&&(h.fogDensity.value=c.density));if(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.MeshPhysicalMaterial||d.lights){if(ea){var n,p=m=0,r=0,s,q,u,t=Ra,w=t.directional.colors,v=t.directional.positions,x=t.point.colors,B=t.point.positions,y=t.point.distances,C=t.point.decayExponents,z=t.spot.colors,A=t.spot.positions,L=t.spot.distances,H=t.spot.decayExponents,F=t.spot.directions,K=t.spot.anglesCos,G=t.spot.exponents,N=t.hemi.skyColors,
Q=t.hemi.groundColors,la=t.hemi.positions,V=t.area.colors,U=t.area.positions,ta=t.area.distances,aa=t.area.decayExponents,T=t.area.widths,R=t.area.heights,pa=0,Y=0,Z=0,ba=0,ja=0,ra=0,ga=0,ha=0,ka=0,qa=0,na=n=0;c=na=u=na=0;for(g=b.length;c<g;c++)if(n=b[c],!n.onlyShadow)if(s=n.color,q=n.intensity,u=n.distance,n instanceof THREE.AmbientLight)n.visible&&(m+=s.r,p+=s.g,r+=s.b);else if(n instanceof THREE.DirectionalLight){if(ra+=1,n.visible&&(da.setFromMatrixPosition(n.matrixWorld),ia.setFromMatrixPosition(n.target.matrixWorld),
da.sub(ia),da.normalize(),0!==da.x||0!==da.y||0!==da.z))n=3*pa,v[n]=da.x,v[n+1]=da.y,v[n+2]=da.z,E(w,n,s,q),pa+=1}else if(n instanceof THREE.PointLight)ga+=1,n.visible&&(na=3*Y,E(x,na,s,q),ia.setFromMatrixPosition(n.matrixWorld),B[na]=ia.x,B[na+1]=ia.y,B[na+2]=ia.z,y[Y]=u,C[Y]=n.physicalFalloff?-1:0===u?0:n.decayExponent,Y+=1);else if(n instanceof THREE.SpotLight)ha+=1,n.visible&&(na=3*Z,E(z,na,s,q),ia.setFromMatrixPosition(n.matrixWorld),A[na]=ia.x,A[na+1]=ia.y,A[na+2]=ia.z,L[Z]=u,H[Y]=n.physicalFalloff?
-1:0===u?0:n.decayExponent,da.copy(ia),ia.setFromMatrixPosition(n.target.matrixWorld),da.sub(ia),da.normalize(),F[na]=da.x,F[na+1]=da.y,F[na+2]=da.z,K[Z]=Math.cos(n.angle),G[Z]=n.exponent,Z+=1);else if(n instanceof THREE.HemisphereLight){if(ka+=1,n.visible&&(da.setFromMatrixPosition(n.matrixWorld),da.normalize(),0!==da.x||0!==da.y||0!==da.z))u=3*ba,la[u]=da.x,la[u+1]=da.y,la[u+2]=da.z,s=n.color,n=n.groundColor,E(N,u,s,q),E(Q,u,n,q),ba+=1}else n instanceof THREE.AreaLight&&(qa+=1,n.visible&&(na=3*
ja,E(V,na,s,q),ia.setFromMatrixPosition(n.matrixWorld),U[na]=ia.x,U[na+1]=ia.y,U[na+2]=ia.z,ta[ja]=u,aa[ja]=n.decayExponent,n.matrixWorld.extractBasis(db,Sa,ia),db.multiplyScalar(n.width),Sa.multiplyScalar(n.height),T[na]=db.x,T[na+1]=db.y,T[na+2]=db.z,R[na]=Sa.x,R[na+1]=Sa.y,R[na+2]=Sa.z,ja+=1));c=3*pa;for(g=Math.max(w.length,3*ra);c<g;c++)w[c]=0;c=3*Y;for(g=Math.max(x.length,3*ga);c<g;c++)x[c]=0;c=3*Z;for(g=Math.max(z.length,3*ha);c<g;c++)z[c]=0;c=3*ba;for(g=Math.max(N.length,3*ka);c<g;c++)N[c]=
0;c=3*ba;for(g=Math.max(Q.length,3*ka);c<g;c++)Q[c]=0;c=3*ja;for(g=Math.max(V.length,3*qa);c<g;c++)V[c]=0;t.directional.length=pa;t.point.length=Y;t.spot.length=Z;t.hemi.length=ba;t.area.length=ja;t.ambient[0]=m;t.ambient[1]=p;t.ambient[2]=r;ea=!1}c=Ra;h.ambientLightColor.value=c.ambient;h.directionalLightColor.value=c.directional.colors;h.directionalLightDirection.value=c.directional.positions;h.pointLightColor.value=c.point.colors;h.pointLightPosition.value=c.point.positions;h.pointLightDistance.value=
c.point.distances;h.pointLightDecayExponent.value=c.point.decayExponents;h.spotLightColor.value=c.spot.colors;h.spotLightPosition.value=c.spot.positions;h.spotLightDistance.value=c.spot.distances;h.spotLightDecayExponent.value=c.spot.decayExponents;h.spotLightDirection.value=c.spot.directions;h.spotLightAngleCos.value=c.spot.anglesCos;h.spotLightExponent.value=c.spot.exponents;h.hemisphereLightSkyColor.value=c.hemi.skyColors;h.hemisphereLightGroundColor.value=c.hemi.groundColors;h.hemisphereLightDirection.value=
c.hemi.positions;h.areaLightColor.value=c.area.colors;h.areaLightPosition.value=c.area.positions;h.areaLightDistance.value=c.area.distances;h.areaLightDecayExponent.value=c.area.decayExponents;h.areaLightWidth.value=c.area.widths;h.areaLightHeight.value=c.area.heights}if(d instanceof THREE.MeshBasicMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.MeshPhysicalMaterial||d instanceof THREE.MeshPhongMaterial)h.opacity.value=d.opacity,h.diffuse.value=d.color,h.map.value=d.map,h.lightMap.value=
d.lightMap,h.emissiveMap.value=d.emissiveMap,d.bumpMap&&(h.bumpMap.value=d.bumpMap,h.bumpScale.value=d.bumpScale),d.normalMap&&(h.normalMap.value=d.normalMap,h.normalScale.value.copy(d.normalScale)),d.map&&(c=d.map,h.offsetRepeat.value.set(c.offset.x,c.offset.y,c.repeat.x,c.repeat.y),h.gainBrightness.value.set(c.gainPivot,c.gain,c.brightness,c.invert?-1:1)),d.specularMap&&(c=d.specularMap,h.specularMap.value=c,h.specularOffsetRepeat.value.set(c.offset.x,c.offset.y,c.repeat.x,c.repeat.y),h.specularGainBrightness.value.set(c.gainPivot,
c.gain,c.brightness,c.invert?-1:1)),d.opacityMap&&(c=d.opacityMap,h.opacityMap.value=c,h.opacityOffsetRepeat.value.set(c.offset.x,c.offset.y,c.repeat.x,c.repeat.y),h.opacityGainBrightness.value.set(c.gainPivot,c.gain,c.brightness,c.invert?-1:1)),d.bumpMap&&(c=d.bumpMap,h.bumpOffsetRepeat.value.set(c.offset.x,c.offset.y,c.repeat.x,c.repeat.y)),d.normalMap&&(c=d.normalMap,h.normalOffsetRepeat.value.set(c.offset.x,c.offset.y,c.repeat.x,c.repeat.y)),d.anisotropyMap&&(c=d.anisotropyMap,h.anisotropyOffsetRepeat.value.set(c.offset.x,
c.offset.y,c.repeat.x,c.repeat.y),h.anisotropyGainBrightness.value.set(c.gainPivot,c.gain,c.brightness,c.invert?-1:1)),d.anisotropyRotationMap&&(c=d.anisotropyRotationMap,h.anisotropyRotationOffsetRepeat.value.set(c.offset.x,c.offset.y,c.repeat.x,c.repeat.y),h.anisotropyRotationGainBrightness.value.set(c.gainPivot,c.gain,c.brightness,c.invert?-1:1)),d.roughnessMap&&(c=d.roughnessMap,h.roughnessOffsetRepeat.value.set(c.offset.x,c.offset.y,c.repeat.x,c.repeat.y),h.roughnessGainBrightness.value.set(c.gainPivot,
c.gain,c.brightness,c.invert?-1:1)),d.metallicMap&&(c=d.metallicMap,h.metallicOffsetRepeat.value.set(c.offset.x,c.offset.y,c.repeat.x,c.repeat.y),h.metallicGainBrightness.value.set(c.gainPivot,c.gain,c.brightness,c.invert?-1:1)),d.translucencyMap&&(h.translucencyMap.value=d.translucencyMap),h.envMap.value=d.envMap,h.flipEnvMap.value=d.envMap instanceof THREE.WebGLRenderTargetCube?1:-1,h.envEncoding.value=d.envMap?d.envMap.encoding:0,h.diffuseEnvMap.value=d.diffuseEnvMap,h.diffuseEnvEncoding.value=
d.diffuseEnvMap?d.diffuseEnvMap.encoding:0,h.reflectivity.value=d.reflectivity,h.refractionRatio.value=d.refractionRatio,h.combine.value=d.combine,h.useRefract.value=d.envMap&&d.envMap.mapping instanceof THREE.CubeRefractionMapping;d instanceof THREE.LineBasicMaterial?(h.diffuse.value=d.color,h.opacity.value=d.opacity):d instanceof THREE.LineDashedMaterial?(h.diffuse.value=d.color,h.opacity.value=d.opacity,h.dashSize.value=d.dashSize,h.totalSize.value=d.dashSize+d.gapSize,h.scale.value=d.scale):d instanceof
THREE.ParticleSystemMaterial?(h.psColor.value=d.color,h.opacity.value=d.opacity,h.size.value=d.size,h.scale.value=D.height/2,h.map.value=d.map):d instanceof THREE.MeshPhongMaterial?(h.opacityMap.value=d.opacityMap,h.shininess.value=d.shininess,h.ambient.value=d.ambient,h.emissive.value=d.emissive,h.specular.value=d.specular,d.wrapAround&&h.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshPhysicalMaterial?(h.opacityMap.value=d.opacityMap,h.falloffBlendParams.value=d.falloffBlendParams,h.falloffMap.value=
d.falloffMap,h.roughness.value=d.roughness,h.metallic.value=d.metallic,h.clearCoat.value=d.clearCoat,h.clearCoatRoughness.value=d.clearCoatRoughness,h.roughnessMap.value=d.roughnessMap,h.metallicMap.value=d.metallicMap,h.translucencyMap.value=d.translucencyMap,h.translucencyNormalAlpha.value=d.translucencyNormalAlpha,h.translucencyNormalPower.value=d.translucencyNormalPower,h.translucencyViewAlpha.value=d.translucencyViewAlpha,h.translucencyViewPower.value=d.translucencyViewPower,h.anisotropyMap.value=
d.anisotropyMap,h.anisotropy.value=d.anisotropy,h.anisotropyRotation.value=d.anisotropyRotation,h.anisotropyRotationMap.value=d.anisotropyRotationMap,h.ambient.value=d.ambient,h.emissive.value=d.emissive,h.falloffColor.value=d.falloffColor,h.specular.value=d.specular,h.translucency.value=d.translucency):d instanceof THREE.MeshLambertMaterial?(h.ambient.value=d.ambient,h.emissive.value=d.emissive,d.wrapAround&&h.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshDepthMaterial?(h.mNear.value=a.near,
h.mFar.value=a.far,h.opacity.value=d.opacity):d instanceof THREE.MeshNormalMaterial&&(h.opacity.value=d.opacity);if(e.receiveShadow&&!d._shadowPass&&h.shadowMatrix)for(g=c=0,m=b.length;g<m;g++)p=b[g],p.castShadow&&(p instanceof THREE.SpotLight||p instanceof THREE.DirectionalLight&&!p.shadowCascade)&&(h.shadowMap.value[c]=p.shadowMap,h.shadowMapSize.value[c]=p.shadowMapSize,h.shadowMatrix.value[c]=p.shadowMatrix,h.shadowDarkness.value[c]=p.shadowDarkness,h.shadowBias.value[c]=p.shadowBias,c++);b=d.uniformsList;
h=0;for(c=b.length;h<c;h++)if(m=f.uniforms[b[h][1]])if(g=b[h][0],p=g.type,q=g.value,"i"===p)l.uniform1i(m,q);else if("f"===p)l.uniform1f(m,q);else if("v2"===p)l.uniform2f(m,q.x,q.y);else if("v3"===p)l.uniform3f(m,q.x,q.y,q.z);else if("v4"===p)l.uniform4f(m,q.x,q.y,q.z,q.w);else if("c"===p)l.uniform3f(m,q.r,q.g,q.b);else if("iv1"===p)l.uniform1iv(m,q);else if("iv"===p)l.uniform3iv(m,q);else if("fv1"===p)l.uniform1fv(m,q);else if("fv"===p)l.uniform3fv(m,q);else if("v2v"===p){void 0===g._array&&(g._array=
new Float32Array(2*q.length));p=0;for(r=q.length;p<r;p++)t=2*p,g._array[t]=q[p].x,g._array[t+1]=q[p].y;l.uniform2fv(m,g._array)}else if("v3v"===p){void 0===g._array&&(g._array=new Float32Array(3*q.length));p=0;for(r=q.length;p<r;p++)t=3*p,g._array[t]=q[p].x,g._array[t+1]=q[p].y,g._array[t+2]=q[p].z;l.uniform3fv(m,g._array)}else if("v4v"===p){void 0===g._array&&(g._array=new Float32Array(4*q.length));p=0;for(r=q.length;p<r;p++)t=4*p,g._array[t]=q[p].x,g._array[t+1]=q[p].y,g._array[t+2]=q[p].z,g._array[t+
3]=q[p].w;l.uniform4fv(m,g._array)}else if("m4"===p)void 0===g._array&&(g._array=new Float32Array(16)),q.flattenToArray(g._array),l.uniformMatrix4fv(m,!1,g._array);else if("m4v"===p){void 0===g._array&&(g._array=new Float32Array(16*q.length));p=0;for(r=q.length;p<r;p++)q[p].flattenToArrayOffset(g._array,16*p);l.uniformMatrix4fv(m,!1,g._array)}else if("t"===p)t=q,q=J(),l.uniform1i(m,q),t&&(t.image instanceof Array&&6===t.image.length?P(t,q):t instanceof THREE.WebGLRenderTargetCube?(g=t,l.activeTexture(l.TEXTURE0+
q),l.bindTexture(l.TEXTURE_CUBE_MAP,g.__webglTexture)):I.setTexture(t,q));else if("tv"===p){void 0===g._array&&(g._array=[]);p=0;for(r=g.value.length;p<r;p++)g._array[p]=J();l.uniform1iv(m,g._array);p=0;for(r=g.value.length;p<r;p++)t=g.value[p],q=g._array[p],t&&I.setTexture(t,q)}else THREE.onwarning("THREE.WebGLRenderer: Unknown uniform type: "+p);(d instanceof THREE.ShaderMaterial||d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshPhysicalMaterial||d.envMap||d.diffuseEnvMap)&&null!==k.cameraPosition&&
(ia.setFromMatrixPosition(a.matrixWorld),l.uniform3f(k.cameraPosition,ia.x,ia.y,ia.z));(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.MeshPhysicalMaterial||d instanceof THREE.ShaderMaterial||d.skinning)&&null!==k.viewMatrix&&l.uniformMatrix4fv(k.viewMatrix,!1,a.matrixWorldInverse.elements)}l.uniformMatrix4fv(k.modelViewMatrix,!1,e._modelViewMatrix.elements);k.normalMatrix&&l.uniformMatrix3fv(k.normalMatrix,!1,e._normalMatrix.elements);null!==k.modelMatrix&&
l.uniformMatrix4fv(k.modelMatrix,!1,e.matrixWorld.elements);return f}function J(){var a=Fa;if(a>=Za)THREE.onwarning("WebGLRenderer: trying to use "+a+" texture units while this GPU supports only "+Za);Fa+=1;return a}function E(a,b,c,d){a[b]=c.r*d;a[b+1]=c.g*d;a[b+2]=c.b*d}function K(a){a!==wa&&(l.lineWidth(a),wa=a)}function A(a,b,c){ka!==a&&(a?l.enable(l.POLYGON_OFFSET_FILL):l.disable(l.POLYGON_OFFSET_FILL),ka=a);!a||Pa===b&&Ma===c||(l.polygonOffset(b,c),Pa=b,Ma=c)}function z(a){a=a.split("\n");for(var b=
0,c=a.length;b<c;b++)a[b]=b+1+": "+a[b];return a.join("\n")}function L(a,b,c,d){var e;"fragment"===a?e=l.createShader(l.FRAGMENT_SHADER):"vertex"===a&&(e=l.createShader(l.VERTEX_SHADER));l.shaderSource(e,b);l.compileShader(e);return l.getShaderParameter(e,l.COMPILE_STATUS)?e:(THREE.onerror("shader error: "+c+"."+a,{getShaderParameter:l.getShaderParameter(e,l.COMPILE_STATUS),shaderInfoLog:l.getShaderInfoLog(e),shaderCode:z(b),getError:l.getError(),simpleCode:d,gl_MAX_VARYING_VECTORS:l.getParameter(l.MAX_VARYING_VECTORS),
gl_MAX_VERTEX_ATTRIBS:l.getParameter(l.MAX_VERTEX_ATTRIBS),gl_MAX_VERTEX_UNIFORM_VECTORS:l.getParameter(l.MAX_VERTEX_UNIFORM_VECTORS),gl_MAX_VERTEX_TEXTURE_IMAGE_UNITS:l.getParameter(l.MAX_VERTEX_TEXTURE_IMAGE_UNITS),gl_MAX_FRAGMENT_UNIFORM_VECTORS:l.getParameter(l.MAX_FRAGMENT_UNIFORM_VECTORS),gl_MAX_TEXTURE_IMAGE_UNITS:l.getParameter(l.MAX_TEXTURE_IMAGE_UNITS)}),null)}function F(a,b,c){c?(l.texParameteri(a,l.TEXTURE_WRAP_S,C(b.wrapS)),l.texParameteri(a,l.TEXTURE_WRAP_T,C(b.wrapT)),l.texParameteri(a,
l.TEXTURE_MAG_FILTER,C(b.magFilter)),l.texParameteri(a,l.TEXTURE_MIN_FILTER,C(b.minFilter))):(l.texParameteri(a,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(a,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(a,l.TEXTURE_MAG_FILTER,G(b.magFilter)),l.texParameteri(a,l.TEXTURE_MIN_FILTER,G(b.minFilter)));Qa&&b.type!==THREE.FloatType&&(1<b.anisotropy||b.__oldAnisotropy)&&(l.texParameterf(a,Qa.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,Ib)),b.__oldAnisotropy=b.anisotropy)}function P(a,b){if(6===
a.image.length)if(a.needsUpdate){a.image.__webglTextureCube||(a.addEventListener("dispose",xb),a.image.__webglTextureCube=l.createTexture(),I.info.memory.textures++);l.activeTexture(l.TEXTURE0+b);l.bindTexture(l.TEXTURE_CUBE_MAP,a.image.__webglTextureCube);l.pixelStorei(l.UNPACK_FLIP_Y_WEBGL,a.flipY);for(var c=a instanceof THREE.CompressedTexture,d=[],e=0;6>e;e++)if(I.autoScaleCubemaps&&!c){var f=d,g=e,h;h=a.image[e];var k=Xb;if(!(h.width<=k&&h.height<=k)){var m=Math.max(h.width,h.height),n=Math.floor(h.width*
k/m),k=Math.floor(h.height*k/m),m=document.createElement("canvas");m.width=n;m.height=k;m.getContext("2d").drawImage(h,0,0,h.width,h.height,0,0,n,k);h=m}f[g]=h}else d[e]=a.image[e];e=d[0];f=THREE.Math.isPowerOfTwo(e.width)&&THREE.Math.isPowerOfTwo(e.height);g=C(a.format);h=C(a.type);F(l.TEXTURE_CUBE_MAP,a,f);for(e=0;6>e;e++)if(c)for(var k=d[e].mipmaps,m=0,p=k.length;m<p;m++)n=k[m],a.format!==THREE.RGBAFormat?(l.compressedTexImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+e,m,g,n.width,n.height,0,n.data),this.reportIfError("_gl.compressedTexImage2D CubeMap Mipmaps, texture.name: "+
a.name)):(l.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+e,m,g,n.width,n.height,0,g,h,n.data),this.reportIfError("_gl.texImage2D CubeMap Mipmaps, texture.name: "+a.name));else l.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,g,g,h,d[e]);a.generateMipmaps&&f&&l.generateMipmap(l.TEXTURE_CUBE_MAP);a.needsUpdate=!1;if(a.onUpdate)a.onUpdate()}else l.activeTexture(l.TEXTURE0+b),l.bindTexture(l.TEXTURE_CUBE_MAP,a.image.__webglTextureCube)}function y(a,b){l.bindRenderbuffer(l.RENDERBUFFER,a);var c="";b.depthBuffer&&
!b.stencilBuffer?(l.renderbufferStorage(l.RENDERBUFFER,l.DEPTH_COMPONENT16,b.width,b.height),l.framebufferRenderbuffer(l.FRAMEBUFFER,l.DEPTH_ATTACHMENT,l.RENDERBUFFER,a),c="renderTarget: "+b.width+"+"+b.height+" DEPTH_ATTACHMENT"):b.depthBuffer&&b.stencilBuffer?(l.renderbufferStorage(l.RENDERBUFFER,l.DEPTH_STENCIL,b.width,b.height),l.framebufferRenderbuffer(l.FRAMEBUFFER,l.DEPTH_STENCIL_ATTACHMENT,l.RENDERBUFFER,a),c="renderTarget: "+b.width+"+"+b.height+" DEPTH_STENCIL_ATTACHMENT"):(l.renderbufferStorage(l.RENDERBUFFER,
l.RGBA4,b.width,b.height),c="renderTarget: "+b.width+"+"+b.height+" RGBA4");if(l.checkFramebufferStatus(l.FRAMEBUFFER)!=l.FRAMEBUFFER_COMPLETE)throw console.log(b),Error("(A) Rendering to this texture is not supported (incomplete framebuffer) "+c);}function G(a){return a===THREE.NearestFilter||a===THREE.NearestMipMapNearestFilter||a===THREE.NearestMipMapLinearFilter?l.NEAREST:l.LINEAR}function C(a){if(a===THREE.RepeatWrapping)return l.REPEAT;if(a===THREE.ClampToEdgeWrapping)return l.CLAMP_TO_EDGE;
if(a===THREE.MirroredRepeatWrapping)return l.MIRRORED_REPEAT;if(a===THREE.NearestFilter)return l.NEAREST;if(a===THREE.NearestMipMapNearestFilter)return l.NEAREST_MIPMAP_NEAREST;if(a===THREE.NearestMipMapLinearFilter)return l.NEAREST_MIPMAP_LINEAR;if(a===THREE.LinearFilter)return l.LINEAR;if(a===THREE.LinearMipMapNearestFilter)return l.LINEAR_MIPMAP_NEAREST;if(a===THREE.LinearMipMapLinearFilter)return l.LINEAR_MIPMAP_LINEAR;if(a===THREE.UnsignedByteType)return l.UNSIGNED_BYTE;if(a===THREE.UnsignedShort4444Type)return l.UNSIGNED_SHORT_4_4_4_4;
if(a===THREE.UnsignedShort5551Type)return l.UNSIGNED_SHORT_5_5_5_1;if(a===THREE.UnsignedShort565Type)return l.UNSIGNED_SHORT_5_6_5;if(a===THREE.ByteType)return l.BYTE;if(a===THREE.ShortType)return l.SHORT;if(a===THREE.UnsignedShortType)return l.UNSIGNED_SHORT;if(a===THREE.IntType)return l.INT;if(a===THREE.UnsignedIntType)return l.UNSIGNED_INT;if(a===THREE.FloatType)return l.FLOAT;if(a===THREE.HalfType)return 36193;if(a===THREE.AlphaFormat)return l.ALPHA;if(a===THREE.RGBFormat)return l.RGB;if(a===
THREE.RGBAFormat)return l.RGBA;if(a===THREE.LuminanceFormat)return l.LUMINANCE;if(a===THREE.LuminanceAlphaFormat)return l.LUMINANCE_ALPHA;if(a===THREE.AddEquation)return l.FUNC_ADD;if(a===THREE.SubtractEquation)return l.FUNC_SUBTRACT;if(a===THREE.ReverseSubtractEquation)return l.FUNC_REVERSE_SUBTRACT;if(a===THREE.ZeroFactor)return l.ZERO;if(a===THREE.OneFactor)return l.ONE;if(a===THREE.SrcColorFactor)return l.SRC_COLOR;if(a===THREE.OneMinusSrcColorFactor)return l.ONE_MINUS_SRC_COLOR;if(a===THREE.SrcAlphaFactor)return l.SRC_ALPHA;
if(a===THREE.OneMinusSrcAlphaFactor)return l.ONE_MINUS_SRC_ALPHA;if(a===THREE.DstAlphaFactor)return l.DST_ALPHA;if(a===THREE.OneMinusDstAlphaFactor)return l.ONE_MINUS_DST_ALPHA;if(a===THREE.DstColorFactor)return l.DST_COLOR;if(a===THREE.OneMinusDstColorFactor)return l.ONE_MINUS_DST_COLOR;if(a===THREE.SrcAlphaSaturateFactor)return l.SRC_ALPHA_SATURATE;if(void 0!==Oa){if(a===THREE.RGB_S3TC_DXT1_Format)return Oa.COMPRESSED_RGB_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT1_Format)return Oa.COMPRESSED_RGBA_S3TC_DXT1_EXT;
if(a===THREE.RGBA_S3TC_DXT3_Format)return Oa.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(a===THREE.RGBA_S3TC_DXT5_Format)return Oa.COMPRESSED_RGBA_S3TC_DXT5_EXT}return 0}console.log("THREE.WebGLRenderer",THREE.REVISION);a=a||{};var D=void 0!==a.canvas?a.canvas:document.createElement("canvas"),H=void 0!==a.context?a.context:null,Q=void 0!==a.precision?a.precision:"mediump",aa=void 0!==a.alpha?a.alpha:!1,V=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,ga=void 0!==a.antialias?a.antialias:!1,Y=void 0!==
a.stencil?a.stencil:!0,ha=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,N=new THREE.Color(0),ba=0;this.domElement=D;this.context=null;this.devicePixelRatio=void 0!==a.devicePixelRatio?a.devicePixelRatio:void 0!==self.devicePixelRatio?self.devicePixelRatio:1;this.gammaOutput=this.gammaInput=this.autoUpdateObjects=this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.shadowMapEnabled=!1;this.shadowMapAutoUpdate=!0;this.shadowMapType=THREE.PCFShadowMap;
this.shadowMapCullFace=THREE.CullFaceFront;this.shadowMapCascade=this.shadowMapDebug=!1;this.maxMorphTargets=8;this.maxMorphNormals=4;this.autoScaleCubemaps=!0;this.renderPluginsPre=[];this.renderPluginsPost=[];this.info={memory:{programs:0,geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var I=this,U=[],la=0,S=null,T=null,Aa=-1,ta=null,Ca=null,Fa=0,R=-1,pa=-1,ja=-1,Ja=-1,Da=-1,Ea=-1,Z=-1,La=-1,ka=null,Pa=null,Ma=null,wa=null,qa=0,ca=0,ya=D.width,Ka=D.height,Ga=0,hb=0,za=new Uint8Array(16),
Ba=new THREE.Frustum,ra=new THREE.Matrix4,Wa=new THREE.Matrix4,ia=new THREE.Vector3,db=new THREE.Vector3,Sa=new THREE.Vector3,da=new THREE.Vector3,ea=!0,Ra={ambient:[0,0,0],directional:{length:0,colors:[],positions:[]},point:{length:0,colors:[],positions:[],distances:[],decayExponents:[]},spot:{length:0,colors:[],positions:[],distances:[],decayExponents:[],directions:[],anglesCos:[],exponents:[]},hemi:{length:0,skyColors:[],groundColors:[],positions:[]},area:{length:0,colors:[],positions:[],distances:[],
decayExponents:[],widths:[],heights:[]}},l,Na,ib,ma,Qa,Oa;(function(){try{var a={alpha:aa,premultipliedAlpha:V,antialias:ga,stencil:Y,preserveDrawingBuffer:ha};l=H||D.getContext("webgl",a)||D.getContext("experimental-webgl",a);if(null===l)THREE.onerror("Error creating WebGL context.")}catch(b){THREE.onerror(b)}Na=l.getExtension("OES_texture_float");l.getExtension("OES_texture_float_linear");ib=l.getExtension("OES_standard_derivatives");ma=l.getExtension("EXT_shader_texture_lod");Qa=l.getExtension("EXT_texture_filter_anisotropic")||
l.getExtension("MOZ_EXT_texture_filter_anisotropic")||l.getExtension("WEBKIT_EXT_texture_filter_anisotropic");Oa=l.getExtension("WEBGL_compressed_texture_s3tc")||l.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||l.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");Na||console.log("THREE.WebGLRenderer: Float textures not supported.");ib||console.log("THREE.WebGLRenderer: Standard derivatives not supported.");ma||console.log("THREE.WebGLRenderer: Shader texture LOD not supported.");Qa||console.log("THREE.WebGLRenderer: Anisotropic texture filtering not supported.");
Oa||console.log("THREE.WebGLRenderer: S3TC compressed textures not supported.");void 0===l.getShaderPrecisionFormat&&(l.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})})();l.clearColor(0,0,0,1);l.clearDepth(1);l.clearStencil(0);l.enable(l.DEPTH_TEST);l.depthFunc(l.LEQUAL);l.frontFace(l.CCW);l.cullFace(l.BACK);l.enable(l.CULL_FACE);l.enable(l.BLEND);l.blendEquation(l.FUNC_ADD);l.blendFunc(l.SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA);l.viewport(qa,ca,ya,Ka);l.clearColor(N.r,N.g,
N.b,ba);this.context=l;var Za=l.getParameter(l.MAX_TEXTURE_IMAGE_UNITS),Wb=l.getParameter(l.MAX_VERTEX_TEXTURE_IMAGE_UNITS);l.getParameter(l.MAX_TEXTURE_SIZE);var Xb=l.getParameter(l.MAX_CUBE_MAP_TEXTURE_SIZE),Ib=Qa?l.getParameter(Qa.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0,tb=0<Wb,Ab=tb&&Na;Oa&&l.getParameter(l.COMPRESSED_TEXTURE_FORMATS);var Yb=l.getShaderPrecisionFormat(l.VERTEX_SHADER,l.HIGH_FLOAT),Zb=l.getShaderPrecisionFormat(l.VERTEX_SHADER,l.MEDIUM_FLOAT);l.getShaderPrecisionFormat(l.VERTEX_SHADER,
l.LOW_FLOAT);var $b=l.getShaderPrecisionFormat(l.FRAGMENT_SHADER,l.HIGH_FLOAT),pc=l.getShaderPrecisionFormat(l.FRAGMENT_SHADER,l.MEDIUM_FLOAT);l.getShaderPrecisionFormat(l.FRAGMENT_SHADER,l.LOW_FLOAT);l.getShaderPrecisionFormat(l.VERTEX_SHADER,l.HIGH_INT);l.getShaderPrecisionFormat(l.VERTEX_SHADER,l.MEDIUM_INT);l.getShaderPrecisionFormat(l.VERTEX_SHADER,l.LOW_INT);l.getShaderPrecisionFormat(l.FRAGMENT_SHADER,l.HIGH_INT);l.getShaderPrecisionFormat(l.FRAGMENT_SHADER,l.MEDIUM_INT);l.getShaderPrecisionFormat(l.FRAGMENT_SHADER,
l.LOW_INT);var qc=0<Yb.precision&&0<$b.precision,Jb=0<Zb.precision&&0<pc.precision;"highp"!==Q||qc||(Jb?(Q="mediump",THREE.onwarning("WebGLRenderer: highp not supported, using mediump")):(Q="lowp",THREE.onwarning("WebGLRenderer: highp and mediump not supported, using lowp")));"mediump"!==Q||Jb||(Q="lowp",THREE.onwarning("WebGLRenderer: mediump not supported, using lowp"));this.getContext=function(){return l};this.supportsVertexTextures=function(){return tb};this.supportsFloatTextures=function(){return Na};
this.supportsStandardDerivatives=function(){return ib};this.supportsCompressedTextureS3TC=function(){return Oa};this.getMaxAnisotropy=function(){return Ib};this.getPrecision=function(){return Q};this.setSize=function(a,b,c){D.width=a*this.devicePixelRatio;D.height=b*this.devicePixelRatio;1!==this.devicePixelRatio&&!1!==c&&(D.style.width=a+"px",D.style.height=b+"px");this.setViewport(0,0,a,b)};this.setViewport=function(a,b,c,d){qa=a*this.devicePixelRatio;ca=b*this.devicePixelRatio;ya=c*this.devicePixelRatio;
Ka=d*this.devicePixelRatio;l.viewport(qa,ca,ya,Ka)};this.setScissor=function(a,b,c,d){l.scissor(a*this.devicePixelRatio,b*this.devicePixelRatio,c*this.devicePixelRatio,d*this.devicePixelRatio)};this.enableScissorTest=function(a){a?l.enable(l.SCISSOR_TEST):l.disable(l.SCISSOR_TEST)};this.setClearColor=function(a,b){N.set(a);ba=void 0!==b?b:1;l.clearColor(N.r,N.g,N.b,ba)};this.setClearColorHex=function(a,b){THREE.onwarning("DEPRECATED: .setClearColorHex() is being removed. Use .setClearColor() instead.");
this.setClearColor(a,b)};this.getClearColor=function(){return N};this.getClearAlpha=function(){return ba};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=l.COLOR_BUFFER_BIT;if(void 0===b||b)d|=l.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=l.STENCIL_BUFFER_BIT;l.clear(d)};this.clearColor=function(){l.clear(l.COLOR_BUFFER_BIT)};this.clearDepth=function(){l.clear(l.DEPTH_BUFFER_BIT)};this.clearStencil=function(){l.clear(l.STENCIL_BUFFER_BIT)};this.clearTarget=function(a,b,c,d){this.setRenderTarget(a);
this.clear(b,c,d)};this.addPostPlugin=function(a){a.init(this);this.renderPluginsPost.push(a)};this.addPrePlugin=function(a){a.init(this);this.renderPluginsPre.push(a)};this.updateShadowMap=function(a,b){S=null;Aa=ta=La=Z=ja=-1;ea=!0;pa=R=-1;this.shadowMapPlugin.update(a,b)};var Kb=function(a){a=a.target;a.removeEventListener("dispose",Kb);a.__webglInit=void 0;if(a instanceof THREE.BufferGeometry){var b=a.attributes,c;for(c in b)void 0!==b[c].buffer&&l.deleteBuffer(b[c].buffer);I.info.memory.geometries--}else if(void 0!==
a.geometryGroups)for(b in a.geometryGroups){c=a.geometryGroups[b];if(void 0!==c.numMorphTargets)for(var d=0,e=c.numMorphTargets;d<e;d++)l.deleteBuffer(c.__webglMorphTargetsBuffers[d]);if(void 0!==c.numMorphNormals)for(d=0,e=c.numMorphNormals;d<e;d++)l.deleteBuffer(c.__webglMorphNormalsBuffers[d]);Cb(c)}else Cb(a)},xb=function(a){a=a.target;a.removeEventListener("dispose",xb);a.image&&a.image.__webglTextureCube?l.deleteTexture(a.image.__webglTextureCube):a.__webglInit&&(a.__webglInit=!1,l.deleteTexture(a.__webglTexture));
I.info.memory.textures--},Lb=function(a){a=a.target;a.removeEventListener("dispose",Lb);if(a&&a.__webglTexture)if(l.deleteTexture(a.__webglTexture),a instanceof THREE.WebGLRenderTargetCube)for(var b=0;6>b;b++)l.deleteFramebuffer(a.__webglFramebuffer[b]),l.deleteRenderbuffer(a.__webglRenderbuffer[b]);else l.deleteFramebuffer(a.__webglFramebuffer),l.deleteRenderbuffer(a.__webglRenderbuffer);I.info.memory.textures--},Bb=function(a){a=a.target;a.removeEventListener("dispose",Bb);Db(a)},Cb=function(a){void 0!==
a.__webglVertexBuffer&&l.deleteBuffer(a.__webglVertexBuffer);void 0!==a.__webglNormalBuffer&&l.deleteBuffer(a.__webglNormalBuffer);void 0!==a.__webglTangentBuffer&&l.deleteBuffer(a.__webglTangentBuffer);void 0!==a.__webglColorBuffer&&l.deleteBuffer(a.__webglColorBuffer);void 0!==a.__webglUVBuffer&&l.deleteBuffer(a.__webglUVBuffer);void 0!==a.__webglUV2Buffer&&l.deleteBuffer(a.__webglUV2Buffer);void 0!==a.__webglSkinIndicesBuffer&&l.deleteBuffer(a.__webglSkinIndicesBuffer);void 0!==a.__webglSkinWeightsBuffer&&
l.deleteBuffer(a.__webglSkinWeightsBuffer);void 0!==a.__webglFaceBuffer&&l.deleteBuffer(a.__webglFaceBuffer);void 0!==a.__webglLineBuffer&&l.deleteBuffer(a.__webglLineBuffer);void 0!==a.__webglLineDistanceBuffer&&l.deleteBuffer(a.__webglLineDistanceBuffer);if(void 0!==a.__webglCustomAttributesList)for(var b in a.__webglCustomAttributesList)l.deleteBuffer(a.__webglCustomAttributesList[b].buffer);I.info.memory.geometries--},Db=function(a,b){var c=b||a.program;if(void 0!==c){b||(a.program=void 0);var d,
e,f,g=!1;d=0;for(e=U.length;d<e;d++)if(f=U[d],f.program===c){f.usedTimes--;0===f.usedTimes&&(g=!0);break}if(!0===g){g=[];d=0;for(e=U.length;d<e;d++)f=U[d],f.program!==c&&g.push(f);U=g;l.deleteProgram(c);I.info.memory.programs--}}};this.renderBufferImmediate=function(a,b,c){a.hasPositions&&!a.__webglVertexBuffer&&(a.__webglVertexBuffer=l.createBuffer());a.hasNormals&&!a.__webglNormalBuffer&&(a.__webglNormalBuffer=l.createBuffer());a.hasUvs&&!a.__webglUvBuffer&&(a.__webglUvBuffer=l.createBuffer());
a.hasColors&&!a.__webglColorBuffer&&(a.__webglColorBuffer=l.createBuffer());a.hasPositions&&(l.bindBuffer(l.ARRAY_BUFFER,a.__webglVertexBuffer),l.bufferData(l.ARRAY_BUFFER,a.positionArray,l.DYNAMIC_DRAW),l.enableVertexAttribArray(b.attributes.position),l.vertexAttribPointer(b.attributes.position,3,l.FLOAT,!1,0,0));if(a.hasNormals){l.bindBuffer(l.ARRAY_BUFFER,a.__webglNormalBuffer);if(c.shading===THREE.FlatShading){var d,e,f,g,h,k,m,n,p,q,r,s=3*a.count;for(r=0;r<s;r+=9)q=a.normalArray,d=q[r],e=q[r+
1],f=q[r+2],g=q[r+3],k=q[r+4],n=q[r+5],h=q[r+6],m=q[r+7],p=q[r+8],d=(d+g+h)/3,e=(e+k+m)/3,f=(f+n+p)/3,q[r]=d,q[r+1]=e,q[r+2]=f,q[r+3]=d,q[r+4]=e,q[r+5]=f,q[r+6]=d,q[r+7]=e,q[r+8]=f}l.bufferData(l.ARRAY_BUFFER,a.normalArray,l.DYNAMIC_DRAW);l.enableVertexAttribArray(b.attributes.normal);l.vertexAttribPointer(b.attributes.normal,3,l.FLOAT,!1,0,0)}a.hasUvs&&c.map&&(l.bindBuffer(l.ARRAY_BUFFER,a.__webglUvBuffer),l.bufferData(l.ARRAY_BUFFER,a.uvArray,l.DYNAMIC_DRAW),l.enableVertexAttribArray(b.attributes.uv),
l.vertexAttribPointer(b.attributes.uv,2,l.FLOAT,!1,0,0));a.hasColors&&c.vertexColors!==THREE.NoColors&&(l.bindBuffer(l.ARRAY_BUFFER,a.__webglColorBuffer),l.bufferData(l.ARRAY_BUFFER,a.colorArray,l.DYNAMIC_DRAW),l.enableVertexAttribArray(b.attributes.color),l.vertexAttribPointer(b.attributes.color,3,l.FLOAT,!1,0,0));l.drawArrays(l.TRIANGLES,0,a.count);a.count=0};this.renderBufferDirect=function(a,b,c,d,e,h){if(!1!==d.visible){var m,n,p,q;m=B(a,b,c,d,h);a=m.attributes;b=e.attributes;c=!1;m=16777215*
e.id+2*m.id+(d.wireframe?1:0);m!==ta&&(ta=m,c=!0);c&&k();if(h instanceof THREE.Mesh)if(h=b.index){e=e.offsets;1<e.length&&(c=!0);for(var r=0,s=e.length;r<s;r++){var t=e[r].index;if(c){for(n in a)p=a[n],m=b[n],0<=p&&(m?(q=m.itemSize,l.bindBuffer(l.ARRAY_BUFFER,m.buffer),g(p),l.vertexAttribPointer(p,q,l.FLOAT,!1,0,t*q*4)):d.defaultAttributeValues&&(2===d.defaultAttributeValues[n].length?l.vertexAttrib2fv(p,d.defaultAttributeValues[n]):3===d.defaultAttributeValues[n].length&&l.vertexAttrib3fv(p,d.defaultAttributeValues[n])));
l.bindBuffer(l.ELEMENT_ARRAY_BUFFER,h.buffer)}l.drawElements(l.TRIANGLES,e[r].count,l.UNSIGNED_SHORT,2*e[r].start);I.info.render.calls++;I.info.render.vertices+=e[r].count;I.info.render.faces+=e[r].count/3}}else{if(c)for(n in a)"index"!==n&&(p=a[n],m=b[n],0<=p&&(m?(q=m.itemSize,l.bindBuffer(l.ARRAY_BUFFER,m.buffer),g(p),l.vertexAttribPointer(p,q,l.FLOAT,!1,0,0)):d.defaultAttributeValues&&d.defaultAttributeValues[n]&&(2===d.defaultAttributeValues[n].length?l.vertexAttrib2fv(p,d.defaultAttributeValues[n]):
3===d.defaultAttributeValues[n].length&&l.vertexAttrib3fv(p,d.defaultAttributeValues[n]))));d=e.attributes.position;l.drawArrays(l.TRIANGLES,0,d.array.length/3);I.info.render.calls++;I.info.render.vertices+=d.array.length/3;I.info.render.faces+=d.array.length/3/3}else if(h instanceof THREE.ParticleSystem){if(c)for(n in a)p=a[n],m=b[n],0<=p&&(m?(q=m.itemSize,l.bindBuffer(l.ARRAY_BUFFER,m.buffer),g(p),l.vertexAttribPointer(p,q,l.FLOAT,!1,0,0)):d.defaultAttributeValues&&d.defaultAttributeValues[n]&&
(2===d.defaultAttributeValues[n].length?l.vertexAttrib2fv(p,d.defaultAttributeValues[n]):3===d.defaultAttributeValues[n].length&&l.vertexAttrib3fv(p,d.defaultAttributeValues[n])));d=b.position;l.drawArrays(l.POINTS,0,d.array.length/3);I.info.render.calls++;I.info.render.points+=d.array.length/3}else if(h instanceof THREE.Line)if(n=h.type===THREE.LineStrip?l.LINE_STRIP:l.LINES,K(d.linewidth),h=b.index)for(e=e.offsets,1<e.length&&(c=!0),r=0,s=e.length;r<s;r++)t=e[r].index,c&&(f(d,a,b,t),l.bindBuffer(l.ELEMENT_ARRAY_BUFFER,
h.buffer)),l.drawElements(l.LINES,e[r].count,l.UNSIGNED_SHORT,2*e[r].start),I.info.render.calls++,I.info.render.vertices+=e[r].count;else c&&f(d,a,b,0),d=b.position,l.drawArrays(n,0,d.array.length/3),I.info.render.calls++,I.info.render.points+=d.array.length}};this.renderBuffer=function(a,b,c,d,e,f){if(!1!==d.visible){var h,n;c=B(a,b,c,d,f);a=c.attributes;b=!1;c=16777215*e.id+2*c.id+(d.wireframe?1:0);c!==ta&&(ta=c,b=!0);b&&k();if(!d.morphTargets&&0<=a.position)b&&(l.bindBuffer(l.ARRAY_BUFFER,e.__webglVertexBuffer),
g(a.position),l.vertexAttribPointer(a.position,3,l.FLOAT,!1,0,0));else if(f.morphTargetBase){c=d.program.attributes;-1!==f.morphTargetBase&&0<=c.position?(l.bindBuffer(l.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[f.morphTargetBase]),g(c.position),l.vertexAttribPointer(c.position,3,l.FLOAT,!1,0,0)):0<=c.position&&(l.bindBuffer(l.ARRAY_BUFFER,e.__webglVertexBuffer),g(c.position),l.vertexAttribPointer(c.position,3,l.FLOAT,!1,0,0));if(f.morphTargetForcedOrder.length){var p=0;n=f.morphTargetForcedOrder;
for(h=f.morphTargetInfluences;p<d.numSupportedMorphTargets&&p<n.length;)0<=c["morphTarget"+p]&&(l.bindBuffer(l.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[n[p]]),g(c["morphTarget"+p]),l.vertexAttribPointer(c["morphTarget"+p],3,l.FLOAT,!1,0,0)),0<=c["morphNormal"+p]&&d.morphNormals&&(l.bindBuffer(l.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[n[p]]),g(c["morphNormal"+p]),l.vertexAttribPointer(c["morphNormal"+p],3,l.FLOAT,!1,0,0)),f.__webglMorphTargetInfluences[p]=h[n[p]],p++}else{n=[];h=f.morphTargetInfluences;
var q,r=h.length;for(q=0;q<r;q++)p=h[q],0<p&&n.push([p,q]);n.length>d.numSupportedMorphTargets?(n.sort(m),n.length=d.numSupportedMorphTargets):n.length>d.numSupportedMorphNormals?n.sort(m):0===n.length&&n.push([0,0]);for(p=0;p<d.numSupportedMorphTargets;)n[p]?(q=n[p][1],0<=c["morphTarget"+p]&&(l.bindBuffer(l.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[q]),g(c["morphTarget"+p]),l.vertexAttribPointer(c["morphTarget"+p],3,l.FLOAT,!1,0,0)),0<=c["morphNormal"+p]&&d.morphNormals&&(l.bindBuffer(l.ARRAY_BUFFER,
e.__webglMorphNormalsBuffers[q]),g(c["morphNormal"+p]),l.vertexAttribPointer(c["morphNormal"+p],3,l.FLOAT,!1,0,0)),f.__webglMorphTargetInfluences[p]=h[q]):f.__webglMorphTargetInfluences[p]=0,p++}null!==d.program.uniforms.morphTargetInfluences&&l.uniform1fv(d.program.uniforms.morphTargetInfluences,f.__webglMorphTargetInfluences)}if(b){if(e.__webglCustomAttributesList)for(h=0,n=e.__webglCustomAttributesList.length;h<n;h++)c=e.__webglCustomAttributesList[h],0<=a[c.buffer.belongsToAttribute]&&(l.bindBuffer(l.ARRAY_BUFFER,
c.buffer),g(a[c.buffer.belongsToAttribute]),l.vertexAttribPointer(a[c.buffer.belongsToAttribute],c.size,l.FLOAT,!1,0,0));0<=a.color&&(0<f.geometry.colors.length||0<f.geometry.faces.length?(l.bindBuffer(l.ARRAY_BUFFER,e.__webglColorBuffer),g(a.color),l.vertexAttribPointer(a.color,3,l.FLOAT,!1,0,0)):d.defaultAttributeValues&&l.vertexAttrib3fv(a.color,d.defaultAttributeValues.color));0<=a.normal&&(l.bindBuffer(l.ARRAY_BUFFER,e.__webglNormalBuffer),g(a.normal),l.vertexAttribPointer(a.normal,3,l.FLOAT,
!1,0,0));0<=a.tangent&&(l.bindBuffer(l.ARRAY_BUFFER,e.__webglTangentBuffer),g(a.tangent),l.vertexAttribPointer(a.tangent,4,l.FLOAT,!1,0,0));0<=a.uv&&(f.geometry.faceVertexUvs[0]?(l.bindBuffer(l.ARRAY_BUFFER,e.__webglUVBuffer),g(a.uv),l.vertexAttribPointer(a.uv,2,l.FLOAT,!1,0,0)):d.defaultAttributeValues&&l.vertexAttrib2fv(a.uv,d.defaultAttributeValues.uv));0<=a.uv2&&(f.geometry.faceVertexUvs[1]?(l.bindBuffer(l.ARRAY_BUFFER,e.__webglUV2Buffer),g(a.uv2),l.vertexAttribPointer(a.uv2,2,l.FLOAT,!1,0,0)):
d.defaultAttributeValues&&l.vertexAttrib2fv(a.uv2,d.defaultAttributeValues.uv2));d.skinning&&0<=a.skinIndex&&0<=a.skinWeight&&(l.bindBuffer(l.ARRAY_BUFFER,e.__webglSkinIndicesBuffer),g(a.skinIndex),l.vertexAttribPointer(a.skinIndex,4,l.FLOAT,!1,0,0),l.bindBuffer(l.ARRAY_BUFFER,e.__webglSkinWeightsBuffer),g(a.skinWeight),l.vertexAttribPointer(a.skinWeight,4,l.FLOAT,!1,0,0));0<=a.lineDistance&&(l.bindBuffer(l.ARRAY_BUFFER,e.__webglLineDistanceBuffer),g(a.lineDistance),l.vertexAttribPointer(a.lineDistance,
1,l.FLOAT,!1,0,0))}f instanceof THREE.Mesh?(d.wireframe?(K(d.wireframeLinewidth),b&&l.bindBuffer(l.ELEMENT_ARRAY_BUFFER,e.__webglLineBuffer),l.drawElements(l.LINES,e.__webglLineCount,l.UNSIGNED_SHORT,0)):(b&&l.bindBuffer(l.ELEMENT_ARRAY_BUFFER,e.__webglFaceBuffer),l.drawElements(l.TRIANGLES,e.__webglFaceCount,l.UNSIGNED_SHORT,0)),I.info.render.calls++,I.info.render.vertices+=e.__webglFaceCount,I.info.render.faces+=e.__webglFaceCount/3):f instanceof THREE.Line?(f=f.type===THREE.LineStrip?l.LINE_STRIP:
l.LINES,K(d.linewidth),l.drawArrays(f,0,e.__webglLineCount),I.info.render.calls++):f instanceof THREE.ParticleSystem&&(l.drawArrays(l.POINTS,0,e.__webglParticleCount),I.info.render.calls++,I.info.render.points+=e.__webglParticleCount)}};this.render=function(a,b,c,d){if(!1===b instanceof THREE.Camera)THREE.onerror("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else{var e,f,g,k,m=a.__lights,p=a.fog;Aa=-1;ea=!0;!0===a.autoUpdate&&a.updateMatrixWorld();void 0===b.parent&&b.updateMatrixWorld();
b.matrixWorldInverse.getInverse(b.matrixWorld);ra.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);Ba.setFromMatrix(ra);this.autoUpdateObjects&&this.initWebGLObjects(a);n(this.renderPluginsPre,a,b);I.info.render.calls=0;I.info.render.vertices=0;I.info.render.faces=0;I.info.render.points=0;this.setRenderTarget(c);(this.autoClear||d)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil);k=a.__webglObjects;d=0;for(e=k.length;d<e;d++)if(f=k[d],g=f.object,f.id=d,f.render=
!1,g.visible&&(!(g instanceof THREE.Mesh||g instanceof THREE.ParticleSystem)||!g.frustumCulled||Ba.intersectsObject(g))){var r=g;r._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,r.matrixWorld);r._normalMatrix.getNormalMatrix(r._modelViewMatrix);var r=f,t=r.object,u=r.buffer,w=t.geometry,t=t.material;t instanceof THREE.MeshFaceMaterial?(t=t.materials[w instanceof THREE.BufferGeometry?0:u.materialIndex],t.transparent?(r.transparent=t,r.opaque=null):(r.opaque=t,r.transparent=null)):t&&(t.transparent?
(r.transparent=t,r.opaque=null):(r.opaque=t,r.transparent=null));f.render=!0;!0===this.sortObjects&&(null!==g.renderDepth?f.z=g.renderDepth:(ia.setFromMatrixPosition(g.matrixWorld),ia.applyProjection(ra),f.z=ia.z))}this.sortObjects&&k.sort(h);k=a.__webglObjectsImmediate;d=0;for(e=k.length;d<e;d++)f=k[d],g=f.object,g.visible&&(g._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,g.matrixWorld),g._normalMatrix.getNormalMatrix(g._modelViewMatrix),g=f.object.material,g.transparent?(f.transparent=
g,f.opaque=null):(f.opaque=g,f.transparent=null));a.overrideMaterial?(d=a.overrideMaterial,this.setBlending(d.blending,d.blendEquation,d.blendSrc,d.blendDst),this.setDepthTest(d.depthTest),this.setDepthWrite(d.depthWrite),A(d.polygonOffset,d.polygonOffsetFactor,d.polygonOffsetUnits),q(a.__webglObjects,!1,"",b,m,p,!0,d),s(a.__webglObjectsImmediate,"",b,m,p,!1,d)):(d=null,this.setBlending(THREE.NoBlending),q(a.__webglObjects,!0,"opaque",b,m,p,!1,d),s(a.__webglObjectsImmediate,"opaque",b,m,p,!1,d),q(a.__webglObjects,
!1,"transparent",b,m,p,!0,d),s(a.__webglObjectsImmediate,"transparent",b,m,p,!0,d));n(this.renderPluginsPost,a,b);c&&c.generateMipmaps&&c.minFilter!==THREE.NearestFilter&&c.minFilter!==THREE.LinearFilter&&THREE.isPowerOfTwo(c.width)&&THREE.isPowerOfTwo(c.height)&&(c instanceof THREE.WebGLRenderTargetCube?(l.bindTexture(l.TEXTURE_CUBE_MAP,c.__webglTexture),l.generateMipmap(l.TEXTURE_CUBE_MAP),l.bindTexture(l.TEXTURE_CUBE_MAP,null)):(l.bindTexture(l.TEXTURE_2D,c.__webglTexture),l.generateMipmap(l.TEXTURE_2D),
l.bindTexture(l.TEXTURE_2D,null)));this.setDepthTest(!0);this.setDepthWrite(!0)}};this.renderImmediateObject=function(a,b,c,d,e){var f=B(a,b,c,d,e);ta=-1;I.setMaterialFaces(d);e.immediateRenderCallback?e.immediateRenderCallback(f,l,Ba):e.render(function(a){I.renderBufferImmediate(a,f,d)})};this.initWebGLObjects=function(a){a.__webglObjects||(a.__webglObjects=[],a.__webglObjectsImmediate=[],a.__webglSprites=[],a.__webglFlares=[]);for(;a.__objectsAdded.length;)r(a.__objectsAdded[0],a),a.__objectsAdded.splice(0,
1);for(;a.__objectsRemoved.length;)v(a.__objectsRemoved[0],a),a.__objectsRemoved.splice(0,1);for(var b=0,f=a.__webglObjects.length;b<f;b++){var g=a.__webglObjects[b].object;void 0===g.__webglInit&&(void 0!==g.__webglActive&&v(g,a),r(g,a));var h=g,k=h.geometry,n=void 0,q=void 0,s=void 0;if(k instanceof THREE.BufferGeometry){var t=l.DYNAMIC_DRAW,u=k.attributes,x=void 0,B=void 0;for(x in u)B=u[x],B.needsUpdate&&("index"===x?(l.bindBuffer(l.ELEMENT_ARRAY_BUFFER,B.buffer),l.bufferData(l.ELEMENT_ARRAY_BUFFER,
B.array,t)):(l.bindBuffer(l.ARRAY_BUFFER,B.buffer),l.bufferData(l.ARRAY_BUFFER,B.array,t)),B.needsUpdate=!1)}else if(h instanceof THREE.Mesh){for(var y=0,C=k.geometryGroupsList.length;y<C;y++)if(n=k.geometryGroupsList[y],s=d(h,n),k.buffersNeedUpdate&&c(n,h),q=s.attributes&&p(s),k.verticesNeedUpdate||k.morphTargetsNeedUpdate||k.elementsNeedUpdate||k.uvsNeedUpdate||k.normalsNeedUpdate||k.colorsNeedUpdate||k.tangentsNeedUpdate||q){var z=n,J=h,A=l.DYNAMIC_DRAW,D=!k.dynamic,L=s;if(z.__inittedArrays){var H=
e(L),F=L.vertexColors?L.vertexColors:!1,K=H===THREE.SmoothShading,E=void 0,G=void 0,N=void 0,I=void 0,Q=void 0,P=void 0,la=void 0,V=void 0,U=void 0,ta=void 0,aa=void 0,T=void 0,S=void 0,R=void 0,Y=void 0,pa=void 0,Z=void 0,Fa=void 0,ba=void 0,ja=void 0,Aa=void 0,da=void 0,ea=void 0,Ca=void 0,ga=void 0,ha=void 0,na=void 0,ka=void 0,qa=void 0,ca=void 0,Ja=void 0,za=void 0,Ba=void 0,La=void 0,ma=void 0,Ma=void 0,wa=void 0,ya=void 0,Ka=void 0,Oa=void 0,Da=0,Ea=0,Pa=0,Qa=0,Ra=0,Ga=0,Ya=0,Na=0,eb=0,xa=
0,Ha=0,O=0,Xa=void 0,jb=z.__vertexArray,Za=z.__uvArray,db=z.__uv2Array,Sa=z.__normalArray,$a=z.__tangentArray,kb=z.__colorArray,ab=z.__skinIndexArray,bb=z.__skinWeightArray,hb=z.__morphTargetsArrays,ib=z.__morphNormalsArrays,tb=z.__webglCustomAttributesList,M=void 0,Mb=z.__faceArray,ub=z.__lineArray,Ta=J.geometry,Ab=Ta.elementsNeedUpdate,xb=Ta.uvsNeedUpdate,Ib=Ta.normalsNeedUpdate,Jb=Ta.tangentsNeedUpdate,Kb=Ta.colorsNeedUpdate,Lb=Ta.morphTargetsNeedUpdate,ac=Ta.vertices,fa=z.faces3,lb=Ta.faces,Bb=
Ta.faceVertexUvs[0],Cb=Ta.faceVertexUvs[1],bc=Ta.skinIndices,Nb=Ta.skinWeights,Ob=Ta.morphTargets,Db=Ta.morphNormals;if(Ta.verticesNeedUpdate){E=0;for(G=fa.length;E<G;E++)I=lb[fa[E]],T=ac[I.a],S=ac[I.b],R=ac[I.c],jb[Ea]=T.x,jb[Ea+1]=T.y,jb[Ea+2]=T.z,jb[Ea+3]=S.x,jb[Ea+4]=S.y,jb[Ea+5]=S.z,jb[Ea+6]=R.x,jb[Ea+7]=R.y,jb[Ea+8]=R.z,Ea+=9;l.bindBuffer(l.ARRAY_BUFFER,z.__webglVertexBuffer);l.bufferData(l.ARRAY_BUFFER,jb,A)}if(Lb)for(ma=0,Ma=Ob.length;ma<Ma;ma++){E=Ha=0;for(G=fa.length;E<G;E++)Ka=fa[E],I=
lb[Ka],T=Ob[ma].vertices[I.a],S=Ob[ma].vertices[I.b],R=Ob[ma].vertices[I.c],wa=hb[ma],wa[Ha]=T.x,wa[Ha+1]=T.y,wa[Ha+2]=T.z,wa[Ha+3]=S.x,wa[Ha+4]=S.y,wa[Ha+5]=S.z,wa[Ha+6]=R.x,wa[Ha+7]=R.y,wa[Ha+8]=R.z,L.morphNormals&&(K?(Oa=Db[ma].vertexNormals[Ka],Fa=Oa.a,ba=Oa.b,ja=Oa.c):ja=ba=Fa=Db[ma].faceNormals[Ka],ya=ib[ma],ya[Ha]=Fa.x,ya[Ha+1]=Fa.y,ya[Ha+2]=Fa.z,ya[Ha+3]=ba.x,ya[Ha+4]=ba.y,ya[Ha+5]=ba.z,ya[Ha+6]=ja.x,ya[Ha+7]=ja.y,ya[Ha+8]=ja.z),Ha+=9;l.bindBuffer(l.ARRAY_BUFFER,z.__webglMorphTargetsBuffers[ma]);
l.bufferData(l.ARRAY_BUFFER,hb[ma],A);L.morphNormals&&(l.bindBuffer(l.ARRAY_BUFFER,z.__webglMorphNormalsBuffers[ma]),l.bufferData(l.ARRAY_BUFFER,ib[ma],A))}if(Nb.length){E=0;for(G=fa.length;E<G;E++)I=lb[fa[E]],Ca=Nb[I.a],ga=Nb[I.b],ha=Nb[I.c],bb[xa]=Ca.x,bb[xa+1]=Ca.y,bb[xa+2]=Ca.z,bb[xa+3]=Ca.w,bb[xa+4]=ga.x,bb[xa+5]=ga.y,bb[xa+6]=ga.z,bb[xa+7]=ga.w,bb[xa+8]=ha.x,bb[xa+9]=ha.y,bb[xa+10]=ha.z,bb[xa+11]=ha.w,na=bc[I.a],ka=bc[I.b],qa=bc[I.c],ab[xa]=na.x,ab[xa+1]=na.y,ab[xa+2]=na.z,ab[xa+3]=na.w,ab[xa+
4]=ka.x,ab[xa+5]=ka.y,ab[xa+6]=ka.z,ab[xa+7]=ka.w,ab[xa+8]=qa.x,ab[xa+9]=qa.y,ab[xa+10]=qa.z,ab[xa+11]=qa.w,xa+=12;0<xa&&(l.bindBuffer(l.ARRAY_BUFFER,z.__webglSkinIndicesBuffer),l.bufferData(l.ARRAY_BUFFER,ab,A),l.bindBuffer(l.ARRAY_BUFFER,z.__webglSkinWeightsBuffer),l.bufferData(l.ARRAY_BUFFER,bb,A))}if(Kb&&F){E=0;for(G=fa.length;E<G;E++)I=lb[fa[E]],la=I.vertexColors,V=I.color,3===la.length&&F===THREE.VertexColors?(Aa=la[0],da=la[1],ea=la[2]):ea=da=Aa=V,kb[eb]=Aa.r,kb[eb+1]=Aa.g,kb[eb+2]=Aa.b,kb[eb+
3]=da.r,kb[eb+4]=da.g,kb[eb+5]=da.b,kb[eb+6]=ea.r,kb[eb+7]=ea.g,kb[eb+8]=ea.b,eb+=9;0<eb&&(l.bindBuffer(l.ARRAY_BUFFER,z.__webglColorBuffer),l.bufferData(l.ARRAY_BUFFER,kb,A))}if(Jb&&Ta.hasTangents){for(var cc=new THREE.Vector3(0,0,0),E=0,G=fa.length;E<G;E++)I=lb[fa[E]],U=I.vertexTangents,Y=U[0]||cc,pa=U[1]||cc,Z=U[2]||cc,$a[Ya]=Y.x,$a[Ya+1]=Y.y,$a[Ya+2]=Y.z,$a[Ya+3]=Y.w,$a[Ya+4]=pa.x,$a[Ya+5]=pa.y,$a[Ya+6]=pa.z,$a[Ya+7]=pa.w,$a[Ya+8]=Z.x,$a[Ya+9]=Z.y,$a[Ya+10]=Z.z,$a[Ya+11]=Z.w,Ya+=12;l.bindBuffer(l.ARRAY_BUFFER,
z.__webglTangentBuffer);l.bufferData(l.ARRAY_BUFFER,$a,A)}if(Ib&&H){E=0;for(G=fa.length;E<G;E++)if(I=lb[fa[E]],Q=I.vertexNormals,P=I.normal,3===Q.length&&K)for(ca=0;3>ca;ca++)za=Q[ca],Sa[Ga]=za.x,Sa[Ga+1]=za.y,Sa[Ga+2]=za.z,Ga+=3;else for(ca=0;3>ca;ca++)Sa[Ga]=P.x,Sa[Ga+1]=P.y,Sa[Ga+2]=P.z,Ga+=3;l.bindBuffer(l.ARRAY_BUFFER,z.__webglNormalBuffer);l.bufferData(l.ARRAY_BUFFER,Sa,A)}if(xb&&Bb){E=0;for(G=fa.length;E<G;E++)if(N=fa[E],ta=Bb[N],void 0!==ta)for(ca=0;3>ca;ca++)Ba=ta[ca],Za[Pa]=Ba.x,Za[Pa+1]=
Ba.y,Pa+=2;0<Pa&&(l.bindBuffer(l.ARRAY_BUFFER,z.__webglUVBuffer),l.bufferData(l.ARRAY_BUFFER,Za,A))}if(xb&&Cb){E=0;for(G=fa.length;E<G;E++)if(N=fa[E],aa=Cb[N],void 0!==aa)for(ca=0;3>ca;ca++)La=aa[ca],db[Qa]=La.x,db[Qa+1]=La.y,Qa+=2;0<Qa&&(l.bindBuffer(l.ARRAY_BUFFER,z.__webglUV2Buffer),l.bufferData(l.ARRAY_BUFFER,db,A))}if(Ab){E=0;for(G=fa.length;E<G;E++)Mb[Ra]=Da,Mb[Ra+1]=Da+1,Mb[Ra+2]=Da+2,Ra+=3,ub[Na]=Da,ub[Na+1]=Da+1,ub[Na+2]=Da,ub[Na+3]=Da+2,ub[Na+4]=Da+1,ub[Na+5]=Da+2,Na+=6,Da+=3;l.bindBuffer(l.ELEMENT_ARRAY_BUFFER,
z.__webglFaceBuffer);l.bufferData(l.ELEMENT_ARRAY_BUFFER,Mb,A);l.bindBuffer(l.ELEMENT_ARRAY_BUFFER,z.__webglLineBuffer);l.bufferData(l.ELEMENT_ARRAY_BUFFER,ub,A)}if(tb)for(ca=0,Ja=tb.length;ca<Ja;ca++)if(M=tb[ca],M.__original.needsUpdate){O=0;if(1===M.size)if(void 0===M.boundTo||"vertices"===M.boundTo)for(E=0,G=fa.length;E<G;E++)I=lb[fa[E]],M.array[O]=M.value[I.a],M.array[O+1]=M.value[I.b],M.array[O+2]=M.value[I.c],O+=3;else{if("faces"===M.boundTo)for(E=0,G=fa.length;E<G;E++)Xa=M.value[fa[E]],M.array[O]=
Xa,M.array[O+1]=Xa,M.array[O+2]=Xa,O+=3}else if(2===M.size)if(void 0===M.boundTo||"vertices"===M.boundTo)for(E=0,G=fa.length;E<G;E++)I=lb[fa[E]],T=M.value[I.a],S=M.value[I.b],R=M.value[I.c],M.array[O]=T.x,M.array[O+1]=T.y,M.array[O+2]=S.x,M.array[O+3]=S.y,M.array[O+4]=R.x,M.array[O+5]=R.y,O+=6;else{if("faces"===M.boundTo)for(E=0,G=fa.length;E<G;E++)R=S=T=Xa=M.value[fa[E]],M.array[O]=T.x,M.array[O+1]=T.y,M.array[O+2]=S.x,M.array[O+3]=S.y,M.array[O+4]=R.x,M.array[O+5]=R.y,O+=6}else if(3===M.size){var va;
va="c"===M.type?["r","g","b"]:["x","y","z"];if(void 0===M.boundTo||"vertices"===M.boundTo)for(E=0,G=fa.length;E<G;E++)I=lb[fa[E]],T=M.value[I.a],S=M.value[I.b],R=M.value[I.c],M.array[O]=T[va[0]],M.array[O+1]=T[va[1]],M.array[O+2]=T[va[2]],M.array[O+3]=S[va[0]],M.array[O+4]=S[va[1]],M.array[O+5]=S[va[2]],M.array[O+6]=R[va[0]],M.array[O+7]=R[va[1]],M.array[O+8]=R[va[2]],O+=9;else if("faces"===M.boundTo)for(E=0,G=fa.length;E<G;E++)R=S=T=Xa=M.value[fa[E]],M.array[O]=T[va[0]],M.array[O+1]=T[va[1]],M.array[O+
2]=T[va[2]],M.array[O+3]=S[va[0]],M.array[O+4]=S[va[1]],M.array[O+5]=S[va[2]],M.array[O+6]=R[va[0]],M.array[O+7]=R[va[1]],M.array[O+8]=R[va[2]],O+=9;else if("faceVertices"===M.boundTo)for(E=0,G=fa.length;E<G;E++)Xa=M.value[fa[E]],T=Xa[0],S=Xa[1],R=Xa[2],M.array[O]=T[va[0]],M.array[O+1]=T[va[1]],M.array[O+2]=T[va[2]],M.array[O+3]=S[va[0]],M.array[O+4]=S[va[1]],M.array[O+5]=S[va[2]],M.array[O+6]=R[va[0]],M.array[O+7]=R[va[1]],M.array[O+8]=R[va[2]],O+=9}else if(4===M.size)if(void 0===M.boundTo||"vertices"===
M.boundTo)for(E=0,G=fa.length;E<G;E++)I=lb[fa[E]],T=M.value[I.a],S=M.value[I.b],R=M.value[I.c],M.array[O]=T.x,M.array[O+1]=T.y,M.array[O+2]=T.z,M.array[O+3]=T.w,M.array[O+4]=S.x,M.array[O+5]=S.y,M.array[O+6]=S.z,M.array[O+7]=S.w,M.array[O+8]=R.x,M.array[O+9]=R.y,M.array[O+10]=R.z,M.array[O+11]=R.w,O+=12;else if("faces"===M.boundTo)for(E=0,G=fa.length;E<G;E++)R=S=T=Xa=M.value[fa[E]],M.array[O]=T.x,M.array[O+1]=T.y,M.array[O+2]=T.z,M.array[O+3]=T.w,M.array[O+4]=S.x,M.array[O+5]=S.y,M.array[O+6]=S.z,
M.array[O+7]=S.w,M.array[O+8]=R.x,M.array[O+9]=R.y,M.array[O+10]=R.z,M.array[O+11]=R.w,O+=12;else if("faceVertices"===M.boundTo)for(E=0,G=fa.length;E<G;E++)Xa=M.value[fa[E]],T=Xa[0],S=Xa[1],R=Xa[2],M.array[O]=T.x,M.array[O+1]=T.y,M.array[O+2]=T.z,M.array[O+3]=T.w,M.array[O+4]=S.x,M.array[O+5]=S.y,M.array[O+6]=S.z,M.array[O+7]=S.w,M.array[O+8]=R.x,M.array[O+9]=R.y,M.array[O+10]=R.z,M.array[O+11]=R.w,O+=12;l.bindBuffer(l.ARRAY_BUFFER,M.buffer);l.bufferData(l.ARRAY_BUFFER,M.array,A)}D&&(delete z.__inittedArrays,
delete z.__colorArray,delete z.__normalArray,delete z.__tangentArray,delete z.__uvArray,delete z.__uv2Array,delete z.__faceArray,delete z.__vertexArray,delete z.__lineArray,delete z.__skinIndexArray,delete z.__skinWeightArray)}}k.verticesNeedUpdate=!1;k.morphTargetsNeedUpdate=!1;k.elementsNeedUpdate=!1;k.uvsNeedUpdate=!1;k.normalsNeedUpdate=!1;k.colorsNeedUpdate=!1;k.tangentsNeedUpdate=!1;k.buffersNeedUpdate=!1;s.attributes&&w(s)}else if(h instanceof THREE.Line){s=d(h,k);q=s.attributes&&p(s);if(k.verticesNeedUpdate||
k.colorsNeedUpdate||k.lineDistancesNeedUpdate||q){var cb=k,Pb=l.DYNAMIC_DRAW,Eb=void 0,Fb=void 0,Gb=void 0,Qb=void 0,ua=void 0,Rb=void 0,hc=cb.vertices,ic=cb.colors,jc=cb.lineDistances,Wb=hc.length,Xb=ic.length,Yb=jc.length,Sb=cb.__vertexArray,Tb=cb.__colorArray,kc=cb.__lineDistanceArray,Zb=cb.colorsNeedUpdate,$b=cb.lineDistancesNeedUpdate,dc=cb.__webglCustomAttributesList,Ub=void 0,lc=void 0,Ia=void 0,yb=void 0,Ua=void 0,sa=void 0;if(cb.verticesNeedUpdate){for(Eb=0;Eb<Wb;Eb++)Qb=hc[Eb],ua=3*Eb,Sb[ua]=
Qb.x,Sb[ua+1]=Qb.y,Sb[ua+2]=Qb.z;l.bindBuffer(l.ARRAY_BUFFER,cb.__webglVertexBuffer);l.bufferData(l.ARRAY_BUFFER,Sb,Pb)}if(Zb){for(Fb=0;Fb<Xb;Fb++)Rb=ic[Fb],ua=3*Fb,Tb[ua]=Rb.r,Tb[ua+1]=Rb.g,Tb[ua+2]=Rb.b;l.bindBuffer(l.ARRAY_BUFFER,cb.__webglColorBuffer);l.bufferData(l.ARRAY_BUFFER,Tb,Pb)}if($b){for(Gb=0;Gb<Yb;Gb++)kc[Gb]=jc[Gb];l.bindBuffer(l.ARRAY_BUFFER,cb.__webglLineDistanceBuffer);l.bufferData(l.ARRAY_BUFFER,kc,Pb)}if(dc)for(Ub=0,lc=dc.length;Ub<lc;Ub++)if(sa=dc[Ub],sa.needsUpdate&&(void 0===
sa.boundTo||"vertices"===sa.boundTo)){ua=0;yb=sa.value.length;if(1===sa.size)for(Ia=0;Ia<yb;Ia++)sa.array[Ia]=sa.value[Ia];else if(2===sa.size)for(Ia=0;Ia<yb;Ia++)Ua=sa.value[Ia],sa.array[ua]=Ua.x,sa.array[ua+1]=Ua.y,ua+=2;else if(3===sa.size)if("c"===sa.type)for(Ia=0;Ia<yb;Ia++)Ua=sa.value[Ia],sa.array[ua]=Ua.r,sa.array[ua+1]=Ua.g,sa.array[ua+2]=Ua.b,ua+=3;else for(Ia=0;Ia<yb;Ia++)Ua=sa.value[Ia],sa.array[ua]=Ua.x,sa.array[ua+1]=Ua.y,sa.array[ua+2]=Ua.z,ua+=3;else if(4===sa.size)for(Ia=0;Ia<yb;Ia++)Ua=
sa.value[Ia],sa.array[ua]=Ua.x,sa.array[ua+1]=Ua.y,sa.array[ua+2]=Ua.z,sa.array[ua+3]=Ua.w,ua+=4;l.bindBuffer(l.ARRAY_BUFFER,sa.buffer);l.bufferData(l.ARRAY_BUFFER,sa.array,Pb)}}k.verticesNeedUpdate=!1;k.colorsNeedUpdate=!1;k.lineDistancesNeedUpdate=!1;s.attributes&&w(s)}else if(h instanceof THREE.ParticleSystem){s=d(h,k);q=s.attributes&&p(s);if(k.verticesNeedUpdate||k.colorsNeedUpdate||h.sortParticles||q){var mb=k,ec=l.DYNAMIC_DRAW,Hb=h,Va=void 0,nb=void 0,ob=void 0,X=void 0,pb=void 0,sb=void 0,
Vb=mb.vertices,fc=Vb.length,gc=mb.colors,mc=gc.length,vb=mb.__vertexArray,wb=mb.__colorArray,qb=mb.__sortArray,nc=mb.verticesNeedUpdate,oc=mb.colorsNeedUpdate,rb=mb.__webglCustomAttributesList,fb=void 0,zb=void 0,$=void 0,gb=void 0,oa=void 0,W=void 0;if(Hb.sortParticles){Wa.copy(ra);Wa.multiply(Hb.matrixWorld);for(Va=0;Va<fc;Va++)ob=Vb[Va],ia.copy(ob),ia.applyProjection(Wa),qb[Va]=[ia.z,Va];qb.sort(m);for(Va=0;Va<fc;Va++)ob=Vb[qb[Va][1]],X=3*Va,vb[X]=ob.x,vb[X+1]=ob.y,vb[X+2]=ob.z;for(nb=0;nb<mc;nb++)X=
3*nb,sb=gc[qb[nb][1]],wb[X]=sb.r,wb[X+1]=sb.g,wb[X+2]=sb.b;if(rb)for(fb=0,zb=rb.length;fb<zb;fb++)if(W=rb[fb],void 0===W.boundTo||"vertices"===W.boundTo)if(X=0,gb=W.value.length,1===W.size)for($=0;$<gb;$++)pb=qb[$][1],W.array[$]=W.value[pb];else if(2===W.size)for($=0;$<gb;$++)pb=qb[$][1],oa=W.value[pb],W.array[X]=oa.x,W.array[X+1]=oa.y,X+=2;else if(3===W.size)if("c"===W.type)for($=0;$<gb;$++)pb=qb[$][1],oa=W.value[pb],W.array[X]=oa.r,W.array[X+1]=oa.g,W.array[X+2]=oa.b,X+=3;else for($=0;$<gb;$++)pb=
qb[$][1],oa=W.value[pb],W.array[X]=oa.x,W.array[X+1]=oa.y,W.array[X+2]=oa.z,X+=3;else if(4===W.size)for($=0;$<gb;$++)pb=qb[$][1],oa=W.value[pb],W.array[X]=oa.x,W.array[X+1]=oa.y,W.array[X+2]=oa.z,W.array[X+3]=oa.w,X+=4}else{if(nc)for(Va=0;Va<fc;Va++)ob=Vb[Va],X=3*Va,vb[X]=ob.x,vb[X+1]=ob.y,vb[X+2]=ob.z;if(oc)for(nb=0;nb<mc;nb++)sb=gc[nb],X=3*nb,wb[X]=sb.r,wb[X+1]=sb.g,wb[X+2]=sb.b;if(rb)for(fb=0,zb=rb.length;fb<zb;fb++)if(W=rb[fb],W.needsUpdate&&(void 0===W.boundTo||"vertices"===W.boundTo))if(gb=
W.value.length,X=0,1===W.size)for($=0;$<gb;$++)W.array[$]=W.value[$];else if(2===W.size)for($=0;$<gb;$++)oa=W.value[$],W.array[X]=oa.x,W.array[X+1]=oa.y,X+=2;else if(3===W.size)if("c"===W.type)for($=0;$<gb;$++)oa=W.value[$],W.array[X]=oa.r,W.array[X+1]=oa.g,W.array[X+2]=oa.b,X+=3;else for($=0;$<gb;$++)oa=W.value[$],W.array[X]=oa.x,W.array[X+1]=oa.y,W.array[X+2]=oa.z,X+=3;else if(4===W.size)for($=0;$<gb;$++)oa=W.value[$],W.array[X]=oa.x,W.array[X+1]=oa.y,W.array[X+2]=oa.z,W.array[X+3]=oa.w,X+=4}if(nc||
Hb.sortParticles)l.bindBuffer(l.ARRAY_BUFFER,mb.__webglVertexBuffer),l.bufferData(l.ARRAY_BUFFER,vb,ec);if(oc||Hb.sortParticles)l.bindBuffer(l.ARRAY_BUFFER,mb.__webglColorBuffer),l.bufferData(l.ARRAY_BUFFER,wb,ec);if(rb)for(fb=0,zb=rb.length;fb<zb;fb++)if(W=rb[fb],W.needsUpdate||Hb.sortParticles)l.bindBuffer(l.ARRAY_BUFFER,W.buffer),l.bufferData(l.ARRAY_BUFFER,W.array,ec)}k.verticesNeedUpdate=!1;k.colorsNeedUpdate=!1;s.attributes&&w(s)}}};this.initMaterial=function(a,b,c,d){var e,f,g,h,k;a.addEventListener("dispose",
Bb);var m,n,p,q;a instanceof THREE.MeshDepthMaterial?q="depth":a instanceof THREE.MeshNormalMaterial?q="normal":a instanceof THREE.MeshBasicMaterial?q="basic":a instanceof THREE.MeshLambertMaterial?q="lambert":a instanceof THREE.MeshPhongMaterial?q="phong":a instanceof THREE.MeshPhysicalMaterial?q="physical":a instanceof THREE.LineBasicMaterial?q="basic":a instanceof THREE.LineDashedMaterial?q="dashed":a instanceof THREE.ParticleSystemMaterial&&(q="particle_basic");q&&THREE.ShaderLib[q]&&(e=THREE.ShaderLib[q],
a.uniforms=THREE.UniformsUtils.clone(e.uniforms),a.vertexShader=e.vertexShader,a.fragmentShader=e.fragmentShader);q||(q=a.shaderID);p=k=h=g=f=e=0;for(var r=b.length;p<r;p++){var s=b[p];s.onlyShadow||!1===s.visible||(s instanceof THREE.DirectionalLight&&e++,s instanceof THREE.PointLight&&f++,s instanceof THREE.SpotLight&&g++,s instanceof THREE.HemisphereLight&&h++,s instanceof THREE.AreaLight&&k++)}r=p=0;for(s=b.length;r<s;r++){var t=b[r];t.castShadow&&(t instanceof THREE.SpotLight&&p++,t instanceof
THREE.DirectionalLight&&!t.shadowCascade&&p++)}b=p;if(Ab&&d&&d.useVertexTexture)p=1024;else if(p=l.getParameter(l.MAX_VERTEX_UNIFORM_VECTORS),p=Math.floor((p-20)/4),void 0!==d&&d instanceof THREE.SkinnedMesh&&(p=Math.min(d.bones.length,p),p<d.bones.length))THREE.onwarning("WebGLRenderer: too many bones - "+d.bones.length+", this GPU supports just "+p+" (try OpenGL instead of ANGLE)");c={map:!!a.map,opacityMap:!!a.opacityMap,envMap:!!a.envMap,diffuseEnvMap:!!a.diffuseEnvMap,lightMap:!!a.lightMap,emissiveMap:!!a.emissiveMap,
bumpMap:!!a.bumpMap,normalMap:!!a.normalMap,specularMap:!!a.specularMap,reflectivityMap:!!a.reflectivityMap,roughnessMap:!!a.roughnessMap,translucencyMap:!!a.translucencyMap,metallicMap:!!a.metallicMap,falloffMap:!!a.falloffMap,clearCoat:void 0!==a.clearCoat&&0!==a.clearCoat,anisotropy:void 0!==a.anisotropy&&0!==a.anisotropy||!!a.anisotropyMap,anisotropyMap:!!a.anisotropyMap,anisotropyRotation:void 0!==a.anisotropyRotation&&0!==a.anisotropyRotation||!!a.anisotropyRotationMap,anisotropyRotationMap:!!a.anisotropyRotationMap,
vertexColors:a.vertexColors,fog:c,useFog:a.fog,fogExp:c instanceof THREE.FogExp2,sizeAttenuation:!!a.sizeAttenuation,skinning:a.skinning,maxBones:p,useVertexTexture:Ab&&d&&d.useVertexTexture,morphTargets:a.morphTargets,morphNormals:a.morphNormals,maxMorphTargets:this.maxMorphTargets,maxMorphNormals:this.maxMorphNormals,maxDirLights:e,maxPointLights:f,maxSpotLights:g,maxHemiLights:h,maxAreaLights:k,maxShadows:b,shadowMapEnabled:this.shadowMapEnabled&&d.receiveShadow&&0<b,shadowMapType:this.shadowMapType,
shadowMapDebug:this.shadowMapDebug,shadowMapCascade:this.shadowMapCascade,translucency:a.translucency&&0<a.translucency.getHex(),alphaTest:a.alphaTest,falloff:a.falloff||!1,wrapAround:a.wrapAround,doubleSided:a.side===THREE.DoubleSide,flipSided:a.side===THREE.BackSide};a:{b=q;e=a.fragmentShader;f=a.vertexShader;d=a.uniforms;q=a.attributes;k=a.defines;g=a.index0AttributeName;var u,w,v;h=[];p=[];b?(p.push(b),h.push(b)):(p.push(e),p.push(f));for(w in k)p.push(w),p.push(k[w]),h.push(w),h.push(k[w]);for(u in c)p.push(u),
p.push(c[u]),h.push(u),h.push(c[u]);w=p.join();h=h.join();u=0;for(p=U.length;u<p;u++)if(r=U[u],r.code.length===w.length&&r.code===w){r.usedTimes++;n=r.program;break a}u="SHADOWMAP_TYPE_BASIC";c.shadowMapType===THREE.PCFShadowMap?u="SHADOWMAP_TYPE_PCF":c.shadowMapType===THREE.PCFSoftShadowMap&&(u="SHADOWMAP_TYPE_PCF_SOFT");p=[];for(v in k)r=k[v],!1!==r&&(r="#define "+v+" "+r,p.push(r));p=p.join("\n");v=l.createProgram();r=null!==ma;k=["precision "+Q+" float;","precision "+Q+" int;",p,tb?"#define VERTEX_TEXTURES":
"",I.gammaInput?"#define GAMMA_INPUT":"",I.gammaOutput?"#define GAMMA_OUTPUT":"","#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_HEMI_LIGHTS "+c.maxHemiLights,"#define MAX_AREA_LIGHTS "+c.maxAreaLights,"#define MAX_SHADOWS "+c.maxShadows,"#define MAX_BONES "+c.maxBones,c.map?"#define USE_MAP":"",c.opacityMap?"#define USE_OPACITYMAP":"",c.falloffMap?"#define USE_FALLOFFMAP":"",c.translucencyMap?"#define USE_TRANSLUCENCYMAP":
"",c.envMap?"#define USE_ENVMAP":"",c.diffuseEnvMap?"#define USE_DIFFUSEENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.emissiveMap?"#define USE_EMISSIVEMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.reflectivityMap?"#define USE_REFLECTIVITYMAP":"",c.roughnessMap?"#define USE_ROUGHNESSMAP":"",c.metallicMap?"#define USE_METALLICMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.vertexColors?"#define USE_COLOR":"",c.clearCoat?"#define CLEARCOAT":"",c.anisotropy?
"#define ANISOTROPY":"",c.anisotropyMap?"#define USE_ANISOTROPYMAP":"",c.anisotropy&&c.anisotropyRotation?"#define ANISOTROPYROTATION":"",c.anisotropy&&c.anisotropyRotationMap?"#define USE_ANISOTROPYROTATIONMAP":"",c.skinning?"#define USE_SKINNING":"",c.useVertexTexture?"#define BONE_TEXTURE":"",c.morphTargets?"#define USE_MORPHTARGETS":"",c.morphNormals?"#define USE_MORPHNORMALS":"",c.wrapAround?"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":"",
c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapEnabled?"#define "+u:"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",c.sizeAttenuation?"#define USE_SIZEATTENUATION":"","uniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\nattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\nattribute vec3 morphTarget0;\nattribute vec3 morphTarget1;\nattribute vec3 morphTarget2;\nattribute vec3 morphTarget3;\n#ifdef USE_MORPHNORMALS\nattribute vec3 morphNormal0;\nattribute vec3 morphNormal1;\nattribute vec3 morphNormal2;\nattribute vec3 morphNormal3;\n#else\nattribute vec3 morphTarget4;\nattribute vec3 morphTarget5;\nattribute vec3 morphTarget6;\nattribute vec3 morphTarget7;\n#endif\n#endif\n#ifdef USE_SKINNING\nattribute vec4 skinIndex;\nattribute vec4 skinWeight;\n#endif\n"].join("\n");
u=["precision "+Q+" float;","precision "+Q+" int;",c.bumpMap||c.normalMap?"#extension GL_OES_standard_derivatives : enable":"",p,"#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_HEMI_LIGHTS "+c.maxHemiLights,"#define MAX_AREA_LIGHTS "+c.maxAreaLights,"#define MAX_SHADOWS "+c.maxShadows,c.alphaTest?"#define ALPHATEST "+c.alphaTest:"",I.gammaInput?"#define GAMMA_INPUT":"",I.gammaOutput?"#define GAMMA_OUTPUT":
"",c.useFog&&c.fog?"#define USE_FOG":"",c.useFog&&c.fogExp?"#define FOG_EXP2":"",c.map?"#define USE_MAP":"",c.opacityMap?"#define USE_OPACITYMAP":"",c.falloffMap?"#define USE_FALLOFFMAP":"",c.translucencyMap?"#define USE_TRANSLUCENCYMAP":"",c.envMap?"#define USE_ENVMAP":"",c.diffuseEnvMap?"#define USE_DIFFUSEENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.emissiveMap?"#define USE_EMISSIVEMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.reflectivityMap?"#define USE_REFLECTIVITYMAP":"",c.roughnessMap?
"#define USE_ROUGHNESSMAP":"",c.metallicMap?"#define USE_METALLICMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.vertexColors?"#define USE_COLOR":"",c.clearCoat?"#define CLEARCOAT":"",c.translucency?"#define TRANSLUCENCY":"",c.anisotropy?"#define ANISOTROPY":"",c.anisotropyMap?"#define USE_ANISOTROPYMAP":"",c.anisotropy&&c.anisotropyRotation?"#define ANISOTROPYROTATION":"",c.anisotropy&&c.anisotropyRotationMap?"#define USE_ANISOTROPYROTATIONMAP":"",c.falloff?
"#define FALLOFF":"",c.wrapAround?"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapEnabled?"#define "+u:"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",r?"#define TEXTURE_CUBE_LOD_EXT":"","uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n");p=L("vertex",k+f,b,h);h=L("fragment",u+e,b,h);l.attachShader(v,p,w);l.attachShader(v,
h,w);void 0!==g&&l.bindAttribLocation(v,0,g);l.linkProgram(v);g=l.getProgramInfoLog(v);!1===l.getProgramParameter(v,l.LINK_STATUS)&&(r=l.getError(),THREE.onerror(b+" shader program error: "+r+"\n "+g,{shaderID:b,programInfo:g,glError:r,vertexShader:k+f,fragmentShader:u+e,getProgramParameter_LINK_STATUS:l.getProgramParameter(v,l.LINK_STATUS),getProgramParameter_VALIDATE_STATUS:l.getProgramParameter(v,l.VALIDATE_STATUS),getProgramParameter_ATTACHED_SHADERS:l.getProgramParameter(v,l.ATTACHED_SHADERS),
getProgramParameter_ACTIVE_ATTRIBUTES:l.getProgramParameter(v,l.ACTIVE_ATTRIBUTES),getProgramParameter_ACTIVE_UNIFORMS:l.getProgramParameter(v,l.ACTIVE_UNIFORMS),gl_MAX_VARYING_VECTORS:l.getParameter(l.MAX_VARYING_VECTORS),gl_MAX_VERTEX_ATTRIBS:l.getParameter(l.MAX_VERTEX_ATTRIBS),gl_MAX_VERTEX_UNIFORM_VECTORS:l.getParameter(l.MAX_VERTEX_UNIFORM_VECTORS),gl_MAX_VERTEX_TEXTURE_IMAGE_UNITS:l.getParameter(l.MAX_VERTEX_TEXTURE_IMAGE_UNITS),gl_MAX_FRAGMENT_UNIFORM_VECTORS:l.getParameter(l.MAX_FRAGMENT_UNIFORM_VECTORS),
gl_MAX_TEXTURE_IMAGE_UNITS:l.getParameter(l.MAX_TEXTURE_IMAGE_UNITS)}));l.deleteShader(h);l.deleteShader(p);v.uniforms={};v.attributes={};var x;u="viewMatrix modelViewMatrix projectionMatrix normalMatrix modelMatrix cameraPosition morphTargetInfluences".split(" ");c.useVertexTexture?(u.push("boneTexture"),u.push("boneTextureWidth"),u.push("boneTextureHeight")):u.push("boneGlobalMatrices");for(x in d)u.push(x);x=u;u=0;for(d=x.length;u<d;u++)b=x[u],v.uniforms[b]=l.getUniformLocation(v,b);u="position normal uv uv2 tangent color skinIndex skinWeight lineDistance".split(" ");
for(x=0;x<c.maxMorphTargets;x++)u.push("morphTarget"+x);for(x=0;x<c.maxMorphNormals;x++)u.push("morphNormal"+x);for(n in q)u.push(n);n=u;x=0;for(u=n.length;x<u;x++)c=n[x],v.attributes[c]=l.getAttribLocation(v,c);v.id=la++;U.push({program:v,code:w,usedTimes:1});I.info.memory.programs=U.length;n=v}a.program=n;x=a.program.attributes;if(a.morphTargets)for(a.numSupportedMorphTargets=0,u="morphTarget",n=0;n<this.maxMorphTargets;n++)v=u+n,0<=x[v]&&a.numSupportedMorphTargets++;if(a.morphNormals)for(a.numSupportedMorphNormals=
0,u="morphNormal",n=0;n<this.maxMorphNormals;n++)v=u+n,0<=x[v]&&a.numSupportedMorphNormals++;a.uniformsList=[];for(m in a.uniforms)a.uniformsList.push([a.uniforms[m],m])};this.setFaceCulling=function(a,b){a===THREE.CullFaceNone?l.disable(l.CULL_FACE):(b===THREE.FrontFaceDirectionCW?l.frontFace(l.CW):l.frontFace(l.CCW),a===THREE.CullFaceBack?l.cullFace(l.BACK):a===THREE.CullFaceFront?l.cullFace(l.FRONT):l.cullFace(l.FRONT_AND_BACK),l.enable(l.CULL_FACE))};this.setMaterialFaces=function(a){var b=a.side===
THREE.DoubleSide;a=a.side===THREE.BackSide;R!==b&&(b?l.disable(l.CULL_FACE):l.enable(l.CULL_FACE),R=b);pa!==a&&(a?l.frontFace(l.CW):l.frontFace(l.CCW),pa=a)};this.setDepthTest=function(a){Z!==a&&(a?l.enable(l.DEPTH_TEST):l.disable(l.DEPTH_TEST),Z=a)};this.setDepthWrite=function(a){La!==a&&(l.depthMask(a),La=a)};this.setBlending=function(a,b,c,d){a!==ja&&(a===THREE.NoBlending?l.disable(l.BLEND):a===THREE.AdditiveBlending?(l.enable(l.BLEND),l.blendEquation(l.FUNC_ADD),l.blendFunc(l.SRC_ALPHA,l.ONE)):
a===THREE.SubtractiveBlending?(l.enable(l.BLEND),l.blendEquation(l.FUNC_ADD),l.blendFunc(l.ZERO,l.ONE_MINUS_SRC_COLOR)):a===THREE.MultiplyBlending?(l.enable(l.BLEND),l.blendEquation(l.FUNC_ADD),l.blendFunc(l.ZERO,l.SRC_COLOR)):a===THREE.CustomBlending?l.enable(l.BLEND):(l.enable(l.BLEND),l.blendEquationSeparate(l.FUNC_ADD,l.FUNC_ADD),l.blendFuncSeparate(l.SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA,l.ONE,l.ONE_MINUS_SRC_ALPHA)),ja=a);if(a===THREE.CustomBlending){if(b!==Ja&&(l.blendEquation(C(b)),Ja=b),c!==Da||
d!==Ea)l.blendFunc(C(c),C(d)),Da=c,Ea=d}else Ea=Da=Ja=null};this.reportIfError=function(a){var b=l.getError();if(b!==l.NO_ERROR){var c="",c=b===l.OUT_OF_MEMORY?"OUT_OF_MEMORY":b===l.INVALID_ENUM?"INVALID_ENUM":b===l.INVALID_OPERATION?"INVALID_OPERATION":b===l.INVALID_VALUE?"INVALID_VALUE":b===l.INVALID_FRAMEBUFFER_OPERATION?"INVALID_FRAMEBUFFER_OPERATION":b===l.CONTEXT_LOST_WEBGL?"CONTEXT_LOST_WEBGL":b===l.NO_ERROR?"NO_ERROR":"Unknown code: "+b;THREE.onerror("WebGL Error: "+c+" ("+a+")")}};this.setTexture=
function(a,b){if(a.needsUpdate){a.__webglInit||(a.__webglInit=!0,a.addEventListener("dispose",xb),a.__webglTexture=l.createTexture(),I.info.memory.textures++);l.activeTexture(l.TEXTURE0+b);l.bindTexture(l.TEXTURE_2D,a.__webglTexture);l.pixelStorei(l.UNPACK_FLIP_Y_WEBGL,a.flipY);l.pixelStorei(l.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha);l.pixelStorei(l.UNPACK_ALIGNMENT,a.unpackAlignment);var c=a.image,d=THREE.Math.isPowerOfTwo(c.width)&&THREE.Math.isPowerOfTwo(c.height),e=C(a.format),f=C(a.type);
F(l.TEXTURE_2D,a,d);var g=a.mipmaps;if(a instanceof THREE.DataTexture)if(0<g.length&&d){for(var h=0,k=g.length;h<k;h++)c=g[h],l.texImage2D(l.TEXTURE_2D,h,e,c.width,c.height,0,e,f,c.data),this.reportIfError("_gl.texImage2D DataTexture Mipmaps, texture.name: "+a.name);a.generateMipmaps=!1}else l.texImage2D(l.TEXTURE_2D,0,e,c.width,c.height,0,e,f,c.data),this.reportIfError("_gl.texImage2D DataTexture, texture.name: "+a.name);else if(a instanceof THREE.CompressedTexture)for(h=0,k=g.length;h<k;h++)c=g[h],
a.format!==THREE.RGBAFormat?(l.compressedTexImage2D(l.TEXTURE_2D,h,e,c.width,c.height,0,c.data),this.reportIfError("_gl.texImage2D CompressedTexture Non RGBA, texture.name: "+a.name)):(l.texImage2D(l.TEXTURE_2D,h,e,c.width,c.height,0,e,f,c.data),this.reportIfError("_gl.texImage2D CompressedTexture, texture.name: "+a.name));else if(0<g.length&&d){h=0;for(k=g.length;h<k;h++)c=g[h],l.texImage2D(l.TEXTURE_2D,h,e,e,f,c),this.reportIfError("_gl.texImage2D Mipmaps, texture.name: "+a.name);a.generateMipmaps=
!1}else l.texImage2D(l.TEXTURE_2D,0,e,e,f,a.image),this.reportIfError("_gl.texImage2D, texture.name: "+a.name);a.generateMipmaps&&d&&l.generateMipmap(l.TEXTURE_2D);a.needsUpdate=!1;if(a.onUpdate)a.onUpdate()}else l.activeTexture(l.TEXTURE0+b),l.bindTexture(l.TEXTURE_2D,a.__webglTexture)};this.setRenderTarget=function(a){var b=a instanceof THREE.WebGLRenderTargetCube;if(a&&!a.__webglFramebuffer){void 0===a.depthBuffer&&(a.depthBuffer=!0);void 0===a.stencilBuffer&&(a.stencilBuffer=!0);a.addEventListener("dispose",
Lb);a.__webglTexture=l.createTexture();I.info.memory.textures++;var c=THREE.Math.isPowerOfTwo(a.width)&&THREE.Math.isPowerOfTwo(a.height),d=C(a.format),e=C(a.type);if(b){a.__webglFramebuffer=[];a.__webglRenderbuffer=[];l.bindTexture(l.TEXTURE_CUBE_MAP,a.__webglTexture);F(l.TEXTURE_CUBE_MAP,a,c);for(var f=0;6>f;f++){a.__webglFramebuffer[f]=l.createFramebuffer();a.__webglRenderbuffer[f]=l.createRenderbuffer();l.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+f,0,d,a.width,a.height,0,d,e,null);var g=a,h=l.TEXTURE_CUBE_MAP_POSITIVE_X+
f;l.bindFramebuffer(l.FRAMEBUFFER,a.__webglFramebuffer[f]);l.framebufferTexture2D(l.FRAMEBUFFER,l.COLOR_ATTACHMENT0,h,g.__webglTexture,0);y(a.__webglRenderbuffer[f],a)}c&&l.generateMipmap(l.TEXTURE_CUBE_MAP)}else{a.__webglFramebuffer=l.createFramebuffer();a.__webglRenderbuffer=a.shareDepthFrom?a.shareDepthFrom.__webglRenderbuffer:l.createRenderbuffer();l.bindTexture(l.TEXTURE_2D,a.__webglTexture);F(l.TEXTURE_2D,a,c);l.texImage2D(l.TEXTURE_2D,0,d,a.width,a.height,0,d,e,null);f=l.TEXTURE_2D;l.bindFramebuffer(l.FRAMEBUFFER,
a.__webglFramebuffer);l.framebufferTexture2D(l.FRAMEBUFFER,l.COLOR_ATTACHMENT0,f,a.__webglTexture,0);if(a.shareDepthFrom){if(d="glFormat: "+d+" glType: "+e,a.depthBuffer&&!a.stencilBuffer?(l.framebufferRenderbuffer(l.FRAMEBUFFER,l.DEPTH_ATTACHMENT,l.RENDERBUFFER,a.__webglRenderbuffer),d=" renderTarget: "+a.width+"+"+a.height+" DEPTH_ATTACHMENT"):a.depthBuffer&&a.stencilBuffer&&(l.framebufferRenderbuffer(l.FRAMEBUFFER,l.DEPTH_STENCIL_ATTACHMENT,l.RENDERBUFFER,a.__webglRenderbuffer),d=" renderTarget: "+
a.width+"+"+a.height+" DEPTH_STENCIL_ATTACHMENT"),l.checkFramebufferStatus(l.FRAMEBUFFER)!=l.FRAMEBUFFER_COMPLETE)throw Error("(B) Rendering to this texture is not supported (incomplete framebuffer) "+d);}else y(a.__webglRenderbuffer,a);c&&l.generateMipmap(l.TEXTURE_2D)}b?l.bindTexture(l.TEXTURE_CUBE_MAP,null):l.bindTexture(l.TEXTURE_2D,null);l.bindRenderbuffer(l.RENDERBUFFER,null);l.bindFramebuffer(l.FRAMEBUFFER,null)}a?(b=b?a.__webglFramebuffer[a.activeCubeFace]:a.__webglFramebuffer,c=a.width,a=
a.height,e=d=0):(b=null,c=ya,a=Ka,d=qa,e=ca);b!==T&&(l.bindFramebuffer(l.FRAMEBUFFER,b),l.viewport(d,e,c,a),T=b);Ga=c;hb=a};this.shadowMapPlugin=new THREE.ShadowMapPlugin;this.addPrePlugin(this.shadowMapPlugin);this.addPostPlugin(new THREE.SpritePlugin);this.addPostPlugin(new THREE.LensFlarePlugin)};THREE.WebGLRenderTarget=function(a,b,c){this.width=a;this.height=b;c=c||{};this.wrapS=void 0!==c.wrapS?c.wrapS:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==c.wrapT?c.wrapT:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==c.magFilter?c.magFilter:THREE.LinearFilter;this.minFilter=void 0!==c.minFilter?c.minFilter:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==c.anisotropy?c.anisotropy:1;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.format=void 0!==c.format?c.format:
THREE.RGBAFormat;this.type=void 0!==c.type?c.type:THREE.UnsignedByteType;this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.generateMipmaps=void 0!==c.generateMipmaps?c.generateMipmaps:!1;this.shareDepthFrom=null};
THREE.WebGLRenderTarget.prototype={constructor:THREE.WebGLRenderTarget,clone:function(){var a=new THREE.WebGLRenderTarget(this.width,this.height);a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.format=this.format;a.type=this.type;a.depthBuffer=this.depthBuffer;a.stencilBuffer=this.stencilBuffer;a.generateMipmaps=this.generateMipmaps;a.shareDepthFrom=this.shareDepthFrom;
return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.WebGLRenderTarget.prototype);THREE.WebGLRenderTargetCube=function(a,b,c){THREE.WebGLRenderTarget.call(this,a,b,c);this.activeCubeFace=0};THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype);THREE.RenderableVertex=function(){this.position=new THREE.Vector3;this.positionWorld=new THREE.Vector3;this.positionScreen=new THREE.Vector4;this.visible=!0};THREE.RenderableVertex.prototype.copy=function(a){this.positionWorld.copy(a.positionWorld);this.positionScreen.copy(a.positionScreen)};THREE.RenderableFace=function(){this.id=0;this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.centroidModel=new THREE.Vector3;this.normalModel=new THREE.Vector3;this.vertexNormalsModel=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.vertexNormalsLength=0;this.material=this.color=null;this.uvs=[[]];this.z=0};THREE.RenderableObject=function(){this.id=0;this.object=null;this.z=0};THREE.RenderableSprite=function(){this.id=0;this.object=null;this.rotation=this.z=this.y=this.x=0;this.scale=new THREE.Vector2;this.material=null};THREE.RenderableLine=function(){this.id=0;this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.vertexColors=[new THREE.Color,new THREE.Color];this.material=null;this.z=0};THREE.GeometryUtils={merge:function(a,b,c){var d,e,f=a.vertices.length,g=b instanceof THREE.Mesh?b.geometry:b,k=a.vertices,h=g.vertices,m=a.faces,n=g.faces;a=a.faceVertexUvs[0];g=g.faceVertexUvs[0];void 0===c&&(c=0);b instanceof THREE.Mesh&&(b.matrixAutoUpdate&&b.updateMatrix(),d=b.matrix,e=(new THREE.Matrix3).getNormalMatrix(d));b=0;for(var q=h.length;b<q;b++){var s=h[b].clone();d&&s.applyMatrix4(d);k.push(s)}b=0;for(q=n.length;b<q;b++){var s=n[b],r,u,p=s.vertexNormals,w=s.vertexColors;r=new THREE.Face3(s.a+
f,s.b+f,s.c+f);r.normal.copy(s.normal);e&&r.normal.applyMatrix3(e).normalize();k=0;for(h=p.length;k<h;k++)u=p[k].clone(),e&&u.applyMatrix3(e).normalize(),r.vertexNormals.push(u);r.color.copy(s.color);k=0;for(h=w.length;k<h;k++)u=w[k],r.vertexColors.push(u.clone());r.materialIndex=s.materialIndex+c;r.centroid.copy(s.centroid);d&&r.centroid.applyMatrix4(d);m.push(r)}b=0;for(q=g.length;b<q;b++){c=g[b];d=[];k=0;for(h=c.length;k<h;k++)d.push(new THREE.Vector2(c[k].x,c[k].y));a.push(d)}},randomPointInTriangle:function(){var a=
new THREE.Vector3;return function(b,c,d){var e=new THREE.Vector3,f=THREE.Math.random16(),g=THREE.Math.random16();1<f+g&&(f=1-f,g=1-g);var k=1-f-g;e.copy(b);e.multiplyScalar(f);a.copy(c);a.multiplyScalar(g);e.add(a);a.copy(d);a.multiplyScalar(k);e.add(a);return e}}(),randomPointInFace:function(a,b,c){return THREE.GeometryUtils.randomPointInTriangle(b.vertices[a.a],b.vertices[a.b],b.vertices[a.c])},randomPointsInGeometry:function(a,b){function c(a){function b(c,d){if(d<c)return c;var e=c+Math.floor((d-
c)/2);return m[e]>a?b(c,e-1):m[e]<a?b(e+1,d):e}return b(0,m.length-1)}var d,e,f=a.faces,g=a.vertices,k=f.length,h=0,m=[],n,q,s;for(e=0;e<k;e++)d=f[e],n=g[d.a],q=g[d.b],s=g[d.c],d._area=THREE.GeometryUtils.triangleArea(n,q,s),h+=d._area,m[e]=h;d=[];for(e=0;e<b;e++)g=THREE.Math.random16()*h,g=c(g),d[e]=THREE.GeometryUtils.randomPointInFace(f[g],a,!0);return d},triangleArea:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d,e){a.subVectors(d,c);b.subVectors(e,c);a.cross(b);return 0.5*
a.length()}}(),center:function(a){a.computeBoundingBox();var b=a.boundingBox,c=new THREE.Vector3;c.addVectors(b.min,b.max);c.multiplyScalar(-0.5);a.applyMatrix((new THREE.Matrix4).makeTranslation(c.x,c.y,c.z));a.computeBoundingBox();return c},triangulateQuads:function(a){var b,c,d,e,f=[],g=[];b=0;for(c=a.faceVertexUvs.length;b<c;b++)g[b]=[];b=0;for(c=a.faces.length;b<c;b++)for(f.push(a.faces[b]),d=0,e=a.faceVertexUvs.length;d<e;d++)g[d].push(a.faceVertexUvs[d][b]);a.faces=f;a.faceVertexUvs=g;a.computeCentroids();
a.computeFaceNormals();a.computeVertexNormals();a.hasTangents&&a.computeTangents()}};THREE.ImageUtils={crossOrigin:void 0,loadTexture:function(a,b,c,d){d=new THREE.ImageLoader;d.crossOrigin=this.crossOrigin;var e=new THREE.Texture(void 0,b);b=d.load(a,function(){e.needsUpdate=!0;c&&c(e)});e.image=b;e.sourceFile=a;return e},loadCompressedTexture:function(a,b,c,d){var e=new THREE.CompressedTexture;e.mapping=b;var f=new XMLHttpRequest;f.onload=function(){var a=THREE.ImageUtils.parseDDS(f.response,!0);e.format=a.format;e.mipmaps=a.mipmaps;e.image.width=a.width;e.image.height=a.height;
e.generateMipmaps=!1;e.needsUpdate=!0;c&&c(e)};f.onerror=d;f.open("GET",a,!0);f.responseType="arraybuffer";f.send(null);return e},loadTextureCube:function(a,b,c,d){var e=[];e.loadCount=0;var f=new THREE.Texture;f.image=e;void 0!==b&&(f.mapping=b);f.flipY=!1;b=0;for(var g=a.length;b<g;++b){var k=new Image;e[b]=k;k.onload=function(){e.loadCount+=1;6===e.loadCount&&(f.needsUpdate=!0,c&&c(f))};k.onerror=d;k.crossOrigin=this.crossOrigin;k.src=a[b]}return f},loadCompressedTextureCube:function(a,b,c,d){var e=
[];e.loadCount=0;var f=new THREE.CompressedTexture;f.image=e;void 0!==b&&(f.mapping=b);f.flipY=!1;f.generateMipmaps=!1;b=function(a,b){return function(){var d=THREE.ImageUtils.parseDDS(a.response,!0);b.format=d.format;b.mipmaps=d.mipmaps;b.width=d.width;b.height=d.height;e.loadCount+=1;6===e.loadCount&&(f.format=d.format,f.needsUpdate=!0,c&&c(f))}};if(a instanceof Array)for(var g=0,k=a.length;g<k;++g){var h={};e[g]=h;var m=new XMLHttpRequest;m.onload=b(m,h);m.onerror=d;h=a[g];m.open("GET",h,!0);m.responseType=
"arraybuffer";m.send(null)}else m=new XMLHttpRequest,m.onload=function(){var a=THREE.ImageUtils.parseDDS(m.response,!0);if(a.isCubemap){for(var b=a.mipmaps.length/a.mipmapCount,d=0;d<b;d++){e[d]={mipmaps:[]};for(var g=0;g<a.mipmapCount;g++)e[d].mipmaps.push(a.mipmaps[d*a.mipmapCount+g]),e[d].format=a.format,e[d].width=a.width,e[d].height=a.height}f.format=a.format;f.needsUpdate=!0;c&&c(f)}},m.onerror=d,m.open("GET",a,!0),m.responseType="arraybuffer",m.send(null);return f},loadDDSTexture:function(a,
b,c,d){var e=[];e.loadCount=0;var f=new THREE.CompressedTexture;f.image=e;void 0!==b&&(f.mapping=b);f.flipY=!1;f.generateMipmaps=!1;var g=new XMLHttpRequest;g.onload=function(){var a=THREE.ImageUtils.parseDDS(g.response,!0);if(a.isCubemap)for(var b=a.mipmaps.length/a.mipmapCount,d=0;d<b;d++){e[d]={mipmaps:[]};for(var n=0;n<a.mipmapCount;n++)e[d].mipmaps.push(a.mipmaps[d*a.mipmapCount+n]),e[d].format=a.format,e[d].width=a.width,e[d].height=a.height}else f.image.width=a.width,f.image.height=a.height,
f.mipmaps=a.mipmaps;f.format=a.format;f.needsUpdate=!0;c&&c(f)};g.onerror=d;g.open("GET",a,!0);g.responseType="arraybuffer";g.send(null);return f},parseDDS:function(a,b){function c(a){return a.charCodeAt(0)+(a.charCodeAt(1)<<8)+(a.charCodeAt(2)<<16)+(a.charCodeAt(3)<<24)}function d(a,b,c,d){var e=c*d*4;a=new Uint8Array(a,b,e);for(var e=new Uint8Array(e),f=b=0,g=0;g<d;g++)for(var h=0;h<c;h++){var k=a[f];f++;var m=a[f];f++;var n=a[f];f++;var r=a[f];f++;e[b]=n;b++;e[b]=m;b++;e[b]=k;b++;e[b]=r;b++}return e}
var e={mipmaps:[],width:0,height:0,format:null,mipmapCount:1},f=c("DXT1"),g=c("DXT3"),k=c("DXT5"),h=new Int32Array(a,0,31);if(542327876!==h[0])return THREE.onerror("ImageUtils.parseDDS(): Invalid magic number in DDS header"),e;if(!h[20]&4)return THREE.onerror("ImageUtils.parseDDS(): Unsupported format, must contain a FourCC code"),e;var m=h[21],n=!1;switch(m){case f:f=8;e.format=THREE.RGB_S3TC_DXT1_Format;break;case g:f=16;e.format=THREE.RGBA_S3TC_DXT3_Format;break;case k:f=16;e.format=THREE.RGBA_S3TC_DXT5_Format;
break;default:if(32==h[22]&&h[23]&16711680&&h[24]&65280&&h[25]&255&&h[26]&4278190080)n=!0,f=64,e.format=THREE.RGBAFormat;else return THREE.onerror("ImageUtils.parseDDS(): Unsupported FourCC code: ",String.fromCharCode(m&255,m>>8&255,m>>16&255,m>>24&255)),e}e.mipmapCount=1;h[2]&131072&&!1!==b&&(e.mipmapCount=Math.max(1,h[7]));e.isCubemap=h[28]&512?!0:!1;e.width=h[4];e.height=h[3];for(var h=h[1]+4,g=e.width,k=e.height,m=e.isCubemap?6:1,q=0;q<m;q++){for(var s=0;s<e.mipmapCount;s++){if(n)var r=d(a,h,
g,k),u=r.length;else u=Math.max(4,g)/4*Math.max(4,k)/4*f,r=new Uint8Array(a,h,u);e.mipmaps.push({data:r,width:g,height:k});h+=u;g=Math.max(0.5*g,1);k=Math.max(0.5*k,1)}g=e.width;k=e.height}return e},getNormalMap:function(a,b){var c=function(a){var b=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);return[a[0]/b,a[1]/b,a[2]/b]};b|=1;var d=a.width,e=a.height,f=document.createElement("canvas");f.width=d;f.height=e;var g=f.getContext("2d");g.drawImage(a,0,0);for(var k=g.getImageData(0,0,d,e).data,h=g.createImageData(d,
e),m=h.data,n=0;n<d;n++)for(var q=0;q<e;q++){var s=0>q-1?0:q-1,r=q+1>e-1?e-1:q+1,u=0>n-1?0:n-1,p=n+1>d-1?d-1:n+1,w=[],v=[0,0,k[4*(q*d+n)]/255*b];w.push([-1,0,k[4*(q*d+u)]/255*b]);w.push([-1,-1,k[4*(s*d+u)]/255*b]);w.push([0,-1,k[4*(s*d+n)]/255*b]);w.push([1,-1,k[4*(s*d+p)]/255*b]);w.push([1,0,k[4*(q*d+p)]/255*b]);w.push([1,1,k[4*(r*d+p)]/255*b]);w.push([0,1,k[4*(r*d+n)]/255*b]);w.push([-1,1,k[4*(r*d+u)]/255*b]);s=[];u=w.length;for(r=0;r<u;r++){var p=w[r],t=w[(r+1)%u],p=[p[0]-v[0],p[1]-v[1],p[2]-v[2]],
t=[t[0]-v[0],t[1]-v[1],t[2]-v[2]];s.push(c([p[1]*t[2]-p[2]*t[1],p[2]*t[0]-p[0]*t[2],p[0]*t[1]-p[1]*t[0]]))}w=[0,0,0];for(r=0;r<s.length;r++)w[0]+=s[r][0],w[1]+=s[r][1],w[2]+=s[r][2];w[0]/=s.length;w[1]/=s.length;w[2]/=s.length;v=4*(q*d+n);m[v]=(w[0]+1)/2*255|0;m[v+1]=(w[1]+1)/2*255|0;m[v+2]=255*w[2]|0;m[v+3]=255}g.putImageData(h,0,0);return f},generateDataTexture:function(a,b,c){var d=a*b,e=new Uint8Array(3*d),f=Math.floor(255*c.r),g=Math.floor(255*c.g);c=Math.floor(255*c.b);for(var k=0;k<d;k++)e[3*
k]=f,e[3*k+1]=g,e[3*k+2]=c;a=new THREE.DataTexture(e,a,b,THREE.RGBFormat);a.needsUpdate=!0;return a}};THREE.SceneUtils={createMultiMaterialObject:function(a,b){for(var c=new THREE.Object3D,d=0,e=b.length;d<e;d++)c.add(new THREE.Mesh(a,b[d]));return c},detach:function(a,b,c){a.applyMatrix(b.matrixWorld);b.remove(a);c.add(a)},attach:function(a,b,c){var d=new THREE.Matrix4;d.getInverse(c.matrixWorld);a.applyMatrix(d);b.remove(a);c.add(a)}};THREE.FontUtils={faces:{},face:"helvetiker",weight:"normal",style:"normal",size:150,divisions:10,getFace:function(){return this.faces[this.face][this.weight][this.style]},loadFace:function(a){var b=a.familyName.toLowerCase();this.faces[b]=this.faces[b]||{};this.faces[b][a.cssFontWeight]=this.faces[b][a.cssFontWeight]||{};this.faces[b][a.cssFontWeight][a.cssFontStyle]=a;return this.faces[b][a.cssFontWeight][a.cssFontStyle]=a},drawText:function(a){var b=this.getFace(),c=this.size/b.resolution,d=0,e=
String(a).split(""),f=e.length,g=[];for(a=0;a<f;a++){var k=new THREE.Path,k=this.extractGlyphPoints(e[a],b,c,d,k),d=d+k.offset;g.push(k.path)}return{paths:g,offset:d/2}},extractGlyphPoints:function(a,b,c,d,e){var f=[],g,k,h,m,n,q,s,r,u,p,w,v=b.glyphs[a]||b.glyphs["?"];if(v){if(v.o)for(b=v._cachedOutline||(v._cachedOutline=v.o.split(" ")),m=b.length,a=0;a<m;)switch(h=b[a++],h){case "m":h=b[a++]*c+d;n=b[a++]*c;e.moveTo(h,n);break;case "l":h=b[a++]*c+d;n=b[a++]*c;e.lineTo(h,n);break;case "q":h=b[a++]*
c+d;n=b[a++]*c;r=b[a++]*c+d;u=b[a++]*c;e.quadraticCurveTo(r,u,h,n);if(g=f[f.length-1])for(q=g.x,s=g.y,g=1,k=this.divisions;g<=k;g++){var t=g/k;THREE.Shape.Utils.b2(t,q,r,h);THREE.Shape.Utils.b2(t,s,u,n)}break;case "b":if(h=b[a++]*c+d,n=b[a++]*c,r=b[a++]*c+d,u=b[a++]*-c,p=b[a++]*c+d,w=b[a++]*-c,e.bezierCurveTo(h,n,r,u,p,w),g=f[f.length-1])for(q=g.x,s=g.y,g=1,k=this.divisions;g<=k;g++)t=g/k,THREE.Shape.Utils.b3(t,q,r,p,h),THREE.Shape.Utils.b3(t,s,u,w,n)}return{offset:v.ha*c,path:e}}}};
THREE.FontUtils.generateShapes=function(a,b){b=b||{};var c=void 0!==b.curveSegments?b.curveSegments:4,d=void 0!==b.font?b.font:"helvetiker",e=void 0!==b.weight?b.weight:"normal",f=void 0!==b.style?b.style:"normal";THREE.FontUtils.size=void 0!==b.size?b.size:100;THREE.FontUtils.divisions=c;THREE.FontUtils.face=d;THREE.FontUtils.weight=e;THREE.FontUtils.style=f;c=THREE.FontUtils.drawText(a).paths;d=[];e=0;for(f=c.length;e<f;e++)Array.prototype.push.apply(d,c[e].toShapes());return d};
(function(a){var b=function(a){for(var b=a.length,e=0,f=b-1,g=0;g<b;f=g++)e+=a[f].x*a[g].y-a[g].x*a[f].y;return 0.5*e};a.Triangulate=function(a,d){var e=a.length;if(3>e)return null;var f=[],g=[],k=[],h,m,n;if(0<b(a))for(m=0;m<e;m++)g[m]=m;else for(m=0;m<e;m++)g[m]=e-1-m;var q=2*e;for(m=e-1;2<e;){if(0>=q--){THREE.onwarning("Warning, unable to triangulate polygon!");break}h=m;e<=h&&(h=0);m=h+1;e<=m&&(m=0);n=m+1;e<=n&&(n=0);var s;a:{var r=s=void 0,u=void 0,p=void 0,w=void 0,v=void 0,t=void 0,x=void 0,
B=void 0,r=a[g[h]].x,u=a[g[h]].y,p=a[g[m]].x,w=a[g[m]].y,v=a[g[n]].x,t=a[g[n]].y;if(1E-10>(p-r)*(t-u)-(w-u)*(v-r))s=!1;else{var J=void 0,E=void 0,K=void 0,A=void 0,z=void 0,L=void 0,F=void 0,P=void 0,y=void 0,G=void 0,y=P=F=B=x=void 0,J=v-p,E=t-w,K=r-v,A=u-t,z=p-r,L=w-u;for(s=0;s<e;s++)if(x=a[g[s]].x,B=a[g[s]].y,!(x===r&&B===u||x===p&&B===w||x===v&&B===t)&&(F=x-r,P=B-u,y=x-p,G=B-w,x-=v,B-=t,y=J*G-E*y,F=z*P-L*F,P=K*B-A*x,-1E-10<=y&&-1E-10<=P&&-1E-10<=F)){s=!1;break a}s=!0}}if(s){f.push([a[g[h]],a[g[m]],
a[g[n]]]);k.push([g[h],g[m],g[n]]);h=m;for(n=m+1;n<e;h++,n++)g[h]=g[n];e--;q=2*e}}return d?k:f};a.Triangulate.area=b;return a})(THREE.FontUtils);self._typeface_js={faces:THREE.FontUtils.faces,loadFace:THREE.FontUtils.loadFace};THREE.typeface_js=self._typeface_js;THREE.Curve=function(){};THREE.Curve.prototype.getPoint=function(a){THREE.onwarning("Warning, getPoint() not implemented!");return null};THREE.Curve.prototype.getPointAt=function(a){a=this.getUtoTmapping(a);return this.getPoint(a)};THREE.Curve.prototype.getPoints=function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPoint(b/a));return c};THREE.Curve.prototype.getSpacedPoints=function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPointAt(b/a));return c};
THREE.Curve.prototype.getLength=function(){var a=this.getLengths();return a[a.length-1]};THREE.Curve.prototype.getLengths=function(a){a||(a=this.__arcLengthDivisions?this.__arcLengthDivisions:200);if(this.cacheArcLengths&&this.cacheArcLengths.length==a+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var b=[],c,d=this.getPoint(0),e,f=0;b.push(0);for(e=1;e<=a;e++)c=this.getPoint(e/a),f+=c.distanceTo(d),b.push(f),d=c;return this.cacheArcLengths=b};
THREE.Curve.prototype.updateArcLengths=function(){this.needsUpdate=!0;this.getLengths()};THREE.Curve.prototype.getUtoTmapping=function(a,b){var c=this.getLengths(),d=0,e=c.length,f;f=b?b:a*c[e-1];for(var g=0,k=e-1,h;g<=k;)if(d=Math.floor(g+(k-g)/2),h=c[d]-f,0>h)g=d+1;else if(0<h)k=d-1;else{k=d;break}d=k;if(c[d]==f)return d/(e-1);g=c[d];return c=(d+(f-g)/(c[d+1]-g))/(e-1)};THREE.Curve.prototype.getTangent=function(a){var b=a-1E-4;a+=1E-4;0>b&&(b=0);1<a&&(a=1);b=this.getPoint(b);return this.getPoint(a).clone().sub(b).normalize()};
THREE.Curve.prototype.getTangentAt=function(a){a=this.getUtoTmapping(a);return this.getTangent(a)};
THREE.Curve.Utils={tangentQuadraticBezier:function(a,b,c,d){return 2*(1-a)*(c-b)+2*a*(d-c)},tangentCubicBezier:function(a,b,c,d,e){return-3*b*(1-a)*(1-a)+3*c*(1-a)*(1-a)-6*a*c*(1-a)+6*a*d*(1-a)-3*a*a*d+3*a*a*e},tangentSpline:function(a,b,c,d,e){return 6*a*a-6*a+(3*a*a-4*a+1)+(-6*a*a+6*a)+(3*a*a-2*a)},interpolate:function(a,b,c,d,e){a=0.5*(c-a);d=0.5*(d-b);var f=e*e;return(2*b-2*c+a+d)*e*f+(-3*b+3*c-2*a-d)*f+a*e+b}};
THREE.Curve.create=function(a,b){a.prototype=Object.create(THREE.Curve.prototype);a.prototype.getPoint=b;return a};THREE.CurvePath=function(){this.curves=[];this.bends=[];this.autoClose=!1};THREE.CurvePath.prototype=Object.create(THREE.Curve.prototype);THREE.CurvePath.prototype.add=function(a){this.curves.push(a)};THREE.CurvePath.prototype.checkConnection=function(){};THREE.CurvePath.prototype.closePath=function(){var a=this.curves[0].getPoint(0),b=this.curves[this.curves.length-1].getPoint(1);a.equals(b)||this.curves.push(new THREE.LineCurve(b,a))};
THREE.CurvePath.prototype.getPoint=function(a){var b=a*this.getLength(),c=this.getCurveLengths();for(a=0;a<c.length;){if(c[a]>=b)return b=c[a]-b,a=this.curves[a],b=1-b/a.getLength(),a.getPointAt(b);a++}return null};THREE.CurvePath.prototype.getLength=function(){var a=this.getCurveLengths();return a[a.length-1]};
THREE.CurvePath.prototype.getCurveLengths=function(){if(this.cacheLengths&&this.cacheLengths.length==this.curves.length)return this.cacheLengths;var a=[],b=0,c,d=this.curves.length;for(c=0;c<d;c++)b+=this.curves[c].getLength(),a.push(b);return this.cacheLengths=a};
THREE.CurvePath.prototype.getBoundingBox=function(){var a=this.getPoints(),b,c,d,e,f,g;b=c=Number.NEGATIVE_INFINITY;e=f=Number.POSITIVE_INFINITY;var k,h,m,n,q=a[0]instanceof THREE.Vector3;n=q?new THREE.Vector3:new THREE.Vector2;h=0;for(m=a.length;h<m;h++)k=a[h],k.x>b?b=k.x:k.x<e&&(e=k.x),k.y>c?c=k.y:k.y<f&&(f=k.y),q&&(k.z>d?d=k.z:k.z<g&&(g=k.z)),n.add(k);a={minX:e,minY:f,maxX:b,maxY:c,centroid:n.divideScalar(m)};q&&(a.maxZ=d,a.minZ=g);return a};
THREE.CurvePath.prototype.createPointsGeometry=function(a){a=this.getPoints(a,!0);return this.createGeometry(a)};THREE.CurvePath.prototype.createSpacedPointsGeometry=function(a){a=this.getSpacedPoints(a,!0);return this.createGeometry(a)};THREE.CurvePath.prototype.createGeometry=function(a){for(var b=new THREE.Geometry,c=0;c<a.length;c++)b.vertices.push(new THREE.Vector3(a[c].x,a[c].y,a[c].z||0));return b};THREE.CurvePath.prototype.addWrapPath=function(a){this.bends.push(a)};
THREE.CurvePath.prototype.getTransformedPoints=function(a,b){var c=this.getPoints(a),d,e;b||(b=this.bends);d=0;for(e=b.length;d<e;d++)c=this.getWrapPoints(c,b[d]);return c};THREE.CurvePath.prototype.getTransformedSpacedPoints=function(a,b){var c=this.getSpacedPoints(a),d,e;b||(b=this.bends);d=0;for(e=b.length;d<e;d++)c=this.getWrapPoints(c,b[d]);return c};
THREE.CurvePath.prototype.getWrapPoints=function(a,b){var c=this.getBoundingBox(),d,e,f,g,k,h;d=0;for(e=a.length;d<e;d++)f=a[d],g=f.x,k=f.y,h=g/c.maxX,h=b.getUtoTmapping(h,g),g=b.getPoint(h),h=b.getTangent(h),h.set(-h.y,h.x).multiplyScalar(k),f.x=g.x+h.x,f.y=g.y+h.y;return a};THREE.Gyroscope=function(){THREE.Object3D.call(this)};THREE.Gyroscope.prototype=Object.create(THREE.Object3D.prototype);
THREE.Gyroscope.prototype.updateMatrixWorld=function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?(this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorld.decompose(this.translationWorld,this.quaternionWorld,this.scaleWorld),this.matrix.decompose(this.translationObject,this.quaternionObject,this.scaleObject),this.matrixWorld.compose(this.translationWorld,this.quaternionObject,this.scaleWorld)):this.matrixWorld.copy(this.matrix),
this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)};THREE.Gyroscope.prototype.translationWorld=new THREE.Vector3;THREE.Gyroscope.prototype.translationObject=new THREE.Vector3;THREE.Gyroscope.prototype.quaternionWorld=new THREE.Quaternion;THREE.Gyroscope.prototype.quaternionObject=new THREE.Quaternion;THREE.Gyroscope.prototype.scaleWorld=new THREE.Vector3;THREE.Gyroscope.prototype.scaleObject=new THREE.Vector3;THREE.Path=function(a){THREE.CurvePath.call(this);this.actions=[];a&&this.fromPoints(a)};THREE.Path.prototype=Object.create(THREE.CurvePath.prototype);THREE.PathActions={MOVE_TO:"moveTo",LINE_TO:"lineTo",QUADRATIC_CURVE_TO:"quadraticCurveTo",BEZIER_CURVE_TO:"bezierCurveTo",CSPLINE_THRU:"splineThru",ARC:"arc",ELLIPSE:"ellipse"};THREE.Path.prototype.fromPoints=function(a){this.moveTo(a[0].x,a[0].y);for(var b=1,c=a.length;b<c;b++)this.lineTo(a[b].x,a[b].y)};
THREE.Path.prototype.moveTo=function(a,b){var c=Array.prototype.slice.call(arguments);this.actions.push({action:THREE.PathActions.MOVE_TO,args:c})};THREE.Path.prototype.lineTo=function(a,b){var c=Array.prototype.slice.call(arguments),d=this.actions[this.actions.length-1].args,d=new THREE.LineCurve(new THREE.Vector2(d[d.length-2],d[d.length-1]),new THREE.Vector2(a,b));this.curves.push(d);this.actions.push({action:THREE.PathActions.LINE_TO,args:c})};
THREE.Path.prototype.quadraticCurveTo=function(a,b,c,d){var e=Array.prototype.slice.call(arguments),f=this.actions[this.actions.length-1].args,f=new THREE.QuadraticBezierCurve(new THREE.Vector2(f[f.length-2],f[f.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d));this.curves.push(f);this.actions.push({action:THREE.PathActions.QUADRATIC_CURVE_TO,args:e})};
THREE.Path.prototype.bezierCurveTo=function(a,b,c,d,e,f){var g=Array.prototype.slice.call(arguments),k=this.actions[this.actions.length-1].args,k=new THREE.CubicBezierCurve(new THREE.Vector2(k[k.length-2],k[k.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d),new THREE.Vector2(e,f));this.curves.push(k);this.actions.push({action:THREE.PathActions.BEZIER_CURVE_TO,args:g})};
THREE.Path.prototype.splineThru=function(a){var b=Array.prototype.slice.call(arguments),c=this.actions[this.actions.length-1].args,c=[new THREE.Vector2(c[c.length-2],c[c.length-1])];Array.prototype.push.apply(c,a);c=new THREE.SplineCurve(c);this.curves.push(c);this.actions.push({action:THREE.PathActions.CSPLINE_THRU,args:b})};THREE.Path.prototype.arc=function(a,b,c,d,e,f){var g=this.actions[this.actions.length-1].args;this.absarc(a+g[g.length-2],b+g[g.length-1],c,d,e,f)};
THREE.Path.prototype.absarc=function(a,b,c,d,e,f){this.absellipse(a,b,c,c,d,e,f)};THREE.Path.prototype.ellipse=function(a,b,c,d,e,f,g){var k=this.actions[this.actions.length-1].args;this.absellipse(a+k[k.length-2],b+k[k.length-1],c,d,e,f,g)};THREE.Path.prototype.absellipse=function(a,b,c,d,e,f,g){var k=Array.prototype.slice.call(arguments),h=new THREE.EllipseCurve(a,b,c,d,e,f,g);this.curves.push(h);h=h.getPoint(1);k.push(h.x);k.push(h.y);this.actions.push({action:THREE.PathActions.ELLIPSE,args:k})};
THREE.Path.prototype.getSpacedPoints=function(a,b){a||(a=40);for(var c=[],d=0;d<a;d++)c.push(this.getPoint(d/a));return c};
THREE.Path.prototype.getPoints=function(a,b){if(this.useSpacedPoints)return console.log("tata"),this.getSpacedPoints(a,b);a=a||12;var c=[],d,e,f,g,k,h,m,n,q,s,r,u,p;d=0;for(e=this.actions.length;d<e;d++)switch(f=this.actions[d],g=f.action,f=f.args,g){case THREE.PathActions.MOVE_TO:c.push(new THREE.Vector2(f[0],f[1]));break;case THREE.PathActions.LINE_TO:c.push(new THREE.Vector2(f[0],f[1]));break;case THREE.PathActions.QUADRATIC_CURVE_TO:k=f[2];h=f[3];q=f[0];s=f[1];0<c.length?(g=c[c.length-1],r=g.x,
u=g.y):(g=this.actions[d-1].args,r=g[g.length-2],u=g[g.length-1]);for(f=1;f<=a;f++)p=f/a,g=THREE.Shape.Utils.b2(p,r,q,k),p=THREE.Shape.Utils.b2(p,u,s,h),c.push(new THREE.Vector2(g,p));break;case THREE.PathActions.BEZIER_CURVE_TO:k=f[4];h=f[5];q=f[0];s=f[1];m=f[2];n=f[3];0<c.length?(g=c[c.length-1],r=g.x,u=g.y):(g=this.actions[d-1].args,r=g[g.length-2],u=g[g.length-1]);for(f=1;f<=a;f++)p=f/a,g=THREE.Shape.Utils.b3(p,r,q,m,k),p=THREE.Shape.Utils.b3(p,u,s,n,h),c.push(new THREE.Vector2(g,p));break;case THREE.PathActions.CSPLINE_THRU:g=
this.actions[d-1].args;p=[new THREE.Vector2(g[g.length-2],g[g.length-1])];g=a*f[0].length;p=p.concat(f[0]);p=new THREE.SplineCurve(p);for(f=1;f<=g;f++)c.push(p.getPointAt(f/g));break;case THREE.PathActions.ARC:k=f[0];h=f[1];s=f[2];m=f[3];g=f[4];q=!!f[5];r=g-m;u=2*a;for(f=1;f<=u;f++)p=f/u,q||(p=1-p),p=m+p*r,g=k+s*Math.cos(p),p=h+s*Math.sin(p),c.push(new THREE.Vector2(g,p));break;case THREE.PathActions.ELLIPSE:for(k=f[0],h=f[1],s=f[2],n=f[3],m=f[4],g=f[5],q=!!f[6],r=g-m,u=2*a,f=1;f<=u;f++)p=f/u,q||
(p=1-p),p=m+p*r,g=k+s*Math.cos(p),p=h+n*Math.sin(p),c.push(new THREE.Vector2(g,p))}d=c[c.length-1];1E-10>Math.abs(d.x-c[0].x)&&1E-10>Math.abs(d.y-c[0].y)&&c.splice(c.length-1,1);b&&c.push(c[0]);return c};
THREE.Path.prototype.toShapes=function(a){function b(a,b){for(var c=b.length,d=!1,e=c-1,f=0;f<c;e=f++){var g=b[e],h=b[f],k=h.x-g.x,m=h.y-g.y;if(1E-10<Math.abs(m)){if(0>m&&(g=b[f],k=-k,h=b[e],m=-m),!(a.y<g.y||a.y>h.y))if(a.y==g.y){if(a.x==g.x)return!0}else{e=m*(a.x-g.x)-k*(a.y-g.y);if(0==e)return!0;0>e||(d=!d)}}else if(a.y==g.y&&(h.x<=a.x&&a.x<=g.x||g.x<=a.x&&a.x<=h.x))return!0}return d}var c,d,e,f,g=[],k=new THREE.Path;c=0;for(d=this.actions.length;c<d;c++)e=this.actions[c],f=e.args,e=e.action,e==
THREE.PathActions.MOVE_TO&&0!=k.actions.length&&(g.push(k),k=new THREE.Path),k[e].apply(k,f);0!=k.actions.length&&g.push(k);if(0==g.length)return[];var h,m,n;f=[];if(1==g.length)return m=g[0],n=new THREE.Shape,n.actions=m.actions,n.curves=m.curves,f.push(n),f;var q=!THREE.Shape.Utils.isClockWise(g[0].getPoints()),q=a?!q:q;n=[];k=[];e=[];var s=0,r;k[s]=void 0;e[s]=[];c=0;for(d=g.length;c<d;c++)m=g[c],r=m.getPoints(),h=THREE.Shape.Utils.isClockWise(r),(h=a?!h:h)?(!q&&k[s]&&s++,k[s]={s:new THREE.Shape,
p:r},k[s].s.actions=m.actions,k[s].s.curves=m.curves,q&&s++,e[s]=[]):e[s].push({h:m,p:r[0]});if(1<k.length){c=!1;d=[];a=0;for(g=k.length;a<g;a++)n[a]=[];a=0;for(g=k.length;a<g;a++)for(m=e[a],h=0;h<m.length;h++){q=m[h];s=!0;for(r=0;r<k.length;r++)b(q.p,k[r].p)&&(a!=r&&d.push({froms:a,tos:r,hole:h}),s?(s=!1,n[r].push(q)):c=!0);s&&n[a].push(q)}0<d.length&&(c||(e=n))}c=0;for(d=k.length;c<d;c++)for(n=k[c].s,f.push(n),a=e[c],g=0,m=a.length;g<m;g++)n.holes.push(a[g].h);return f};THREE.Shape=function(){THREE.Path.apply(this,arguments);this.holes=[]};THREE.Shape.prototype=Object.create(THREE.Path.prototype);THREE.Shape.prototype.extrude=function(a){return new THREE.ExtrudeGeometry(this,a)};THREE.Shape.prototype.makeGeometry=function(a){return new THREE.ShapeGeometry(this,a)};THREE.Shape.prototype.getPointsHoles=function(a){var b,c=this.holes.length,d=[];for(b=0;b<c;b++)d[b]=this.holes[b].getTransformedPoints(a,this.bends);return d};
THREE.Shape.prototype.getSpacedPointsHoles=function(a){var b,c=this.holes.length,d=[];for(b=0;b<c;b++)d[b]=this.holes[b].getTransformedSpacedPoints(a,this.bends);return d};THREE.Shape.prototype.extractAllPoints=function(a){return{shape:this.getTransformedPoints(a),holes:this.getPointsHoles(a)}};THREE.Shape.prototype.extractPoints=function(a){return this.useSpacedPoints?this.extractAllSpacedPoints(a):this.extractAllPoints(a)};
THREE.Shape.prototype.extractAllSpacedPoints=function(a){return{shape:this.getTransformedSpacedPoints(a),holes:this.getSpacedPointsHoles(a)}};
THREE.Shape.Utils={triangulateShape:function(a,b){function c(a,b,c){return a.x!=b.x?a.x<b.x?a.x<=c.x&&c.x<=b.x:b.x<=c.x&&c.x<=a.x:a.y<b.y?a.y<=c.y&&c.y<=b.y:b.y<=c.y&&c.y<=a.y}function d(a,b,d,e,f){var g=b.x-a.x,h=b.y-a.y,k=e.x-d.x,m=e.y-d.y,n=a.x-d.x,q=a.y-d.y,K=h*k-g*m,A=h*n-g*q;if(1E-10<Math.abs(K)){if(0<K){if(0>A||A>K)return[];k=m*n-k*q;if(0>k||k>K)return[]}else{if(0<A||A<K)return[];k=m*n-k*q;if(0<k||k<K)return[]}if(0==k)return!f||0!=A&&A!=K?[a]:[];if(k==K)return!f||0!=A&&A!=K?[b]:[];if(0==A)return[d];
if(A==K)return[e];f=k/K;return[{x:a.x+f*g,y:a.y+f*h}]}if(0!=A||m*n!=k*q)return[];h=0==g&&0==h;k=0==k&&0==m;if(h&&k)return a.x!=d.x||a.y!=d.y?[]:[a];if(h)return c(d,e,a)?[a]:[];if(k)return c(a,b,d)?[d]:[];0!=g?(a.x<b.x?(g=a,k=a.x,h=b,a=b.x):(g=b,k=b.x,h=a,a=a.x),d.x<e.x?(b=d,K=d.x,m=e,d=e.x):(b=e,K=e.x,m=d,d=d.x)):(a.y<b.y?(g=a,k=a.y,h=b,a=b.y):(g=b,k=b.y,h=a,a=a.y),d.y<e.y?(b=d,K=d.y,m=e,d=e.y):(b=e,K=e.y,m=d,d=d.y));return k<=K?a<K?[]:a==K?f?[]:[b]:a<=d?[b,h]:[b,m]:k>d?[]:k==d?f?[]:[g]:a<=d?[g,h]:
[g,m]}function e(a,b,c,d){var e=b.x-a.x,f=b.y-a.y;b=c.x-a.x;c=c.y-a.y;var g=d.x-a.x;d=d.y-a.y;a=e*c-f*b;e=e*d-f*g;return 1E-10<Math.abs(a)?(b=g*c-d*b,0<a?0<=e&&0<=b:0<=e||0<=b):0<e}var f,g,k,h,m,n={};k=a.concat();f=0;for(g=b.length;f<g;f++)Array.prototype.push.apply(k,b[f]);f=0;for(g=k.length;f<g;f++)m=k[f].x+":"+k[f].y,void 0!==n[m]&&console.log("Duplicate point",m),n[m]=f;f=function(a,b){function c(a,b){var d=h.length-1,f=a-1;0>f&&(f=d);var g=a+1;g>d&&(g=0);d=e(h[a],h[f],h[g],k[b]);if(!d)return!1;
d=k.length-1;f=b-1;0>f&&(f=d);g=b+1;g>d&&(g=0);return(d=e(k[b],k[f],k[g],h[a]))?!0:!1}function f(a,b){var c,e;for(c=0;c<h.length;c++)if(e=c+1,e%=h.length,e=d(a,b,h[c],h[e],!0),0<e.length)return!0;return!1}function g(a,c){var e,f,h,k;for(e=0;e<m.length;e++)for(f=b[m[e]],h=0;h<f.length;h++)if(k=h+1,k%=f.length,k=d(a,c,f[h],f[k],!0),0<k.length)return!0;return!1}var h=a.concat(),k,m=[],n,q,E,K,A,z=[],L,F,P,y=0;for(n=b.length;y<n;y++)m.push(y);for(var G=2*m.length;0<m.length;){G--;if(0>G){console.log("Infinite Loop! Holes left:"+
m.length+", Probably Hole outside Shape!");break}for(q=0;q<h.length;q++){E=h[q];n=-1;for(y=0;y<m.length;y++)if(K=m[y],A=E.x+":"+E.y+":"+K,void 0===z[A]){k=b[K];for(L=0;L<k.length;L++)if(K=k[L],c(q,L)&&!f(E,K)&&!g(E,K)){n=L;m.splice(y,1);K=h.slice(0,q+1);L=h.slice(q);F=k.slice(n);P=k.slice(0,n+1);h=K.concat(F).concat(P).concat(L);break}if(0<=n)break;z[A]=!0}if(0<=n)break}}return h}(a,b);var q=THREE.FontUtils.Triangulate(f,!1);f=0;for(g=q.length;f<g;f++)for(h=q[f],k=0;3>k;k++)m=h[k].x+":"+h[k].y,m=
n[m],void 0!==m&&(h[k]=m);return q.concat()},isClockWise:function(a){return 0>THREE.FontUtils.Triangulate.area(a)},b2p0:function(a,b){var c=1-a;return c*c*b},b2p1:function(a,b){return 2*(1-a)*a*b},b2p2:function(a,b){return a*a*b},b2:function(a,b,c,d){return this.b2p0(a,b)+this.b2p1(a,c)+this.b2p2(a,d)},b3p0:function(a,b){var c=1-a;return c*c*c*b},b3p1:function(a,b){var c=1-a;return 3*c*c*a*b},b3p2:function(a,b){return 3*(1-a)*a*a*b},b3p3:function(a,b){return a*a*a*b},b3:function(a,b,c,d,e){return this.b3p0(a,
b)+this.b3p1(a,c)+this.b3p2(a,d)+this.b3p3(a,e)}};THREE.LineCurve=function(a,b){this.v1=a;this.v2=b};THREE.LineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.LineCurve.prototype.getPoint=function(a){var b=this.v2.clone().sub(this.v1);b.multiplyScalar(a).add(this.v1);return b};THREE.LineCurve.prototype.getPointAt=function(a){return this.getPoint(a)};THREE.LineCurve.prototype.getTangent=function(a){return this.v2.clone().sub(this.v1).normalize()};THREE.QuadraticBezierCurve=function(a,b,c){this.v0=a;this.v1=b;this.v2=c};THREE.QuadraticBezierCurve.prototype=Object.create(THREE.Curve.prototype);THREE.QuadraticBezierCurve.prototype.getPoint=function(a){var b;b=THREE.Shape.Utils.b2(a,this.v0.x,this.v1.x,this.v2.x);a=THREE.Shape.Utils.b2(a,this.v0.y,this.v1.y,this.v2.y);return new THREE.Vector2(b,a)};
THREE.QuadraticBezierCurve.prototype.getTangent=function(a){var b;b=THREE.Curve.Utils.tangentQuadraticBezier(a,this.v0.x,this.v1.x,this.v2.x);a=THREE.Curve.Utils.tangentQuadraticBezier(a,this.v0.y,this.v1.y,this.v2.y);b=new THREE.Vector2(b,a);b.normalize();return b};THREE.CubicBezierCurve=function(a,b,c,d){this.v0=a;this.v1=b;this.v2=c;this.v3=d};THREE.CubicBezierCurve.prototype=Object.create(THREE.Curve.prototype);THREE.CubicBezierCurve.prototype.getPoint=function(a){var b;b=THREE.Shape.Utils.b3(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);a=THREE.Shape.Utils.b3(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);return new THREE.Vector2(b,a)};
THREE.CubicBezierCurve.prototype.getTangent=function(a){var b;b=THREE.Curve.Utils.tangentCubicBezier(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);a=THREE.Curve.Utils.tangentCubicBezier(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);b=new THREE.Vector2(b,a);b.normalize();return b};THREE.SplineCurve=function(a){this.points=void 0==a?[]:a};THREE.SplineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.SplineCurve.prototype.getPoint=function(a){var b=new THREE.Vector2,c=[],d=this.points,e;e=(d.length-1)*a;a=Math.floor(e);e-=a;c[0]=0==a?a:a-1;c[1]=a;c[2]=a>d.length-2?d.length-1:a+1;c[3]=a>d.length-3?d.length-1:a+2;b.x=THREE.Curve.Utils.interpolate(d[c[0]].x,d[c[1]].x,d[c[2]].x,d[c[3]].x,e);b.y=THREE.Curve.Utils.interpolate(d[c[0]].y,d[c[1]].y,d[c[2]].y,d[c[3]].y,e);return b};THREE.EllipseCurve=function(a,b,c,d,e,f,g){this.aX=a;this.aY=b;this.xRadius=c;this.yRadius=d;this.aStartAngle=e;this.aEndAngle=f;this.aClockwise=g};THREE.EllipseCurve.prototype=Object.create(THREE.Curve.prototype);
THREE.EllipseCurve.prototype.getPoint=function(a){var b;b=this.aEndAngle-this.aStartAngle;0>b&&(b+=2*Math.PI);b>2*Math.PI&&(b-=2*Math.PI);b=!0===this.aClockwise?this.aEndAngle+(1-a)*(2*Math.PI-b):this.aStartAngle+a*b;a=this.aX+this.xRadius*Math.cos(b);b=this.aY+this.yRadius*Math.sin(b);return new THREE.Vector2(a,b)};THREE.ArcCurve=function(a,b,c,d,e,f){THREE.EllipseCurve.call(this,a,b,c,c,d,e,f)};THREE.ArcCurve.prototype=Object.create(THREE.EllipseCurve.prototype);THREE.LineCurve3=THREE.Curve.create(function(a,b){this.v1=a;this.v2=b},function(a){var b=new THREE.Vector3;b.subVectors(this.v2,this.v1);b.multiplyScalar(a);b.add(this.v1);return b});THREE.QuadraticBezierCurve3=THREE.Curve.create(function(a,b,c){this.v0=a;this.v1=b;this.v2=c},function(a){var b,c;b=THREE.Shape.Utils.b2(a,this.v0.x,this.v1.x,this.v2.x);c=THREE.Shape.Utils.b2(a,this.v0.y,this.v1.y,this.v2.y);a=THREE.Shape.Utils.b2(a,this.v0.z,this.v1.z,this.v2.z);return new THREE.Vector3(b,c,a)});THREE.CubicBezierCurve3=THREE.Curve.create(function(a,b,c,d){this.v0=a;this.v1=b;this.v2=c;this.v3=d},function(a){var b,c;b=THREE.Shape.Utils.b3(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);c=THREE.Shape.Utils.b3(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);a=THREE.Shape.Utils.b3(a,this.v0.z,this.v1.z,this.v2.z,this.v3.z);return new THREE.Vector3(b,c,a)});THREE.SplineCurve3=THREE.Curve.create(function(a){this.points=void 0==a?[]:a},function(a){var b=new THREE.Vector3,c=[],d=this.points,e;a*=d.length-1;e=Math.floor(a);a-=e;c[0]=0==e?e:e-1;c[1]=e;c[2]=e>d.length-2?d.length-1:e+1;c[3]=e>d.length-3?d.length-1:e+2;e=d[c[0]];var f=d[c[1]],g=d[c[2]],c=d[c[3]];b.x=THREE.Curve.Utils.interpolate(e.x,f.x,g.x,c.x,a);b.y=THREE.Curve.Utils.interpolate(e.y,f.y,g.y,c.y,a);b.z=THREE.Curve.Utils.interpolate(e.z,f.z,g.z,c.z,a);return b});THREE.ClosedSplineCurve3=THREE.Curve.create(function(a){this.points=void 0==a?[]:a},function(a){var b=new THREE.Vector3,c=[],d=this.points,e;e=(d.length-0)*a;a=Math.floor(e);e-=a;a+=0<a?0:(Math.floor(Math.abs(a)/d.length)+1)*d.length;c[0]=(a-1)%d.length;c[1]=a%d.length;c[2]=(a+1)%d.length;c[3]=(a+2)%d.length;b.x=THREE.Curve.Utils.interpolate(d[c[0]].x,d[c[1]].x,d[c[2]].x,d[c[3]].x,e);b.y=THREE.Curve.Utils.interpolate(d[c[0]].y,d[c[1]].y,d[c[2]].y,d[c[3]].y,e);b.z=THREE.Curve.Utils.interpolate(d[c[0]].z,
d[c[1]].z,d[c[2]].z,d[c[3]].z,e);return b});THREE.AnimationHandler=function(){var a=[],b={},c={update:function(b){for(var c=0;c<a.length;c++)a[c].update(b)},addToUpdate:function(b){-1===a.indexOf(b)&&a.push(b)},removeFromUpdate:function(b){b=a.indexOf(b);-1!==b&&a.splice(b,1)},add:function(a){if(void 0!==b[a.name])THREE.onwarning("THREE.AnimationHandler.add: Warning! "+a.name+" already exists in library. Overwriting.");b[a.name]=a;if(!0!==a.initialized){for(var c=0;c<a.hierarchy.length;c++){for(var d=0;d<a.hierarchy[c].keys.length;d++)if(0>
a.hierarchy[c].keys[d].time&&(a.hierarchy[c].keys[d].time=0),void 0!==a.hierarchy[c].keys[d].rot&&!(a.hierarchy[c].keys[d].rot instanceof THREE.Quaternion)){var k=a.hierarchy[c].keys[d].rot;a.hierarchy[c].keys[d].rot=new THREE.Quaternion(k[0],k[1],k[2],k[3])}if(a.hierarchy[c].keys.length&&void 0!==a.hierarchy[c].keys[0].morphTargets){k={};for(d=0;d<a.hierarchy[c].keys.length;d++)for(var h=0;h<a.hierarchy[c].keys[d].morphTargets.length;h++){var m=a.hierarchy[c].keys[d].morphTargets[h];k[m]=-1}a.hierarchy[c].usedMorphTargets=
k;for(d=0;d<a.hierarchy[c].keys.length;d++){var n={};for(m in k){for(h=0;h<a.hierarchy[c].keys[d].morphTargets.length;h++)if(a.hierarchy[c].keys[d].morphTargets[h]===m){n[m]=a.hierarchy[c].keys[d].morphTargetsInfluences[h];break}h===a.hierarchy[c].keys[d].morphTargets.length&&(n[m]=0)}a.hierarchy[c].keys[d].morphTargetsInfluences=n}}for(d=1;d<a.hierarchy[c].keys.length;d++)a.hierarchy[c].keys[d].time===a.hierarchy[c].keys[d-1].time&&(a.hierarchy[c].keys.splice(d,1),d--);for(d=0;d<a.hierarchy[c].keys.length;d++)a.hierarchy[c].keys[d].index=
d}a.initialized=!0}},get:function(a){if("string"===typeof a){if(b[a])return b[a];THREE.onwarning("THREE.AnimationHandler.get: Couldn't find animation "+a);return null}},parse:function(a){var b=[];if(a instanceof THREE.SkinnedMesh)for(var c=0;c<a.bones.length;c++)b.push(a.bones[c]);else d(a,b);return b}},d=function(a,b){b.push(a);for(var c=0;c<a.children.length;c++)d(a.children[c],b)};c.LINEAR=0;c.CATMULLROM=1;c.CATMULLROM_FORWARD=2;return c}();THREE.Animation=function(a,b){this.root=a;this.data=THREE.AnimationHandler.get(b);this.hierarchy=THREE.AnimationHandler.parse(a);this.currentTime=0;this.timeScale=1;this.isPlaying=!1;this.loop=this.isPaused=!0;this.interpolationType=THREE.AnimationHandler.LINEAR};THREE.Animation.prototype.play=function(a){this.currentTime=void 0!==a?a:0;!1===this.isPlaying&&(this.isPlaying=!0,this.reset(),this.update(0));this.isPaused=!1;THREE.AnimationHandler.addToUpdate(this)};
THREE.Animation.prototype.pause=function(){!0===this.isPaused?THREE.AnimationHandler.addToUpdate(this):THREE.AnimationHandler.removeFromUpdate(this);this.isPaused=!this.isPaused};THREE.Animation.prototype.stop=function(){this.isPaused=this.isPlaying=!1;THREE.AnimationHandler.removeFromUpdate(this)};
THREE.Animation.prototype.reset=function(){for(var a=0,b=this.hierarchy.length;a<b;a++){var c=this.hierarchy[a];c.matrixAutoUpdate=!0;void 0===c.animationCache&&(c.animationCache={},c.animationCache.prevKey={pos:0,rot:0,scl:0},c.animationCache.nextKey={pos:0,rot:0,scl:0},c.animationCache.originalMatrix=c instanceof THREE.Bone?c.skinMatrix:c.matrix);var d=c.animationCache.prevKey,c=c.animationCache.nextKey;d.pos=this.data.hierarchy[a].keys[0];d.rot=this.data.hierarchy[a].keys[0];d.scl=this.data.hierarchy[a].keys[0];
c.pos=this.getNextKeyWith("pos",a,1);c.rot=this.getNextKeyWith("rot",a,1);c.scl=this.getNextKeyWith("scl",a,1)}};
THREE.Animation.prototype.update=function(){var a=[],b=new THREE.Vector3,c=function(a,b){var c=[],k=[],h,m,n,q,s,r;h=(a.length-1)*b;m=Math.floor(h);h-=m;c[0]=0===m?m:m-1;c[1]=m;c[2]=m>a.length-2?m:m+1;c[3]=m>a.length-3?m:m+2;m=a[c[0]];q=a[c[1]];s=a[c[2]];r=a[c[3]];c=h*h;n=h*c;k[0]=d(m[0],q[0],s[0],r[0],h,c,n);k[1]=d(m[1],q[1],s[1],r[1],h,c,n);k[2]=d(m[2],q[2],s[2],r[2],h,c,n);return k},d=function(a,b,c,d,h,m,n){a=0.5*(c-a);d=0.5*(d-b);return(2*(b-c)+a+d)*n+(-3*(b-c)-2*a-d)*m+a*h+b};return function(d){if(!1!==
this.isPlaying){this.currentTime+=d*this.timeScale;var f;d=["pos","rot","scl"];var g=this.data.length;if(!0===this.loop&&this.currentTime>g)this.currentTime%=g,this.reset();else if(!1===this.loop&&this.currentTime>g){this.stop();return}this.currentTime=Math.min(this.currentTime,g);for(var g=0,k=this.hierarchy.length;g<k;g++)for(var h=this.hierarchy[g],m=h.animationCache,n=0;3>n;n++){f=d[n];var q=m.prevKey[f],s=m.nextKey[f];if(s.time<=this.currentTime){q=this.data.hierarchy[g].keys[0];for(s=this.getNextKeyWith(f,
g,1);s.time<this.currentTime&&s.index>q.index;)q=s,s=this.getNextKeyWith(f,g,s.index+1);m.prevKey[f]=q;m.nextKey[f]=s}h.matrixAutoUpdate=!0;h.matrixWorldNeedsUpdate=!0;var r=(this.currentTime-q.time)/(s.time-q.time),u=q[f],p=s[f];0>r&&(r=0);1<r&&(r=1);if("pos"===f)if(f=h.position,this.interpolationType===THREE.AnimationHandler.LINEAR)f.x=u[0]+(p[0]-u[0])*r,f.y=u[1]+(p[1]-u[1])*r,f.z=u[2]+(p[2]-u[2])*r;else{if(this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD)a[0]=
this.getPrevKeyWith("pos",g,q.index-1).pos,a[1]=u,a[2]=p,a[3]=this.getNextKeyWith("pos",g,s.index+1).pos,r=0.33*r+0.33,q=c(a,r),f.x=q[0],f.y=q[1],f.z=q[2],this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD&&(r=c(a,1.01*r),b.set(r[0],r[1],r[2]),b.sub(f),b.y=0,b.normalize(),f=Math.atan2(b.x,b.z),h.rotation.set(0,f,0))}else"rot"===f?THREE.Quaternion.slerp(u,p,h.quaternion,r):"scl"===f&&(f=h.scale,f.x=u[0]+(p[0]-u[0])*r,f.y=u[1]+(p[1]-u[1])*r,f.z=u[2]+(p[2]-u[2])*r)}}}}();
THREE.Animation.prototype.getNextKeyWith=function(a,b,c){var d=this.data.hierarchy[b].keys;for(c=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?c<d.length-1?c:d.length-1:c%d.length;c<d.length;c++)if(void 0!==d[c][a])return d[c];return this.data.hierarchy[b].keys[0]};
THREE.Animation.prototype.getPrevKeyWith=function(a,b,c){var d=this.data.hierarchy[b].keys;for(c=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?0<c?c:0:0<=c?c:c+d.length;0<=c;c--)if(void 0!==d[c][a])return d[c];return this.data.hierarchy[b].keys[d.length-1]};THREE.KeyFrameAnimation=function(a,b){this.root=a;this.data=THREE.AnimationHandler.get(b);this.hierarchy=THREE.AnimationHandler.parse(a);this.currentTime=0;this.timeScale=0.001;this.isPlaying=!1;this.loop=this.isPaused=!0;for(var c=0,d=this.hierarchy.length;c<d;c++){var e=this.data.hierarchy[c].sids,f=this.hierarchy[c];if(this.data.hierarchy[c].keys.length&&e){for(var g=0;g<e.length;g++){var k=e[g],h=this.getNextKeyWith(k,c,0);h&&h.apply(k)}f.matrixAutoUpdate=!1;this.data.hierarchy[c].node.updateMatrix();
f.matrixWorldNeedsUpdate=!0}}};
THREE.KeyFrameAnimation.prototype.play=function(a){this.currentTime=void 0!==a?a:0;if(!1===this.isPlaying){this.isPlaying=!0;var b=this.hierarchy.length,c,d;for(a=0;a<b;a++)c=this.hierarchy[a],d=this.data.hierarchy[a],void 0===d.animationCache&&(d.animationCache={},d.animationCache.prevKey=null,d.animationCache.nextKey=null,d.animationCache.originalMatrix=c instanceof THREE.Bone?c.skinMatrix:c.matrix),c=this.data.hierarchy[a].keys,c.length&&(d.animationCache.prevKey=c[0],d.animationCache.nextKey=
c[1],this.startTime=Math.min(c[0].time,this.startTime),this.endTime=Math.max(c[c.length-1].time,this.endTime));this.update(0)}this.isPaused=!1;THREE.AnimationHandler.addToUpdate(this)};THREE.KeyFrameAnimation.prototype.pause=function(){this.isPaused?THREE.AnimationHandler.addToUpdate(this):THREE.AnimationHandler.removeFromUpdate(this);this.isPaused=!this.isPaused};
THREE.KeyFrameAnimation.prototype.stop=function(){this.isPaused=this.isPlaying=!1;THREE.AnimationHandler.removeFromUpdate(this);for(var a=0;a<this.data.hierarchy.length;a++){var b=this.hierarchy[a],c=this.data.hierarchy[a];if(void 0!==c.animationCache){var d=c.animationCache.originalMatrix;b instanceof THREE.Bone?(d.copy(b.skinMatrix),b.skinMatrix=d):(d.copy(b.matrix),b.matrix=d);delete c.animationCache}}};
THREE.KeyFrameAnimation.prototype.update=function(a){if(!1!==this.isPlaying){this.currentTime+=a*this.timeScale;a=this.data.length;!0===this.loop&&this.currentTime>a&&(this.currentTime%=a);this.currentTime=Math.min(this.currentTime,a);a=0;for(var b=this.hierarchy.length;a<b;a++){var c=this.hierarchy[a],d=this.data.hierarchy[a],e=d.keys,d=d.animationCache;if(e.length){var f=d.prevKey,g=d.nextKey;if(g.time<=this.currentTime){for(;g.time<this.currentTime&&g.index>f.index;)f=g,g=e[f.index+1];d.prevKey=
f;d.nextKey=g}g.time>=this.currentTime?f.interpolate(g,this.currentTime):f.interpolate(g,g.time);this.data.hierarchy[a].node.updateMatrix();c.matrixWorldNeedsUpdate=!0}}}};THREE.KeyFrameAnimation.prototype.getNextKeyWith=function(a,b,c){b=this.data.hierarchy[b].keys;for(c%=b.length;c<b.length;c++)if(b[c].hasTarget(a))return b[c];return b[0]};
THREE.KeyFrameAnimation.prototype.getPrevKeyWith=function(a,b,c){b=this.data.hierarchy[b].keys;for(c=0<=c?c:c+b.length;0<=c;c--)if(b[c].hasTarget(a))return b[c];return b[b.length-1]};THREE.MorphAnimation=function(a){this.mesh=a;this.frames=a.morphTargetInfluences.length;this.currentTime=0;this.duration=1E3;this.loop=!0;this.isPlaying=!1};
THREE.MorphAnimation.prototype={play:function(){this.isPlaying=!0},pause:function(){this.isPlaying=!1},update:function(){var a=0,b=0;return function(c){if(!1!==this.isPlaying){this.currentTime+=c;!0===this.loop&&this.currentTime>this.duration&&(this.currentTime%=this.duration);this.currentTime=Math.min(this.currentTime,this.duration);c=this.duration/this.frames;var d=Math.floor(this.currentTime/c);d!=b&&(this.mesh.morphTargetInfluences[a]=0,this.mesh.morphTargetInfluences[b]=1,this.mesh.morphTargetInfluences[d]=
0,a=b,b=d);this.mesh.morphTargetInfluences[d]=this.currentTime%c/c;this.mesh.morphTargetInfluences[a]=1-this.mesh.morphTargetInfluences[d]}}}()};THREE.CubeCamera=function(a,b,c){THREE.Object3D.call(this);this.className="CubeCamera";var d=new THREE.PerspectiveCamera(90,1,a,b);d.up.set(0,-1,0);d.lookAt(new THREE.Vector3(1,0,0));this.add(d);var e=new THREE.PerspectiveCamera(90,1,a,b);e.up.set(0,-1,0);e.lookAt(new THREE.Vector3(-1,0,0));this.add(e);var f=new THREE.PerspectiveCamera(90,1,a,b);f.up.set(0,0,1);f.lookAt(new THREE.Vector3(0,1,0));this.add(f);var g=new THREE.PerspectiveCamera(90,1,a,b);g.up.set(0,0,-1);g.lookAt(new THREE.Vector3(0,
-1,0));this.add(g);var k=new THREE.PerspectiveCamera(90,1,a,b);k.up.set(0,-1,0);k.lookAt(new THREE.Vector3(0,0,1));this.add(k);var h=new THREE.PerspectiveCamera(90,1,a,b);h.up.set(0,-1,0);h.lookAt(new THREE.Vector3(0,0,-1));this.add(h);this.renderTarget=new THREE.WebGLRenderTargetCube(c,c,{format:THREE.RGBFormat,magFilter:THREE.LinearFilter,minFilter:THREE.LinearFilter});this.updateCubeMap=function(a,b){var c=this.renderTarget,s=c.generateMipmaps;c.generateMipmaps=!1;c.activeCubeFace=0;a.render(b,
d,c);c.activeCubeFace=1;a.render(b,e,c);c.activeCubeFace=2;a.render(b,f,c);c.activeCubeFace=3;a.render(b,g,c);c.activeCubeFace=4;a.render(b,k,c);c.generateMipmaps=s;c.activeCubeFace=5;a.render(b,h,c)}};THREE.CubeCamera.prototype=Object.create(THREE.Object3D.prototype);THREE.CombinedCamera=function(a,b,c,d,e,f,g){THREE.Camera.call(this);this.className="CombinedCamera";this.fov=c;this.left=-a/2;this.right=a/2;this.top=b/2;this.bottom=-b/2;this.cameraO=new THREE.OrthographicCamera(a/-2,a/2,b/2,b/-2,f,g);this.cameraP=new THREE.PerspectiveCamera(c,a/b,d,e);this.zoom=1;this.toPerspective()};THREE.CombinedCamera.prototype=Object.create(THREE.Camera.prototype);
THREE.CombinedCamera.prototype.toPerspective=function(){this.near=this.cameraP.near;this.far=this.cameraP.far;this.cameraP.fov=this.fov/this.zoom;this.cameraP.updateProjectionMatrix();this.projectionMatrix=this.cameraP.projectionMatrix;this.inPerspectiveMode=!0;this.inOrthographicMode=!1};
THREE.CombinedCamera.prototype.toOrthographic=function(){var a=this.cameraP.aspect,b=(this.cameraP.near+this.cameraP.far)/2,b=Math.tan(this.fov/2)*b,a=2*b*a/2,b=b/this.zoom,a=a/this.zoom;this.cameraO.left=-a;this.cameraO.right=a;this.cameraO.top=b;this.cameraO.bottom=-b;this.cameraO.updateProjectionMatrix();this.near=this.cameraO.near;this.far=this.cameraO.far;this.projectionMatrix=this.cameraO.projectionMatrix;this.inPerspectiveMode=!1;this.inOrthographicMode=!0};
THREE.CombinedCamera.prototype.setSize=function(a,b){this.cameraP.aspect=a/b;this.left=-a/2;this.right=a/2;this.top=b/2;this.bottom=-b/2};THREE.CombinedCamera.prototype.setFov=function(a){this.fov=a;this.inPerspectiveMode?this.toPerspective():this.toOrthographic()};THREE.CombinedCamera.prototype.updateProjectionMatrix=function(){this.inPerspectiveMode?this.toPerspective():(this.toPerspective(),this.toOrthographic())};
THREE.CombinedCamera.prototype.setLens=function(a,b){void 0===b&&(b=24);var c=2*THREE.Math.radToDeg(Math.atan(b/(2*a)));this.setFov(c);return c};THREE.CombinedCamera.prototype.setZoom=function(a){this.zoom=a;this.inPerspectiveMode?this.toPerspective():this.toOrthographic()};THREE.CombinedCamera.prototype.toFrontView=function(){this.rotation.x=0;this.rotation.y=0;this.rotation.z=0;this.rotationAutoUpdate=!1};
THREE.CombinedCamera.prototype.toBackView=function(){this.rotation.x=0;this.rotation.y=Math.PI;this.rotation.z=0;this.rotationAutoUpdate=!1};THREE.CombinedCamera.prototype.toLeftView=function(){this.rotation.x=0;this.rotation.y=-Math.PI/2;this.rotation.z=0;this.rotationAutoUpdate=!1};THREE.CombinedCamera.prototype.toRightView=function(){this.rotation.x=0;this.rotation.y=Math.PI/2;this.rotation.z=0;this.rotationAutoUpdate=!1};
THREE.CombinedCamera.prototype.toTopView=function(){this.rotation.x=-Math.PI/2;this.rotation.y=0;this.rotation.z=0;this.rotationAutoUpdate=!1};THREE.CombinedCamera.prototype.toBottomView=function(){this.rotation.x=Math.PI/2;this.rotation.y=0;this.rotation.z=0;this.rotationAutoUpdate=!1};THREE.BoxGeometry=function(a,b,c,d,e,f){function g(a,b,c,d,e,f,g,p){var w,v=k.widthSegments,t=k.heightSegments,x=e/2,B=f/2,J=k.vertices.length;if("x"===a&&"y"===b||"y"===a&&"x"===b)w="z";else if("x"===a&&"z"===b||"z"===a&&"x"===b)w="y",t=k.depthSegments;else if("z"===a&&"y"===b||"y"===a&&"z"===b)w="x",v=k.depthSegments;var E=v+1,K=t+1,A=e/v,z=f/t,L=new THREE.Vector3;L[w]=0<g?1:-1;for(e=0;e<K;e++)for(f=0;f<E;f++){var F=new THREE.Vector3;F[a]=(f*A-x)*c;F[b]=(e*z-B)*d;F[w]=g;k.vertices.push(F)}for(e=
0;e<t;e++)for(f=0;f<v;f++)B=f+E*e,a=f+E*(e+1),b=f+1+E*(e+1),c=f+1+E*e,d=new THREE.Vector2(f/v,1-e/t),g=new THREE.Vector2(f/v,1-(e+1)/t),w=new THREE.Vector2((f+1)/v,1-(e+1)/t),x=new THREE.Vector2((f+1)/v,1-e/t),B=new THREE.Face3(B+J,a+J,c+J),B.normal.copy(L),B.vertexNormals.push(L.clone(),L.clone(),L.clone()),B.materialIndex=p,k.faces.push(B),k.faceVertexUvs[0].push([d,g,x]),B=new THREE.Face3(a+J,b+J,c+J),B.normal.copy(L),B.vertexNormals.push(L.clone(),L.clone(),L.clone()),B.materialIndex=p,k.faces.push(B),
k.faceVertexUvs[0].push([g.clone(),w,x.clone()])}THREE.Geometry.call(this);this.className="BoxGeometry";var k=this;this.width=a;this.height=b;this.depth=c;this.widthSegments=d||1;this.heightSegments=e||1;this.depthSegments=f||1;a=this.width/2;b=this.height/2;c=this.depth/2;g("z","y",-1,-1,this.depth,this.height,a,0);g("z","y",1,-1,this.depth,this.height,-a,1);g("x","z",1,1,this.width,this.depth,b,2);g("x","z",1,-1,this.width,this.depth,-b,3);g("x","y",1,-1,this.width,this.height,c,4);g("x","y",-1,
-1,this.width,this.height,-c,5);this.computeCentroids();this.mergeVertices()};THREE.BoxGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.CircleGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.className="CircleGeometry";this.radius=a=a||50;this.segments=b=void 0!==b?Math.max(3,b):8;this.thetaStart=c=void 0!==c?c:0;this.thetaLength=d=void 0!==d?d:2*Math.PI;var e,f=[];e=new THREE.Vector3;var g=new THREE.Vector2(0.5,0.5);this.vertices.push(e);f.push(g);for(e=0;e<=b;e++){var k=new THREE.Vector3,h=c+e/b*d;k.x=a*Math.cos(h);k.y=a*Math.sin(h);this.vertices.push(k);f.push(new THREE.Vector2((k.x/a+1)/2,(k.y/a+1)/2))}c=new THREE.Vector3(0,
0,1);for(e=1;e<=b;e++)this.faces.push(new THREE.Face3(e,e+1,0,[c.clone(),c.clone(),c.clone()])),this.faceVertexUvs[0].push([f[e].clone(),f[e+1].clone(),g.clone()]);this.computeCentroids();this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,a)};THREE.CircleGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.CubeGeometry=THREE.BoxGeometry;THREE.CylinderGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);this.className="CylinderGeometry";this.radiusTop=a=void 0!==a?a:20;this.radiusBottom=b=void 0!==b?b:20;this.height=c=void 0!==c?c:100;this.radialSegments=d=d||8;this.heightSegments=e=e||1;this.openEnded=f=void 0!==f?f:!1;var g=c/2,k,h,m=[],n=[];for(h=0;h<=e;h++){var q=[],s=[],r=h/e,u=r*(b-a)+a;for(k=0;k<=d;k++){var p=k/d,w=new THREE.Vector3;w.x=u*Math.sin(p*Math.PI*2);w.y=-r*c+g;w.z=u*Math.cos(p*Math.PI*2);this.vertices.push(w);
q.push(this.vertices.length-1);s.push(new THREE.Vector2(p,1-r))}m.push(q);n.push(s)}c=(b-a)/c;for(k=0;k<d;k++)for(0!==a?(q=this.vertices[m[0][k]].clone(),s=this.vertices[m[0][k+1]].clone()):(q=this.vertices[m[1][k]].clone(),s=this.vertices[m[1][k+1]].clone()),q.setY(Math.sqrt(q.x*q.x+q.z*q.z)*c).normalize(),s.setY(Math.sqrt(s.x*s.x+s.z*s.z)*c).normalize(),h=0;h<e;h++){var r=m[h][k],u=m[h+1][k],p=m[h+1][k+1],w=m[h][k+1],v=q.clone(),t=q.clone(),x=s.clone(),B=s.clone(),J=n[h][k].clone(),E=n[h+1][k].clone(),
K=n[h+1][k+1].clone(),A=n[h][k+1].clone();this.faces.push(new THREE.Face3(r,u,w,[v,t,B]));this.faceVertexUvs[0].push([J,E,A]);this.faces.push(new THREE.Face3(u,p,w,[t.clone(),x,B.clone()]));this.faceVertexUvs[0].push([E.clone(),K,A.clone()])}if(!1===f&&0<a)for(this.vertices.push(new THREE.Vector3(0,g,0)),k=0;k<d;k++)r=m[0][k],u=m[0][k+1],p=this.vertices.length-1,v=new THREE.Vector3(0,1,0),t=new THREE.Vector3(0,1,0),x=new THREE.Vector3(0,1,0),J=n[0][k].clone(),E=n[0][k+1].clone(),K=new THREE.Vector2(E.x,
0),this.faces.push(new THREE.Face3(r,u,p,[v,t,x])),this.faceVertexUvs[0].push([J,E,K]);if(!1===f&&0<b)for(this.vertices.push(new THREE.Vector3(0,-g,0)),k=0;k<d;k++)r=m[h][k+1],u=m[h][k],p=this.vertices.length-1,v=new THREE.Vector3(0,-1,0),t=new THREE.Vector3(0,-1,0),x=new THREE.Vector3(0,-1,0),J=n[h][k+1].clone(),E=n[h][k].clone(),K=new THREE.Vector2(E.x,1),this.faces.push(new THREE.Face3(r,u,p,[v,t,x])),this.faceVertexUvs[0].push([J,E,K]);this.computeCentroids();this.computeFaceNormals()};
THREE.CylinderGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ExtrudeGeometry=function(a,b){"undefined"!==typeof a&&(THREE.Geometry.call(this),this.className="ExtrudeGeometry",a=a instanceof Array?a:[a],this.shapebb=a[a.length-1].getBoundingBox(),this.addShapeList(a,b),this.computeCentroids(),this.computeFaceNormals())};THREE.ExtrudeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ExtrudeGeometry.prototype.addShapeList=function(a,b){for(var c=a.length,d=0;d<c;d++)this.addShape(a[d],b)};
THREE.ExtrudeGeometry.prototype.addShape=function(a,b){function c(a,b,c){return b?b.clone().multiplyScalar(c).add(a):THREE.onerror("die, vec not specified")}function d(a,b,c){var d=THREE.Math.sign,e=1,e=a.x-b.x,f=a.y-b.y,g=c.x-a.x,h=c.y-a.y,k=e*e+f*f;if(1E-10<Math.abs(e*h-f*g)){var m=Math.sqrt(k),d=Math.sqrt(g*g+h*h),k=b.x-f/m;b=b.y+e/m;g=((c.x-h/d-k)*h-(c.y+g/d-b)*g)/(e*h-f*g);c=k+e*g-a.x;a=b+f*g-a.y;e=c*c+a*a;if(2>=e)return new THREE.Vector2(c,a);e=Math.sqrt(e/2)}else a=!1,1E-10<e?1E-10<g&&(a=!0):
-1E-10>e?-1E-10>g&&(a=!0):d(f)==d(h)&&(a=!0),a?(c=-f,a=e,e=Math.sqrt(k)):(c=e,a=f,e=Math.sqrt(k/2));return new THREE.Vector2(c/e,a/e)}function e(c,d){var e,f;for(N=c.length;0<=--N;){e=N;f=N-1;0>f&&(f=c.length-1);for(var g=0,h=r+2*n,g=0;g<h;g++){var k=ga*g,m=ga*(g+1),p=d+e+k,k=d+f+k,q=d+f+m,m=d+e+m,s=c,u=g,w=h,v=e,y=f,p=p+P,k=k+P,q=q+P,m=m+P;F.faces.push(new THREE.Face3(p,k,m,null,null,t));F.faces.push(new THREE.Face3(k,q,m,null,null,t));p=x.generateSideWallUV(F,a,s,b,p,k,q,m,u,w,v,y);F.faceVertexUvs[0].push([p[0],
p[1],p[3]]);F.faceVertexUvs[0].push([p[1],p[2],p[3]])}}}function f(a,b,c){F.vertices.push(new THREE.Vector3(a,b,c))}function g(c,d,e,f){c+=P;d+=P;e+=P;F.faces.push(new THREE.Face3(c,d,e,null,null,v));c=f?x.generateBottomUV(F,a,b,c,d,e):x.generateTopUV(F,a,b,c,d,e);F.faceVertexUvs[0].push(c)}var k=void 0!==b.amount?b.amount:100,h=void 0!==b.bevelThickness?b.bevelThickness:6,m=void 0!==b.bevelSize?b.bevelSize:h-2,n=void 0!==b.bevelSegments?b.bevelSegments:3,q=void 0!==b.bevelEnabled?b.bevelEnabled:
!0,s=void 0!==b.curveSegments?b.curveSegments:12,r=void 0!==b.steps?b.steps:1,u=b.extrudePath,p,w=!1,v=b.material,t=b.extrudeMaterial,x=void 0!==b.UVGenerator?b.UVGenerator:THREE.ExtrudeGeometry.WorldUVGenerator,B,J,E,K;u&&(p=u.getSpacedPoints(r),w=!0,q=!1,B=void 0!==b.frames?b.frames:new THREE.TubeGeometry.FrenetFrames(u,r,!1),J=new THREE.Vector3,E=new THREE.Vector3,K=new THREE.Vector3);q||(m=h=n=0);var A,z,L,F=this,P=this.vertices.length,u=a.extractPoints(s),s=u.shape,y=u.holes;if(u=!THREE.Shape.Utils.isClockWise(s)){s=
s.reverse();z=0;for(L=y.length;z<L;z++)A=y[z],THREE.Shape.Utils.isClockWise(A)&&(y[z]=A.reverse());u=!1}var G=THREE.Shape.Utils.triangulateShape(s,y),C=s;z=0;for(L=y.length;z<L;z++)A=y[z],s=s.concat(A);var D,H,Q,aa,V,ga=s.length,Y,ha=G.length,u=[],N=0;Q=C.length;D=Q-1;for(H=N+1;N<Q;N++,D++,H++)D===Q&&(D=0),H===Q&&(H=0),u[N]=d(C[N],C[D],C[H]);var ba=[],I,U=u.concat();z=0;for(L=y.length;z<L;z++){A=y[z];I=[];N=0;Q=A.length;D=Q-1;for(H=N+1;N<Q;N++,D++,H++)D===Q&&(D=0),H===Q&&(H=0),I[N]=d(A[N],A[D],A[H]);
ba.push(I);U=U.concat(I)}for(D=0;D<n;D++){Q=D/n;aa=h*(1-Q);H=m*Math.sin(Q*Math.PI/2);N=0;for(Q=C.length;N<Q;N++)V=c(C[N],u[N],H),f(V.x,V.y,-aa);z=0;for(L=y.length;z<L;z++)for(A=y[z],I=ba[z],N=0,Q=A.length;N<Q;N++)V=c(A[N],I[N],H),f(V.x,V.y,-aa)}H=m;for(N=0;N<ga;N++)V=q?c(s[N],U[N],H):s[N],w?(E.copy(B.normals[0]).multiplyScalar(V.x),J.copy(B.binormals[0]).multiplyScalar(V.y),K.copy(p[0]).add(E).add(J),f(K.x,K.y,K.z)):f(V.x,V.y,0);for(Q=1;Q<=r;Q++)for(N=0;N<ga;N++)V=q?c(s[N],U[N],H):s[N],w?(E.copy(B.normals[Q]).multiplyScalar(V.x),
J.copy(B.binormals[Q]).multiplyScalar(V.y),K.copy(p[Q]).add(E).add(J),f(K.x,K.y,K.z)):f(V.x,V.y,k/r*Q);for(D=n-1;0<=D;D--){Q=D/n;aa=h*(1-Q);H=m*Math.sin(Q*Math.PI/2);N=0;for(Q=C.length;N<Q;N++)V=c(C[N],u[N],H),f(V.x,V.y,k+aa);z=0;for(L=y.length;z<L;z++)for(A=y[z],I=ba[z],N=0,Q=A.length;N<Q;N++)V=c(A[N],I[N],H),w?f(V.x,V.y+p[r-1].y,p[r-1].x+aa):f(V.x,V.y,k+aa)}(function(){if(q){var a;a=0*ga;for(N=0;N<ha;N++)Y=G[N],g(Y[2]+a,Y[1]+a,Y[0]+a,!0);a=r+2*n;a*=ga;for(N=0;N<ha;N++)Y=G[N],g(Y[0]+a,Y[1]+a,Y[2]+
a,!1)}else{for(N=0;N<ha;N++)Y=G[N],g(Y[2],Y[1],Y[0],!0);for(N=0;N<ha;N++)Y=G[N],g(Y[0]+ga*r,Y[1]+ga*r,Y[2]+ga*r,!1)}})();(function(){var a=0;e(C,a);a+=C.length;z=0;for(L=y.length;z<L;z++)A=y[z],e(A,a),a+=A.length})()};
THREE.ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(a,b,c,d,e,f){b=a.vertices[e].x;e=a.vertices[e].y;c=a.vertices[f].x;f=a.vertices[f].y;return[new THREE.Vector2(a.vertices[d].x,a.vertices[d].y),new THREE.Vector2(b,e),new THREE.Vector2(c,f)]},generateBottomUV:function(a,b,c,d,e,f){return this.generateTopUV(a,b,c,d,e,f)},generateSideWallUV:function(a,b,c,d,e,f,g,k,h,m,n,q){b=a.vertices[e].x;c=a.vertices[e].y;e=a.vertices[e].z;d=a.vertices[f].x;h=a.vertices[f].y;f=a.vertices[f].z;m=a.vertices[g].x;
n=a.vertices[g].y;g=a.vertices[g].z;q=a.vertices[k].x;var s=a.vertices[k].y;a=a.vertices[k].z;return 0.01>Math.abs(c-h)?[new THREE.Vector2(b,1-e),new THREE.Vector2(d,1-f),new THREE.Vector2(m,1-g),new THREE.Vector2(q,1-a)]:[new THREE.Vector2(c,1-e),new THREE.Vector2(h,1-f),new THREE.Vector2(n,1-g),new THREE.Vector2(s,1-a)]}};THREE.ExtrudeGeometry.__v1=new THREE.Vector2;THREE.ExtrudeGeometry.__v2=new THREE.Vector2;THREE.ExtrudeGeometry.__v3=new THREE.Vector2;THREE.ExtrudeGeometry.__v4=new THREE.Vector2;
THREE.ExtrudeGeometry.__v5=new THREE.Vector2;THREE.ExtrudeGeometry.__v6=new THREE.Vector2;THREE.ShapeGeometry=function(a,b){THREE.Geometry.call(this);this.className="ShapeGeometry";!1===a instanceof Array&&(a=[a]);this.shapebb=a[a.length-1].getBoundingBox();this.addShapeList(a,b);this.computeCentroids();this.computeFaceNormals()};THREE.ShapeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ShapeGeometry.prototype.addShapeList=function(a,b){for(var c=0,d=a.length;c<d;c++)this.addShape(a[c],b);return this};
THREE.ShapeGeometry.prototype.addShape=function(a,b){void 0===b&&(b={});var c=b.material,d=void 0===b.UVGenerator?THREE.ExtrudeGeometry.WorldUVGenerator:b.UVGenerator,e,f,g,k=this.vertices.length;e=a.extractPoints(void 0!==b.curveSegments?b.curveSegments:12);var h=e.shape,m=e.holes;if(!THREE.Shape.Utils.isClockWise(h))for(h=h.reverse(),e=0,f=m.length;e<f;e++)g=m[e],THREE.Shape.Utils.isClockWise(g)&&(m[e]=g.reverse());var n=THREE.Shape.Utils.triangulateShape(h,m);e=0;for(f=m.length;e<f;e++)g=m[e],
h=h.concat(g);m=h.length;f=n.length;for(e=0;e<m;e++)g=h[e],this.vertices.push(new THREE.Vector3(g.x,g.y,0));for(e=0;e<f;e++)m=n[e],h=m[0]+k,g=m[1]+k,m=m[2]+k,this.faces.push(new THREE.Face3(h,g,m,null,null,c)),this.faceVertexUvs[0].push(d.generateBottomUV(this,a,b,h,g,m))};THREE.LatheGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.className="LatheGeometry";b=b||12;c=c||0;d=d||2*Math.PI;for(var e=1/(a.length-1),f=1/b,g=0,k=b;g<=k;g++)for(var h=c+g*f*d,m=Math.cos(h),n=Math.sin(h),h=0,q=a.length;h<q;h++){var s=a[h],r=new THREE.Vector3;r.x=m*s.x-n*s.y;r.y=n*s.x+m*s.y;r.z=s.z;this.vertices.push(r)}c=a.length;g=0;for(k=b;g<k;g++)for(h=0,q=a.length-1;h<q;h++){b=n=h+c*g;d=n+c;var m=n+1+c,n=n+1,s=g*f,r=h*e,u=s+f,p=r+e;this.faces.push(new THREE.Face3(b,d,n));this.faceVertexUvs[0].push([new THREE.Vector2(s,
r),new THREE.Vector2(u,r),new THREE.Vector2(s,p)]);this.faces.push(new THREE.Face3(d,m,n));this.faceVertexUvs[0].push([new THREE.Vector2(u,r),new THREE.Vector2(u,p),new THREE.Vector2(s,p)])}this.mergeVertices();this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals()};THREE.LatheGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.PlaneGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.className="PlaneGeometry";this.width=a;this.height=b;this.widthSegments=c||1;this.heightSegments=d||1;var e=a/2,f=b/2;c=this.widthSegments;d=this.heightSegments;var g=c+1,k=d+1,h=this.width/c,m=this.height/d,n=new THREE.Vector3(0,0,1);for(a=0;a<k;a++)for(b=0;b<g;b++)this.vertices.push(new THREE.Vector3(b*h-e,-(a*m-f),0));for(a=0;a<d;a++)for(b=0;b<c;b++){var q=b+g*a,e=b+g*(a+1),f=b+1+g*(a+1),k=b+1+g*a,h=new THREE.Vector2(b/c,1-a/
d),m=new THREE.Vector2(b/c,1-(a+1)/d),s=new THREE.Vector2((b+1)/c,1-(a+1)/d),r=new THREE.Vector2((b+1)/c,1-a/d),q=new THREE.Face3(q,e,k);q.normal.copy(n);q.vertexNormals.push(n.clone(),n.clone(),n.clone());this.faces.push(q);this.faceVertexUvs[0].push([h,m,r]);q=new THREE.Face3(e,f,k);q.normal.copy(n);q.vertexNormals.push(n.clone(),n.clone(),n.clone());this.faces.push(q);this.faceVertexUvs[0].push([m.clone(),s,r.clone()])}this.computeCentroids()};THREE.PlaneGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.RingGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);this.className="RingGeometry";a=a||0;b=b||50;e=void 0!==e?e:0;f=void 0!==f?f:2*Math.PI;c=void 0!==c?Math.max(3,c):8;d=void 0!==d?Math.max(3,d):8;var g,k=[],h=a,m=(b-a)/d;for(a=0;a<=d;a++){for(g=0;g<=c;g++){var n=new THREE.Vector3,q=e+g/c*f;n.x=h*Math.cos(q);n.y=h*Math.sin(q);this.vertices.push(n);k.push(new THREE.Vector2((n.x/b+1)/2,(n.y/b+1)/2))}h+=m}b=new THREE.Vector3(0,0,1);for(a=0;a<d;a++)for(e=a*c,g=0;g<=c;g++)q=g+e,f=q+a,m=
q+c+a,n=q+c+1+a,this.faces.push(new THREE.Face3(f,m,n,[b.clone(),b.clone(),b.clone()])),this.faceVertexUvs[0].push([k[f].clone(),k[m].clone(),k[n].clone()]),f=q+a,m=q+c+1+a,n=q+1+a,this.faces.push(new THREE.Face3(f,m,n,[b.clone(),b.clone(),b.clone()])),this.faceVertexUvs[0].push([k[f].clone(),k[m].clone(),k[n].clone()]);this.computeCentroids();this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,h)};THREE.RingGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.SphereGeometry=function(a,b,c,d,e,f,g){THREE.Geometry.call(this);this.className="SphereGeometry";this.radius=a=a||50;this.widthSegments=b=Math.max(3,Math.floor(b)||8);this.heightSegments=c=Math.max(2,Math.floor(c)||6);this.phiStart=d=void 0!==d?d:0;this.phiLength=e=void 0!==e?e:2*Math.PI;this.thetaStart=f=void 0!==f?f:0;this.thetaLength=g=void 0!==g?g:Math.PI;var k,h,m=[],n=[];for(h=0;h<=c;h++){var q=[],s=[];for(k=0;k<=b;k++){var r=k/b,u=h/c,p=new THREE.Vector3;p.x=-a*Math.cos(d+r*e)*Math.sin(f+
u*g);p.y=a*Math.cos(f+u*g);p.z=a*Math.sin(d+r*e)*Math.sin(f+u*g);this.vertices.push(p);q.push(this.vertices.length-1);s.push(new THREE.Vector2(r,1-u))}m.push(q);n.push(s)}for(h=0;h<this.heightSegments;h++)for(k=0;k<this.widthSegments;k++){b=m[h][k+1];c=m[h][k];d=m[h+1][k];e=m[h+1][k+1];f=this.vertices[b].clone().normalize();g=this.vertices[c].clone().normalize();var q=this.vertices[d].clone().normalize(),s=this.vertices[e].clone().normalize(),r=n[h][k+1].clone(),u=n[h][k].clone(),p=n[h+1][k].clone(),
w=n[h+1][k+1].clone();Math.abs(this.vertices[b].y)===this.radius?(r.x=(r.x+u.x)/2,this.faces.push(new THREE.Face3(b,d,e,[f,q,s])),this.faceVertexUvs[0].push([r,p,w])):Math.abs(this.vertices[d].y)===this.radius?(p.x=(p.x+w.x)/2,this.faces.push(new THREE.Face3(b,c,d,[f,g,q])),this.faceVertexUvs[0].push([r,u,p])):(this.faces.push(new THREE.Face3(b,c,e,[f,g,s])),this.faceVertexUvs[0].push([r,u,w]),this.faces.push(new THREE.Face3(c,d,e,[g.clone(),q,s.clone()])),this.faceVertexUvs[0].push([u.clone(),p,
w.clone()]))}this.computeCentroids();this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,a)};THREE.SphereGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TextGeometry=function(a,b){this.className="TextGeometry";b=b||{};var c=THREE.FontUtils.generateShapes(a,b);b.amount=void 0!==b.height?b.height:50;void 0===b.bevelThickness&&(b.bevelThickness=10);void 0===b.bevelSize&&(b.bevelSize=8);void 0===b.bevelEnabled&&(b.bevelEnabled=!1);THREE.ExtrudeGeometry.call(this,c,b)};THREE.TextGeometry.prototype=Object.create(THREE.ExtrudeGeometry.prototype);THREE.TorusGeometry=function(a,b,c,d,e){THREE.Geometry.call(this);this.className="TorusGeometry";this.radius=a||100;this.tube=b||40;this.radialSegments=c||8;this.tubularSegments=d||6;this.arc=e||2*Math.PI;e=new THREE.Vector3;a=[];b=[];for(c=0;c<=this.radialSegments;c++)for(d=0;d<=this.tubularSegments;d++){var f=d/this.tubularSegments*this.arc,g=c/this.radialSegments*Math.PI*2;e.x=this.radius*Math.cos(f);e.y=this.radius*Math.sin(f);var k=new THREE.Vector3;k.x=(this.radius+this.tube*Math.cos(g))*Math.cos(f);
k.y=(this.radius+this.tube*Math.cos(g))*Math.sin(f);k.z=this.tube*Math.sin(g);this.vertices.push(k);a.push(new THREE.Vector2(d/this.tubularSegments,c/this.radialSegments));b.push(k.clone().sub(e).normalize())}for(c=1;c<=this.radialSegments;c++)for(d=1;d<=this.tubularSegments;d++){e=(this.tubularSegments+1)*c+d-1;var f=(this.tubularSegments+1)*(c-1)+d-1,g=(this.tubularSegments+1)*(c-1)+d,k=(this.tubularSegments+1)*c+d,h=new THREE.Face3(e,f,k,[b[e].clone(),b[f].clone(),b[k].clone()]);this.faces.push(h);
this.faceVertexUvs[0].push([a[e].clone(),a[f].clone(),a[k].clone()]);h=new THREE.Face3(f,g,k,[b[f].clone(),b[g].clone(),b[k].clone()]);this.faces.push(h);this.faceVertexUvs[0].push([a[f].clone(),a[g].clone(),a[k].clone()])}this.computeCentroids();this.computeFaceNormals()};THREE.TorusGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TorusKnotGeometry=function(a,b,c,d,e,f,g){function k(a,b,c,d,e){var f=Math.cos(a),g=Math.sin(a);a*=b/c;b=Math.cos(a);f*=d*(2+b)*0.5;g=d*(2+b)*g*0.5;d=e*d*Math.sin(a)*0.5;return new THREE.Vector3(f,g,d)}THREE.Geometry.call(this);this.className="TorusKnotGeometry";this.radius=a||100;this.tube=b||40;this.radialSegments=c||64;this.tubularSegments=d||8;this.p=e||2;this.q=f||3;this.heightScale=g||1;this.grid=Array(this.radialSegments);c=new THREE.Vector3;d=new THREE.Vector3;e=new THREE.Vector3;for(a=
0;a<this.radialSegments;++a)for(this.grid[a]=Array(this.tubularSegments),b=a/this.radialSegments*2*this.p*Math.PI,f=k(b,this.q,this.p,this.radius,this.heightScale),b=k(b+0.01,this.q,this.p,this.radius,this.heightScale),c.subVectors(b,f),d.addVectors(b,f),e.crossVectors(c,d),d.crossVectors(e,c),e.normalize(),d.normalize(),b=0;b<this.tubularSegments;++b){var h=b/this.tubularSegments*2*Math.PI;g=-this.tube*Math.cos(h);var h=this.tube*Math.sin(h),m=new THREE.Vector3;m.x=f.x+g*d.x+h*e.x;m.y=f.y+g*d.y+
h*e.y;m.z=f.z+g*d.z+h*e.z;this.grid[a][b]=this.vertices.push(m)-1}for(a=0;a<this.radialSegments;++a)for(b=0;b<this.tubularSegments;++b){e=(a+1)%this.radialSegments;f=(b+1)%this.tubularSegments;c=this.grid[a][b];d=this.grid[e][b];e=this.grid[e][f];f=this.grid[a][f];g=new THREE.Vector2(a/this.radialSegments,b/this.tubularSegments);var h=new THREE.Vector2((a+1)/this.radialSegments,b/this.tubularSegments),m=new THREE.Vector2((a+1)/this.radialSegments,(b+1)/this.tubularSegments),n=new THREE.Vector2(a/
this.radialSegments,(b+1)/this.tubularSegments);this.faces.push(new THREE.Face3(c,d,f));this.faceVertexUvs[0].push([g,h,n]);this.faces.push(new THREE.Face3(d,e,f));this.faceVertexUvs[0].push([h.clone(),m,n.clone()])}this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals()};THREE.TorusKnotGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TubeGeometry=function(a,b,c,d,e){THREE.Geometry.call(this);this.className="TubeGeometry";this.path=a;this.segments=b||64;this.radius=c||1;this.radialSegments=d||8;this.closed=e||!1;this.grid=[];var f,g;d=this.segments+1;var k,h,m;e=new THREE.Vector3;var n,q;b=new THREE.TubeGeometry.FrenetFrames(this.path,this.segments,this.closed);n=b.normals;q=b.binormals;this.tangents=b.tangents;this.normals=n;this.binormals=q;for(b=0;b<d;b++)for(this.grid[b]=[],c=b/(d-1),m=a.getPointAt(c),f=n[b],g=q[b],c=
0;c<this.radialSegments;c++)k=c/this.radialSegments*2*Math.PI,h=-this.radius*Math.cos(k),k=this.radius*Math.sin(k),e.copy(m),e.x+=h*f.x+k*g.x,e.y+=h*f.y+k*g.y,e.z+=h*f.z+k*g.z,this.grid[b][c]=this.vertices.push(new THREE.Vector3(e.x,e.y,e.z))-1;for(b=0;b<this.segments;b++)for(c=0;c<this.radialSegments;c++)e=this.closed?(b+1)%this.segments:b+1,n=(c+1)%this.radialSegments,a=this.grid[b][c],d=this.grid[e][c],e=this.grid[e][n],n=this.grid[b][n],q=new THREE.Vector2(b/this.segments,c/this.radialSegments),
f=new THREE.Vector2((b+1)/this.segments,c/this.radialSegments),g=new THREE.Vector2((b+1)/this.segments,(c+1)/this.radialSegments),h=new THREE.Vector2(b/this.segments,(c+1)/this.radialSegments),this.faces.push(new THREE.Face3(a,d,n)),this.faceVertexUvs[0].push([q,f,h]),this.faces.push(new THREE.Face3(d,e,n)),this.faceVertexUvs[0].push([f.clone(),g,h.clone()]);this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals()};THREE.TubeGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.TubeGeometry.FrenetFrames=function(a,b,c){new THREE.Vector3;var d=new THREE.Vector3;new THREE.Vector3;var e=[],f=[],g=[],k=new THREE.Vector3,h=new THREE.Matrix4;b+=1;var m,n,q;this.tangents=e;this.normals=f;this.binormals=g;for(m=0;m<b;m++)n=m/(b-1),e[m]=a.getTangentAt(n),e[m].normalize();f[0]=new THREE.Vector3;g[0]=new THREE.Vector3;a=Number.MAX_VALUE;m=Math.abs(e[0].x);n=Math.abs(e[0].y);q=Math.abs(e[0].z);m<=a&&(a=m,d.set(1,0,0));n<=a&&(a=n,d.set(0,1,0));q<=a&&d.set(0,0,1);k.crossVectors(e[0],
d).normalize();f[0].crossVectors(e[0],k);g[0].crossVectors(e[0],f[0]);for(m=1;m<b;m++)f[m]=f[m-1].clone(),g[m]=g[m-1].clone(),k.crossVectors(e[m-1],e[m]),1E-4<k.length()&&(k.normalize(),d=Math.acos(THREE.Math.clamp(e[m-1].dot(e[m]),-1,1)),f[m].applyMatrix4(h.makeRotationAxis(k,d))),g[m].crossVectors(e[m],f[m]);if(c)for(d=Math.acos(THREE.Math.clamp(f[0].dot(f[b-1]),-1,1)),d/=b-1,0<e[0].dot(k.crossVectors(f[0],f[b-1]))&&(d=-d),m=1;m<b;m++)f[m].applyMatrix4(h.makeRotationAxis(e[m],d*m)),g[m].crossVectors(e[m],
f[m])};THREE.PolyhedronGeometry=function(a,b,c,d){function e(a){var b=a.normalize().clone();b.index=h.vertices.push(b)-1;var c=Math.atan2(a.z,-a.x)/2/Math.PI+0.5;a=Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+0.5;b.uv=new THREE.Vector2(c,1-a);return b}function f(a,b,c){var d=new THREE.Face3(a.index,b.index,c.index,[a.clone(),b.clone(),c.clone()]);d.centroid.add(a).add(b).add(c).divideScalar(3);h.faces.push(d);d=d.centroid;d=Math.atan2(d.z,-d.x);h.faceVertexUvs[0].push([k(a.uv,a,d),k(b.uv,b,d),k(c.uv,
c,d)])}function g(a,b){var c=Math.pow(2,b);Math.pow(4,b);for(var d=e(h.vertices[a.a]),g=e(h.vertices[a.b]),k=e(h.vertices[a.c]),m=[],n=0;n<=c;n++){m[n]=[];for(var q=e(d.clone().lerp(k,n/c)),r=e(g.clone().lerp(k,n/c)),s=c-n,u=0;u<=s;u++)m[n][u]=0==u&&n==c?q:e(q.clone().lerp(r,u/s))}for(n=0;n<c;n++)for(u=0;u<2*(c-n)-1;u++)d=Math.floor(u/2),0==u%2?f(m[n][d+1],m[n+1][d],m[n][d]):f(m[n][d+1],m[n+1][d+1],m[n+1][d])}function k(a,b,c){0>c&&1===a.x&&(a=new THREE.Vector2(a.x-1,a.y));0===b.x&&0===b.z&&(a=new THREE.Vector2(c/
2/Math.PI+0.5,a.y));return a.clone()}THREE.Geometry.call(this);this.className="PolyhedronGeometry";c=c||1;d=d||0;for(var h=this,m=0,n=a.length;m<n;m++)e(new THREE.Vector3(a[m][0],a[m][1],a[m][2]));a=this.vertices;for(var q=[],m=0,n=b.length;m<n;m++){var s=a[b[m][0]],r=a[b[m][1]],u=a[b[m][2]];q[m]=new THREE.Face3(s.index,r.index,u.index,[s.clone(),r.clone(),u.clone()])}m=0;for(n=q.length;m<n;m++)g(q[m],d);m=0;for(n=this.faceVertexUvs[0].length;m<n;m++)b=this.faceVertexUvs[0][m],d=b[0].x,a=b[1].x,q=
b[2].x,s=Math.max(d,Math.max(a,q)),r=Math.min(d,Math.min(a,q)),0.9<s&&0.1>r&&(0.2>d&&(b[0].x+=1),0.2>a&&(b[1].x+=1),0.2>q&&(b[2].x+=1));m=0;for(n=this.vertices.length;m<n;m++)this.vertices[m].multiplyScalar(c);this.mergeVertices();this.computeCentroids();this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,c)};THREE.PolyhedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.IcosahedronGeometry=function(a,b){this.radius=a;this.detail=b;var c=(1+Math.sqrt(5))/2;THREE.PolyhedronGeometry.call(this,[[-1,c,0],[1,c,0],[-1,-c,0],[1,-c,0],[0,-1,c],[0,1,c],[0,-1,-c],[0,1,-c],[c,0,-1],[c,0,1],[-c,0,-1],[-c,0,1]],[[0,11,5],[0,5,1],[0,1,7],[0,7,10],[0,10,11],[1,5,9],[5,11,4],[11,10,2],[10,7,6],[7,1,8],[3,9,4],[3,4,2],[3,2,6],[3,6,8],[3,8,9],[4,9,5],[2,4,11],[6,2,10],[8,6,7],[9,8,1]],a,b);this.className="IcosahedronGeometry"};THREE.IcosahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.OctahedronGeometry=function(a,b){THREE.PolyhedronGeometry.call(this,[[1,0,0],[-1,0,0],[0,1,0],[0,-1,0],[0,0,1],[0,0,-1]],[[0,2,4],[0,4,3],[0,3,5],[0,5,2],[1,2,5],[1,5,3],[1,3,4],[1,4,2]],a,b);this.className="OctahedronGeometry"};THREE.OctahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TetrahedronGeometry=function(a,b){this.className="TetrahedronGeometry";THREE.PolyhedronGeometry.call(this,[[1,1,1],[-1,-1,1],[-1,1,-1],[1,-1,-1]],[[2,1,0],[0,3,2],[1,3,0],[2,3,1]],a,b)};THREE.TetrahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ParametricGeometry=function(a,b,c){THREE.Geometry.call(this);this.className="ParametricGeometry";var d=this.vertices,e=this.faces,f=this.faceVertexUvs[0],g,k,h,m,n=b+1;for(g=0;g<=c;g++)for(m=g/c,k=0;k<=b;k++)h=k/b,h=a(h,m),d.push(h);var q,s,r,u;for(g=0;g<c;g++)for(k=0;k<b;k++)a=g*n+k,d=g*n+k+1,m=(g+1)*n+k+1,h=(g+1)*n+k,q=new THREE.Vector2(k/b,g/c),s=new THREE.Vector2((k+1)/b,g/c),r=new THREE.Vector2((k+1)/b,(g+1)/c),u=new THREE.Vector2(k/b,(g+1)/c),e.push(new THREE.Face3(a,d,h)),f.push([q,s,
u]),e.push(new THREE.Face3(d,m,h)),f.push([s.clone(),r,u.clone()]);this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals()};THREE.ParametricGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.AxisHelper=function(a){a=a||1;var b=new THREE.Geometry;b.vertices.push(new THREE.Vector3,new THREE.Vector3(a,0,0),new THREE.Vector3,new THREE.Vector3(0,a,0),new THREE.Vector3,new THREE.Vector3(0,0,a));b.colors.push(new THREE.Color(16711680),new THREE.Color(16755200),new THREE.Color(65280),new THREE.Color(11206400),new THREE.Color(255),new THREE.Color(43775));a=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.Line.call(this,b,a,THREE.LinePieces);this.className="AxisHelper"};
THREE.AxisHelper.prototype=Object.create(THREE.Line.prototype);THREE.ArrowHelper=function(a,b,c,d,e,f){THREE.Object3D.call(this);this.className="ArrowHelper";void 0===d&&(d=16776960);void 0===c&&(c=1);void 0===e&&(e=0.2*c);void 0===f&&(f=0.2*e);this.position=b;b=new THREE.Geometry;b.vertices.push(new THREE.Vector3(0,0,0));b.vertices.push(new THREE.Vector3(0,1,0));this.line=new THREE.Line(b,new THREE.LineBasicMaterial({color:d}));this.line.matrixAutoUpdate=!1;this.add(this.line);b=new THREE.CylinderGeometry(0,0.5,1,5,1);b.applyMatrix((new THREE.Matrix4).makeTranslation(0,
-0.5,0));this.cone=new THREE.Mesh(b,new THREE.MeshBasicMaterial({color:d}));this.cone.matrixAutoUpdate=!1;this.add(this.cone);this.setDirection(a);this.setLength(c,e,f)};THREE.ArrowHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.ArrowHelper.prototype.setDirection=function(){var a=new THREE.Vector3,b;return function(c){0.99999<c.y?this.quaternion.set(0,0,0,1):-0.99999>c.y?this.quaternion.set(1,0,0,0):(a.set(c.z,0,-c.x).normalize(),b=Math.acos(c.y),this.quaternion.setFromAxisAngle(a,b))}}();THREE.ArrowHelper.prototype.setLength=function(a,b,c){void 0===b&&(b=0.2*a);void 0===c&&(c=0.2*b);this.line.scale.set(1,a,1);this.line.updateMatrix();this.cone.scale.set(c,b,c);this.cone.position.y=a;this.cone.updateMatrix()};
THREE.ArrowHelper.prototype.setColor=function(a){this.line.material.color.setHex(a);this.cone.material.color.setHex(a)};THREE.BoxHelper=function(a){var b=[new THREE.Vector3(1,1,1),new THREE.Vector3(-1,1,1),new THREE.Vector3(-1,-1,1),new THREE.Vector3(1,-1,1),new THREE.Vector3(1,1,-1),new THREE.Vector3(-1,1,-1),new THREE.Vector3(-1,-1,-1),new THREE.Vector3(1,-1,-1)];this.vertices=b;var c=new THREE.Geometry;c.vertices.push(b[0],b[1],b[1],b[2],b[2],b[3],b[3],b[0],b[4],b[5],b[5],b[6],b[6],b[7],b[7],b[4],b[0],b[4],b[1],b[5],b[2],b[6],b[3],b[7]);THREE.Line.call(this,c,new THREE.LineBasicMaterial({color:16776960}),THREE.LinePieces);
void 0!==a&&this.update(a)};THREE.BoxHelper.prototype=Object.create(THREE.Line.prototype);
THREE.BoxHelper.prototype.update=function(a){var b=a.geometry;null===b.boundingBox&&b.computeBoundingBox();var c=b.boundingBox.min,b=b.boundingBox.max,d=this.vertices;d[0].set(b.x,b.y,b.z);d[1].set(c.x,b.y,b.z);d[2].set(c.x,c.y,b.z);d[3].set(b.x,c.y,b.z);d[4].set(b.x,b.y,c.z);d[5].set(c.x,b.y,c.z);d[6].set(c.x,c.y,c.z);d[7].set(b.x,c.y,c.z);this.geometry.computeBoundingSphere();this.geometry.verticesNeedUpdate=!0;this.matrixAutoUpdate=!1;this.matrixWorld=a.matrixWorld};THREE.BoundingBoxHelper=function(a,b){var c=void 0!==b?b:8947848;this.object=a;this.box=new THREE.Box3;THREE.Mesh.call(this,new THREE.BoxGeometry(1,1,1),new THREE.MeshBasicMaterial({color:c,wireframe:!0}))};THREE.BoundingBoxHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.BoundingBoxHelper.prototype.update=function(){this.box.setFromObject(this.object);this.box.size(this.scale);this.box.center(this.position)};THREE.CameraHelper=function(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){d.vertices.push(new THREE.Vector3);d.colors.push(new THREE.Color(b));void 0===f[a]&&(f[a]=[]);f[a].push(d.vertices.length-1)}var d=new THREE.Geometry,e=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors}),f={};b("n1","n2",16755200);b("n2","n4",16755200);b("n4","n3",16755200);b("n3","n1",16755200);b("f1","f2",16755200);b("f2","f4",16755200);b("f4","f3",16755200);b("f3","f1",16755200);b("n1","f1",16755200);
b("n2","f2",16755200);b("n3","f3",16755200);b("n4","f4",16755200);b("p","n1",16711680);b("p","n2",16711680);b("p","n3",16711680);b("p","n4",16711680);b("u1","u2",43775);b("u2","u3",43775);b("u3","u1",43775);b("c","t",16777215);b("p","c",3355443);b("cn1","cn2",3355443);b("cn3","cn4",3355443);b("cf1","cf2",3355443);b("cf3","cf4",3355443);THREE.Line.call(this,d,e,THREE.LinePieces);this.camera=a;this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=f;this.update()};
THREE.CameraHelper.prototype=Object.create(THREE.Line.prototype);
THREE.CameraHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Camera,c=new THREE.Projector;return function(){function d(d,g,k,h){a.set(g,k,h);c.unprojectVector(a,b);d=e.pointMap[d];if(void 0!==d)for(g=0,k=d.length;g<k;g++)e.geometry.vertices[d[g]].copy(a)}var e=this;b.projectionMatrix.copy(this.camera.projectionMatrix);d("c",0,0,-1);d("t",0,0,1);d("n1",-1,-1,-1);d("n2",1,-1,-1);d("n3",-1,1,-1);d("n4",1,1,-1);d("f1",-1,-1,1);d("f2",1,-1,1);d("f3",-1,1,1);d("f4",1,1,1);d("u1",0.7,
1.1,-1);d("u2",-0.7,1.1,-1);d("u3",0,2,-1);d("cf1",-1,0,1);d("cf2",1,0,1);d("cf3",0,-1,1);d("cf4",0,1,1);d("cn1",-1,0,-1);d("cn2",1,0,-1);d("cn3",0,-1,-1);d("cn4",0,1,-1);this.geometry.verticesNeedUpdate=!0}}();THREE.DirectionalLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;b=b||1;var c=new THREE.PlaneGeometry(b,b),d=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.lightPlane=new THREE.Mesh(c,d);this.add(this.lightPlane);c=new THREE.Geometry;c.vertices.push(new THREE.Vector3);c.vertices.push(new THREE.Vector3);d=new THREE.LineBasicMaterial({fog:!1});
d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine=new THREE.Line(c,d);this.add(this.targetLine);this.update()};THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.DirectionalLightHelper.prototype.dispose=function(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose()};
THREE.DirectionalLightHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(){a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);c.subVectors(b,a);this.lightPlane.lookAt(c);this.lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine.geometry.vertices[1].copy(c);this.targetLine.geometry.verticesNeedUpdate=!0;this.targetLine.material.color.copy(this.lightPlane.material.color)}}();THREE.EdgesHelper=function(a,b){var c=void 0!==b?b:16777215,d=[0,0],e={},f=function(a,b){return a-b},g=["a","b","c"],k=new THREE.BufferGeometry,h=a.geometry.clone();h.mergeVertices();h.computeFaceNormals();for(var m=h.vertices,h=h.faces,n=0,q=0,s=h.length;q<s;q++)for(var r=h[q],u=0;3>u;u++){d[0]=r[g[u]];d[1]=r[g[(u+1)%3]];d.sort(f);var p=d.toString();void 0===e[p]?(e[p]={vert1:d[0],vert2:d[1],face1:q,face2:void 0},n++):e[p].face2=q}k.addAttribute("position",Float32Array,2*n,3);d=k.attributes.position.array;
f=0;for(p in e)if(g=e[p],void 0===g.face2||0.9999>h[g.face1].normal.dot(h[g.face2].normal))n=m[g.vert1],d[f++]=n.x,d[f++]=n.y,d[f++]=n.z,n=m[g.vert2],d[f++]=n.x,d[f++]=n.y,d[f++]=n.z;THREE.Line.call(this,k,new THREE.LineBasicMaterial({color:c}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.matrixWorld=a.matrixWorld};THREE.EdgesHelper.prototype=Object.create(THREE.Line.prototype);THREE.FaceNormalsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;a=void 0!==c?c:16776960;d=void 0!==d?d:1;b=new THREE.Geometry;c=0;for(var e=this.object.geometry.faces.length;c<e;c++)b.vertices.push(new THREE.Vector3),b.vertices.push(new THREE.Vector3);THREE.Line.call(this,b,new THREE.LineBasicMaterial({color:a,linewidth:d}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.normalMatrix=new THREE.Matrix3;this.update()};THREE.FaceNormalsHelper.prototype=Object.create(THREE.Line.prototype);
THREE.FaceNormalsHelper.prototype.update=function(a){var b=new THREE.Vector3;return function(a){this.object.updateMatrixWorld(!0);this.normalMatrix.getNormalMatrix(this.object.matrixWorld);a=this.geometry.vertices;for(var d=this.object.geometry.faces,e=this.object.matrixWorld,f=0,g=d.length;f<g;f++){var k=d[f];b.copy(k.normal).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size);var h=2*f;a[h].copy(k.centroid).applyMatrix4(e);a[h+1].addVectors(a[h],b)}this.geometry.verticesNeedUpdate=
!0;return this}}();THREE.GridHelper=function(a,b){var c=new THREE.Geometry,d=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});this.color1=new THREE.Color(4473924);this.color2=new THREE.Color(8947848);for(var e=-a;e<=a;e+=b){c.vertices.push(new THREE.Vector3(-a,0,e),new THREE.Vector3(a,0,e),new THREE.Vector3(e,0,-a),new THREE.Vector3(e,0,a));var f=0===e?this.color1:this.color2;c.colors.push(f,f,f,f)}THREE.Line.call(this,c,d,THREE.LinePieces)};THREE.GridHelper.prototype=Object.create(THREE.Line.prototype);
THREE.GridHelper.prototype.setColors=function(a,b){this.color1.set(a);this.color2.set(b);this.geometry.colorsNeedUpdate=!0};THREE.HemisphereLightHelper=function(a,b,c,d){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;this.colors=[new THREE.Color,new THREE.Color];a=new THREE.SphereGeometry(b,4,2);a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));for(b=0;8>b;b++)a.faces[b].color=this.colors[4>b?0:1];b=new THREE.MeshBasicMaterial({vertexColors:THREE.FaceColors,wireframe:!0});this.lightSphere=new THREE.Mesh(a,b);this.add(this.lightSphere);
this.update()};THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.HemisphereLightHelper.prototype.dispose=function(){this.lightSphere.geometry.dispose();this.lightSphere.material.dispose()};
THREE.HemisphereLightHelper.prototype.update=function(){var a=new THREE.Vector3;return function(){this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);this.lightSphere.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());this.lightSphere.geometry.colorsNeedUpdate=!0}}();THREE.PointLightHelper=function(a,b){this.light=a;this.light.updateMatrixWorld();var c=new THREE.SphereGeometry(b,4,2),d=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);THREE.Mesh.call(this,c,d);this.matrixWorld=this.light.matrixWorld;this.matrixAutoUpdate=!1};THREE.PointLightHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.PointLightHelper.prototype.dispose=function(){this.geometry.dispose();this.material.dispose()};
THREE.PointLightHelper.prototype.update=function(){this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)};THREE.SpotLightHelper=function(a){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;a=new THREE.CylinderGeometry(0,1,1,8,1,!0);a.applyMatrix((new THREE.Matrix4).makeTranslation(0,-0.5,0));a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));var b=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});this.cone=new THREE.Mesh(a,b);this.add(this.cone);this.update()};THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose();this.cone.material.dispose()};THREE.SpotLightHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){var c=this.light.distance?this.light.distance:1E4,d=c*Math.tan(this.light.angle);this.cone.scale.set(d,d,c);a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(b.sub(a));this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)}}();THREE.VertexNormalsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;b=void 0!==c?c:16711680;d=void 0!==d?d:1;c=new THREE.Geometry;a=a.geometry.faces;for(var e=0,f=a.length;e<f;e++)for(var g=0,k=a[e].vertexNormals.length;g<k;g++)c.vertices.push(new THREE.Vector3),c.vertices.push(new THREE.Vector3);THREE.Line.call(this,c,new THREE.LineBasicMaterial({color:b,linewidth:d}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.normalMatrix=new THREE.Matrix3;this.update()};
THREE.VertexNormalsHelper.prototype=Object.create(THREE.Line.prototype);
THREE.VertexNormalsHelper.prototype.update=function(a){var b=new THREE.Vector3;return function(a){a=["a","b","c","d"];this.object.updateMatrixWorld(!0);this.normalMatrix.getNormalMatrix(this.object.matrixWorld);for(var d=this.geometry.vertices,e=this.object.geometry.vertices,f=this.object.geometry.faces,g=this.object.matrixWorld,k=0,h=0,m=f.length;h<m;h++)for(var n=f[h],q=0,s=n.vertexNormals.length;q<s;q++){var r=n.vertexNormals[q];d[k].copy(e[n[a[q]]]).applyMatrix4(g);b.copy(r).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size);
b.add(d[k]);k+=1;d[k].copy(b);k+=1}this.geometry.verticesNeedUpdate=!0;return this}}();THREE.VertexTangentsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;b=void 0!==c?c:255;d=void 0!==d?d:1;c=new THREE.Geometry;a=a.geometry.faces;for(var e=0,f=a.length;e<f;e++)for(var g=0,k=a[e].vertexTangents.length;g<k;g++)c.vertices.push(new THREE.Vector3),c.vertices.push(new THREE.Vector3);THREE.Line.call(this,c,new THREE.LineBasicMaterial({color:b,linewidth:d}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.update()};THREE.VertexTangentsHelper.prototype=Object.create(THREE.Line.prototype);
THREE.VertexTangentsHelper.prototype.update=function(a){var b=new THREE.Vector3;return function(a){a=["a","b","c","d"];this.object.updateMatrixWorld(!0);for(var d=this.geometry.vertices,e=this.object.geometry.vertices,f=this.object.geometry.faces,g=this.object.matrixWorld,k=0,h=0,m=f.length;h<m;h++)for(var n=f[h],q=0,s=n.vertexTangents.length;q<s;q++){var r=n.vertexTangents[q];d[k].copy(e[n[a[q]]]).applyMatrix4(g);b.copy(r).transformDirection(g).multiplyScalar(this.size);b.add(d[k]);k+=1;d[k].copy(b);
k+=1}this.geometry.verticesNeedUpdate=!0;return this}}();THREE.WireframeHelper=function(a,b){var c=void 0!==b?b:16777215,d=[0,0],e={},f=function(a,b){return a-b},g=["a","b","c"],k=new THREE.BufferGeometry;if(a.geometry instanceof THREE.Geometry){for(var h=a.geometry.vertices,m=a.geometry.faces,n=0,q=new Uint32Array(6*m.length),s=0,r=m.length;s<r;s++)for(var u=m[s],p=0;3>p;p++){d[0]=u[g[p]];d[1]=u[g[(p+1)%3]];d.sort(f);var w=d.toString();void 0===e[w]&&(q[2*n]=d[0],q[2*n+1]=d[1],e[w]=!0,n++)}k.addAttribute("position",Float32Array,2*n,3);d=k.attributes.position.array;
s=0;for(r=n;s<r;s++)for(p=0;2>p;p++)n=h[q[2*s+p]],g=6*s+3*p,d[g+0]=n.x,d[g+1]=n.y,d[g+2]=n.z}else if(a.geometry instanceof THREE.BufferGeometry&&void 0!==a.geometry.attributes.index){for(var h=a.geometry.attributes.position.array,r=a.geometry.attributes.index.array,m=a.geometry.offsets,n=0,q=new Uint32Array(2*r.length),u=0,v=m.length;u<v;++u)for(var p=m[u].start,w=m[u].count,g=m[u].index,s=p,t=p+w;s<t;s+=3)for(p=0;3>p;p++)d[0]=g+r[s+p],d[1]=g+r[s+(p+1)%3],d.sort(f),w=d.toString(),void 0===e[w]&&(q[2*
n]=d[0],q[2*n+1]=d[1],e[w]=!0,n++);k.addAttribute("position",Float32Array,2*n,3);d=k.attributes.position.array;s=0;for(r=n;s<r;s++)for(p=0;2>p;p++)g=6*s+3*p,n=3*q[2*s+p],d[g+0]=h[n],d[g+1]=h[n+1],d[g+2]=h[n+2]}else if(a.geometry instanceof THREE.BufferGeometry)for(h=a.geometry.attributes.position.array,n=h.length/3,q=n/3,k.addAttribute("position",Float32Array,2*n,3),d=k.attributes.position.array,s=0,r=q;s<r;s++)for(p=0;3>p;p++)g=18*s+6*p,q=9*s+3*p,d[g+0]=h[q],d[g+1]=h[q+1],d[g+2]=h[q+2],n=9*s+(p+
1)%3*3,d[g+3]=h[n],d[g+4]=h[n+1],d[g+5]=h[n+2];THREE.Line.call(this,k,new THREE.LineBasicMaterial({color:c}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.matrixWorld=a.matrixWorld};THREE.WireframeHelper.prototype=Object.create(THREE.Line.prototype);THREE.ImmediateRenderObject=function(){THREE.Object3D.call(this);this.render=function(a){}};THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype);THREE.LensFlare=function(a,b,c,d,e){THREE.Object3D.call(this);this.lensFlares=[];this.positionScreen=new THREE.Vector3;this.customUpdateCallback=void 0;void 0!==a&&this.add(a,b,c,d,e)};THREE.LensFlare.prototype=Object.create(THREE.Object3D.prototype);
THREE.LensFlare.prototype.add=function(a,b,c,d,e,f){void 0===b&&(b=-1);void 0===c&&(c=0);void 0===f&&(f=1);void 0===e&&(e=new THREE.Color(16777215));void 0===d&&(d=THREE.NormalBlending);c=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:a,size:b,distance:c,x:0,y:0,z:0,scale:1,rotation:1,opacity:f,color:e,blending:d})};
THREE.LensFlare.prototype.updateLensFlares=function(){var a,b=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(a=0;a<b;a++)c=this.lensFlares[a],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=c.x*Math.PI*0.25,c.rotation+=0.25*(c.wantedRotation-c.rotation)};THREE.MorphBlendMesh=function(a,b){THREE.Mesh.call(this,a,b);this.animationsMap={};this.animationsList=[];var c=this.geometry.morphTargets.length;this.createAnimation("__default",0,c-1,c/1);this.setAnimationWeight("__default",1)};THREE.MorphBlendMesh.prototype=Object.create(THREE.Mesh.prototype);
THREE.MorphBlendMesh.prototype.createAnimation=function(a,b,c,d){b={startFrame:b,endFrame:c,length:c-b+1,fps:d,duration:(c-b)/d,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1};this.animationsMap[a]=b;this.animationsList.push(b)};
THREE.MorphBlendMesh.prototype.autoCreateAnimations=function(a){for(var b=/([a-z]+)(\d+)/,c,d={},e=this.geometry,f=0,g=e.morphTargets.length;f<g;f++){var k=e.morphTargets[f].name.match(b);if(k&&1<k.length){var h=k[1];d[h]||(d[h]={start:Infinity,end:-Infinity});k=d[h];f<k.start&&(k.start=f);f>k.end&&(k.end=f);c||(c=h)}}for(h in d)k=d[h],this.createAnimation(h,k.start,k.end,a);this.firstAnimation=c};
THREE.MorphBlendMesh.prototype.setAnimationDirectionForward=function(a){if(a=this.animationsMap[a])a.direction=1,a.directionBackwards=!1};THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward=function(a){if(a=this.animationsMap[a])a.direction=-1,a.directionBackwards=!0};THREE.MorphBlendMesh.prototype.setAnimationFPS=function(a,b){var c=this.animationsMap[a];c&&(c.fps=b,c.duration=(c.end-c.start)/c.fps)};
THREE.MorphBlendMesh.prototype.setAnimationDuration=function(a,b){var c=this.animationsMap[a];c&&(c.duration=b,c.fps=(c.end-c.start)/c.duration)};THREE.MorphBlendMesh.prototype.setAnimationWeight=function(a,b){var c=this.animationsMap[a];c&&(c.weight=b)};THREE.MorphBlendMesh.prototype.setAnimationTime=function(a,b){var c=this.animationsMap[a];c&&(c.time=b)};THREE.MorphBlendMesh.prototype.getAnimationTime=function(a){var b=0;if(a=this.animationsMap[a])b=a.time;return b};
THREE.MorphBlendMesh.prototype.getAnimationDuration=function(a){var b=-1;if(a=this.animationsMap[a])b=a.duration;return b};THREE.MorphBlendMesh.prototype.playAnimation=function(a){var b=this.animationsMap[a];if(b)b.time=0,b.active=!0;else THREE.onwarning("animation["+a+"] undefined")};THREE.MorphBlendMesh.prototype.stopAnimation=function(a){if(a=this.animationsMap[a])a.active=!1};
THREE.MorphBlendMesh.prototype.update=function(a){for(var b=0,c=this.animationsList.length;b<c;b++){var d=this.animationsList[b];if(d.active){var e=d.duration/d.length;d.time+=d.direction*a;if(d.mirroredLoop){if(d.time>d.duration||0>d.time)d.direction*=-1,d.time>d.duration&&(d.time=d.duration,d.directionBackwards=!0),0>d.time&&(d.time=0,d.directionBackwards=!1)}else d.time%=d.duration,0>d.time&&(d.time+=d.duration);var f=d.startFrame+THREE.Math.clamp(Math.floor(d.time/e),0,d.length-1),g=d.weight;
f!==d.currentFrame&&(this.morphTargetInfluences[d.lastFrame]=0,this.morphTargetInfluences[d.currentFrame]=1*g,this.morphTargetInfluences[f]=0,d.lastFrame=d.currentFrame,d.currentFrame=f);e=d.time%e/e;d.directionBackwards&&(e=1-e);this.morphTargetInfluences[d.currentFrame]=e*g;this.morphTargetInfluences[d.lastFrame]=(1-e)*g}}};THREE.LensFlarePlugin=function(){function a(a,c){var d=b.createProgram(),e=b.createShader(b.FRAGMENT_SHADER),f=b.createShader(b.VERTEX_SHADER),g="precision "+c+" float;\n";b.shaderSource(e,g+a.fragmentShader);b.shaderSource(f,g+a.vertexShader);b.compileShader(e);b.compileShader(f);b.attachShader(d,e);b.attachShader(d,f);b.linkProgram(d);return d}var b,c,d,e,f,g,k,h,m,n,q,s,r;this.init=function(u){b=u.context;c=u;d=u.getPrecision();e=new Float32Array(16);f=new Uint16Array(6);u=0;e[u++]=-1;e[u++]=-1;
e[u++]=0;e[u++]=0;e[u++]=1;e[u++]=-1;e[u++]=1;e[u++]=0;e[u++]=1;e[u++]=1;e[u++]=1;e[u++]=1;e[u++]=-1;e[u++]=1;e[u++]=0;e[u++]=1;u=0;f[u++]=0;f[u++]=1;f[u++]=2;f[u++]=0;f[u++]=2;f[u++]=3;g=b.createBuffer();k=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,g);b.bufferData(b.ARRAY_BUFFER,e,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,k);b.bufferData(b.ELEMENT_ARRAY_BUFFER,f,b.STATIC_DRAW);h=b.createTexture();m=b.createTexture();b.bindTexture(b.TEXTURE_2D,h);b.texImage2D(b.TEXTURE_2D,0,b.RGB,16,16,
0,b.RGB,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);b.bindTexture(b.TEXTURE_2D,m);b.texImage2D(b.TEXTURE_2D,0,b.RGBA,16,16,0,b.RGBA,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);
b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);0>=b.getParameter(b.MAX_VERTEX_TEXTURE_IMAGE_UNITS)?(n=!1,q=a(THREE.ShaderFlares.lensFlare,d)):(n=!0,q=a(THREE.ShaderFlares.lensFlareVertexTexture,d));s={};r={};s.vertex=b.getAttribLocation(q,"position");s.uv=b.getAttribLocation(q,"uv");r.renderType=b.getUniformLocation(q,"renderType");r.map=b.getUniformLocation(q,"map");r.occlusionMap=b.getUniformLocation(q,"occlusionMap");r.opacity=
b.getUniformLocation(q,"opacity");r.color=b.getUniformLocation(q,"color");r.scale=b.getUniformLocation(q,"scale");r.rotation=b.getUniformLocation(q,"rotation");r.screenPosition=b.getUniformLocation(q,"screenPosition")};this.render=function(a,d,e,f){a=a.__webglFlares;var t=a.length;if(t){var x=new THREE.Vector3,B=f/e,J=0.5*e,E=0.5*f,K=16/f,A=new THREE.Vector2(K*B,K),z=new THREE.Vector3(1,1,0),L=new THREE.Vector2(1,1),F=r,K=s;b.useProgram(q);b.enableVertexAttribArray(s.vertex);b.enableVertexAttribArray(s.uv);
b.uniform1i(F.occlusionMap,0);b.uniform1i(F.map,1);b.bindBuffer(b.ARRAY_BUFFER,g);b.vertexAttribPointer(K.vertex,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(K.uv,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,k);b.disable(b.CULL_FACE);b.depthMask(!1);var P,y,G,C,D;for(P=0;P<t;P++)if(K=16/f,A.set(K*B,K),C=a[P],x.set(C.matrixWorld.elements[12],C.matrixWorld.elements[13],C.matrixWorld.elements[14]),x.applyMatrix4(d.matrixWorldInverse),x.applyProjection(d.projectionMatrix),z.copy(x),L.x=z.x*J+J,
L.y=z.y*E+E,n||0<L.x&&L.x<e&&0<L.y&&L.y<f)for(b.activeTexture(b.TEXTURE1),b.bindTexture(b.TEXTURE_2D,h),b.copyTexImage2D(b.TEXTURE_2D,0,b.RGB,L.x-8,L.y-8,16,16,0),b.uniform1i(F.renderType,0),b.uniform2f(F.scale,A.x,A.y),b.uniform3f(F.screenPosition,z.x,z.y,z.z),b.disable(b.BLEND),b.enable(b.DEPTH_TEST),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0),b.activeTexture(b.TEXTURE0),b.bindTexture(b.TEXTURE_2D,m),b.copyTexImage2D(b.TEXTURE_2D,0,b.RGBA,L.x-8,L.y-8,16,16,0),b.uniform1i(F.renderType,1),b.disable(b.DEPTH_TEST),
b.activeTexture(b.TEXTURE1),b.bindTexture(b.TEXTURE_2D,h),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0),C.positionScreen.copy(z),C.customUpdateCallback?C.customUpdateCallback(C):C.updateLensFlares(),b.uniform1i(F.renderType,2),b.enable(b.BLEND),y=0,G=C.lensFlares.length;y<G;y++)D=C.lensFlares[y],0.001<D.opacity&&0.001<D.scale&&(z.x=D.x,z.y=D.y,z.z=D.z,K=D.size*D.scale/f,A.x=K*B,A.y=K,b.uniform3f(F.screenPosition,z.x,z.y,z.z),b.uniform2f(F.scale,A.x,A.y),b.uniform1f(F.rotation,D.rotation),b.uniform1f(F.opacity,
D.opacity),b.uniform3f(F.color,D.color.r,D.color.g,D.color.b),c.setBlending(D.blending,D.blendEquation,D.blendSrc,D.blendDst),c.setTexture(D.texture,1),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0));b.enable(b.CULL_FACE);b.enable(b.DEPTH_TEST);b.depthMask(!0)}}};THREE.ShadowMapPlugin=function(){var a,b,c,d,e,f,g=new THREE.Frustum,k=new THREE.Matrix4,h=new THREE.Vector3,m=new THREE.Vector3,n=new THREE.Vector3;this.init=function(g){a=g.context;b=g;g=THREE.ShaderLib.depthRGBA;var h=THREE.UniformsUtils.clone(g.uniforms);c=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:h});d=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:h,morphTargets:!0});e=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,
vertexShader:g.vertexShader,uniforms:h,skinning:!0});f=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:h,morphTargets:!0,skinning:!0});c._shadowPass=!0;d._shadowPass=!0;e._shadowPass=!0;f._shadowPass=!0};this.render=function(a,c){b.shadowMapEnabled&&b.shadowMapAutoUpdate&&this.update(a,c)};this.update=function(q,s){var r,u,p,w,v,t,x,B,J,E=[];w=0;a.clearColor(1,1,1,1);a.disable(a.BLEND);a.enable(a.CULL_FACE);a.frontFace(a.CCW);b.shadowMapCullFace===THREE.CullFaceFront?
a.cullFace(a.FRONT):a.cullFace(a.BACK);b.setDepthTest(!0);r=0;for(u=q.__lights.length;r<u;r++)if(p=q.__lights[r],p.castShadow)if(p instanceof THREE.DirectionalLight&&p.shadowCascade)for(v=0;v<p.shadowCascadeCount;v++){var K;if(p.shadowCascadeArray[v])K=p.shadowCascadeArray[v];else{J=p;x=v;K=new THREE.DirectionalLight;K.isVirtual=!0;K.onlyShadow=!0;K.castShadow=!0;K.shadowCameraNear=J.shadowCameraNear;K.shadowCameraFar=J.shadowCameraFar;K.shadowCameraLeft=J.shadowCameraLeft;K.shadowCameraRight=J.shadowCameraRight;
K.shadowCameraBottom=J.shadowCameraBottom;K.shadowCameraTop=J.shadowCameraTop;K.shadowCameraVisible=J.shadowCameraVisible;K.shadowDarkness=J.shadowDarkness;K.shadowBias=J.shadowCascadeBias[x];K.shadowMapWidth=J.shadowCascadeWidth[x];K.shadowMapHeight=J.shadowCascadeHeight[x];K.pointsWorld=[];K.pointsFrustum=[];B=K.pointsWorld;t=K.pointsFrustum;for(var A=0;8>A;A++)B[A]=new THREE.Vector3,t[A]=new THREE.Vector3;B=J.shadowCascadeNearZ[x];J=J.shadowCascadeFarZ[x];t[0].set(-1,-1,B);t[1].set(1,-1,B);t[2].set(-1,
1,B);t[3].set(1,1,B);t[4].set(-1,-1,J);t[5].set(1,-1,J);t[6].set(-1,1,J);t[7].set(1,1,J);K.originalCamera=s;t=new THREE.Gyroscope;t.position=p.shadowCascadeOffset;t.add(K);t.add(K.target);s.add(t);p.shadowCascadeArray[v]=K}x=p;B=v;J=x.shadowCascadeArray[B];J.position.copy(x.position);J.target.position.copy(x.target.position);J.lookAt(J.target);J.shadowCameraVisible=x.shadowCameraVisible;J.shadowDarkness=x.shadowDarkness;J.shadowBias=x.shadowCascadeBias[B];t=x.shadowCascadeNearZ[B];x=x.shadowCascadeFarZ[B];
J=J.pointsFrustum;J[0].z=t;J[1].z=t;J[2].z=t;J[3].z=t;J[4].z=x;J[5].z=x;J[6].z=x;J[7].z=x;E[w]=K;w++}else E[w]=p,w++;r=0;for(u=E.length;r<u;r++){p=E[r];p.shadowMap||(v=THREE.NearestFilter,b.shadowMapType===THREE.PCFSoftShadowMap&&(v=THREE.NearestFilter),p.shadowMap=new THREE.WebGLRenderTarget(p.shadowMapWidth,p.shadowMapHeight,{minFilter:v,magFilter:v,format:THREE.RGBAFormat}),p.shadowMapSize=new THREE.Vector2(p.shadowMapWidth,p.shadowMapHeight),p.shadowMatrix=new THREE.Matrix4);if(!p.shadowCamera){if(p instanceof
THREE.SpotLight)p.shadowCamera=new THREE.PerspectiveCamera(p.shadowCameraFov,p.shadowMapWidth/p.shadowMapHeight,p.shadowCameraNear,p.shadowCameraFar);else if(p instanceof THREE.DirectionalLight)p.shadowCamera=new THREE.OrthographicCamera(p.shadowCameraLeft,p.shadowCameraRight,p.shadowCameraTop,p.shadowCameraBottom,p.shadowCameraNear,p.shadowCameraFar);else{THREE.onerror("Unsupported light type for shadow");continue}q.add(p.shadowCamera);!0===q.autoUpdate&&q.updateMatrixWorld()}p.shadowCameraVisible&&
!p.cameraHelper&&(p.cameraHelper=new THREE.CameraHelper(p.shadowCamera),p.shadowCamera.add(p.cameraHelper));if(p.isVirtual&&K.originalCamera==s){v=s;w=p.shadowCamera;t=p.pointsFrustum;J=p.pointsWorld;h.set(Infinity,Infinity,Infinity);m.set(-Infinity,-Infinity,-Infinity);for(x=0;8>x;x++)B=J[x],B.copy(t[x]),THREE.ShadowMapPlugin.__projector.unprojectVector(B,v),B.applyMatrix4(w.matrixWorldInverse),B.x<h.x&&(h.x=B.x),B.x>m.x&&(m.x=B.x),B.y<h.y&&(h.y=B.y),B.y>m.y&&(m.y=B.y),B.z<h.z&&(h.z=B.z),B.z>m.z&&
(m.z=B.z);w.left=h.x;w.right=m.x;w.top=m.y;w.bottom=h.y;w.updateProjectionMatrix()}w=p.shadowMap;t=p.shadowMatrix;v=p.shadowCamera;v.position.setFromMatrixPosition(p.matrixWorld);n.setFromMatrixPosition(p.target.matrixWorld);v.lookAt(n);v.updateMatrixWorld();v.matrixWorldInverse.getInverse(v.matrixWorld);p.cameraHelper&&(p.cameraHelper.visible=p.shadowCameraVisible);p.shadowCameraVisible&&p.cameraHelper.update();t.set(0.5,0,0,0.5,0,0.5,0,0.5,0,0,0.5,0.5,0,0,0,1);t.multiply(v.projectionMatrix);t.multiply(v.matrixWorldInverse);
k.multiplyMatrices(v.projectionMatrix,v.matrixWorldInverse);g.setFromMatrix(k);b.setRenderTarget(w);b.clear();J=q.__webglObjects;p=0;for(w=J.length;p<w;p++)x=J[p],t=x.object,x.render=!1,!t.visible||!t.castShadow||(t instanceof THREE.Mesh||t instanceof THREE.ParticleSystem)&&t.frustumCulled&&!g.intersectsObject(t)||(t._modelViewMatrix.multiplyMatrices(v.matrixWorldInverse,t.matrixWorld),x.render=!0);p=0;for(w=J.length;p<w;p++)x=J[p],x.render&&(t=x.object,x=x.buffer,A=t.material instanceof THREE.MeshFaceMaterial?
t.material.materials[0]:t.material,B=void 0!==t.geometry.morphTargets&&0<t.geometry.morphTargets.length&&A.morphTargets,A=t instanceof THREE.SkinnedMesh&&A.skinning,B=t.customDepthMaterial?t.customDepthMaterial:A?B?f:e:B?d:c,x instanceof THREE.BufferGeometry?b.renderBufferDirect(v,q.__lights,null,B,x,t):b.renderBuffer(v,q.__lights,null,B,x,t));J=q.__webglObjectsImmediate;p=0;for(w=J.length;p<w;p++)x=J[p],t=x.object,t.visible&&t.castShadow&&(t._modelViewMatrix.multiplyMatrices(v.matrixWorldInverse,
t.matrixWorld),b.renderImmediateObject(v,q.__lights,null,c,t))}r=b.getClearColor();u=b.getClearAlpha();a.clearColor(r.r,r.g,r.b,u);a.enable(a.BLEND);b.shadowMapCullFace===THREE.CullFaceFront&&a.cullFace(a.BACK)}};THREE.ShadowMapPlugin.__projector=new THREE.Projector;THREE.SpritePlugin=function(){var a,b,c,d,e,f,g,k,h,m,n,q,s,r,u,p,w;function v(a,b){return a.z!==b.z?b.z-a.z:b.id-a.id}var t,x,B,J,E,K,A,z;this.init=function(v){t=v.context;x=v;J=new Float32Array([-0.5,-0.5,0,0,0.5,-0.5,1,0,0.5,0.5,1,1,-0.5,0.5,0,1]);E=new Uint16Array([0,1,2,0,2,3]);K=t.createBuffer();A=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,K);t.bufferData(t.ARRAY_BUFFER,J,t.STATIC_DRAW);t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,A);t.bufferData(t.ELEMENT_ARRAY_BUFFER,E,t.STATIC_DRAW);v=t.createProgram();
var F=t.createShader(t.VERTEX_SHADER),P=t.createShader(t.FRAGMENT_SHADER);t.shaderSource(F,["precision "+x.getPrecision()+" float;","uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position * scale;\nvec2 rotatedPosition;\nrotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\nrotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\nvec4 finalPosition;\nfinalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition;\nfinalPosition = projectionMatrix * finalPosition;\ngl_Position = finalPosition;\n}"].join("\n"));
t.shaderSource(P,["precision "+x.getPrecision()+" float;","uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"].join("\n"));
t.compileShader(F);t.compileShader(P);t.attachShader(v,F);t.attachShader(v,P);t.linkProgram(v);z=v;p=t.getAttribLocation(z,"position");w=t.getAttribLocation(z,"uv");a=t.getUniformLocation(z,"uvOffset");b=t.getUniformLocation(z,"uvScale");c=t.getUniformLocation(z,"rotation");d=t.getUniformLocation(z,"scale");e=t.getUniformLocation(z,"color");f=t.getUniformLocation(z,"map");g=t.getUniformLocation(z,"opacity");k=t.getUniformLocation(z,"modelViewMatrix");h=t.getUniformLocation(z,"projectionMatrix");m=
t.getUniformLocation(z,"fogType");n=t.getUniformLocation(z,"fogDensity");q=t.getUniformLocation(z,"fogNear");s=t.getUniformLocation(z,"fogFar");r=t.getUniformLocation(z,"fogColor");u=t.getUniformLocation(z,"alphaTest");v=document.createElement("canvas");v.width=8;v.height=8;F=v.getContext("2d");F.fillStyle="#ffffff";F.fillRect(0,0,v.width,v.height);B=new THREE.Texture(v);B.needsUpdate=!0};this.render=function(E,F,J,y){J=E.__webglSprites;if(y=J.length){t.useProgram(z);t.enableVertexAttribArray(p);
t.enableVertexAttribArray(w);t.disable(t.CULL_FACE);t.enable(t.BLEND);t.bindBuffer(t.ARRAY_BUFFER,K);t.vertexAttribPointer(p,2,t.FLOAT,!1,16,0);t.vertexAttribPointer(w,2,t.FLOAT,!1,16,8);t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,A);t.uniformMatrix4fv(h,!1,F.projectionMatrix.elements);t.activeTexture(t.TEXTURE0);t.uniform1i(f,0);var G=0,C=0,D=E.fog;D?(t.uniform3f(r,D.color.r,D.color.g,D.color.b),D instanceof THREE.Fog?(t.uniform1f(q,D.near),t.uniform1f(s,D.far),t.uniform1i(m,1),C=G=1):D instanceof THREE.FogExp2&&
(t.uniform1f(n,D.density),t.uniform1i(m,2),C=G=2)):(t.uniform1i(m,0),C=G=0);for(var H,Q=[],D=0;D<y;D++)H=J[D],!1!==H.visible&&(H._modelViewMatrix.multiplyMatrices(F.matrixWorldInverse,H.matrixWorld),H.z=-H._modelViewMatrix.elements[14]);J.sort(v);for(D=0;D<y;D++)H=J[D],!1!==H.visible&&(F=H.material,t.uniform1f(u,F.alphaTest),t.uniformMatrix4fv(k,!1,H._modelViewMatrix.elements),Q[0]=H.scale.x,Q[1]=H.scale.y,H=E.fog&&F.fog?C:0,G!==H&&(t.uniform1i(m,H),G=H),null!==F.map?(t.uniform2f(a,F.map.offset.x,
F.map.offset.y),t.uniform2f(b,F.map.repeat.x,F.map.repeat.y)):(t.uniform2f(a,0,0),t.uniform2f(b,1,1)),t.uniform1f(g,F.opacity),t.uniform3f(e,F.color.r,F.color.g,F.color.b),t.uniform1f(c,F.rotation),t.uniform2fv(d,Q),x.setBlending(F.blending,F.blendEquation,F.blendSrc,F.blendDst),x.setDepthTest(F.depthTest),x.setDepthWrite(F.depthWrite),F.map&&F.map.image&&F.map.image.width?x.setTexture(F.map,0):x.setTexture(B,0),t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0));t.enable(t.CULL_FACE)}}};THREE.DepthPassPlugin=function(){this.enabled=!1;this.renderTarget=null;var a,b,c,d,e,f,g=new THREE.Frustum,k=new THREE.Matrix4;this.init=function(g){a=g.context;b=g;g=THREE.ShaderLib.depthRGBA;var k=THREE.UniformsUtils.clone(g.uniforms);c=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:k});d=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:k,morphTargets:!0});e=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,
vertexShader:g.vertexShader,uniforms:k,skinning:!0});f=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:k,morphTargets:!0,skinning:!0});c._shadowPass=!0;d._shadowPass=!0;e._shadowPass=!0;f._shadowPass=!0};this.render=function(a,b){this.enabled&&this.update(a,b)};this.update=function(h,m){var n,q,s,r,u,p;a.clearColor(1,1,1,1);a.disable(a.BLEND);b.setDepthTest(!0);!0===h.autoUpdate&&h.updateMatrixWorld();m.matrixWorldInverse.getInverse(m.matrixWorld);k.multiplyMatrices(m.projectionMatrix,
m.matrixWorldInverse);g.setFromMatrix(k);b.setRenderTarget(this.renderTarget);b.clear();p=h.__webglObjects;n=0;for(q=p.length;n<q;n++)s=p[n],u=s.object,s.render=!1,!u.visible||(u instanceof THREE.Mesh||u instanceof THREE.ParticleSystem)&&u.frustumCulled&&!g.intersectsObject(u)||(u._modelViewMatrix.multiplyMatrices(m.matrixWorldInverse,u.matrixWorld),s.render=!0);var w;n=0;for(q=p.length;n<q;n++)s=p[n],s.render&&(u=s.object,s=s.buffer,u instanceof THREE.ParticleSystem&&!u.customDepthMaterial||((w=
u.material instanceof THREE.MeshFaceMaterial?u.material.materials[0]:u.material)&&b.setMaterialFaces(u.material),r=0<u.geometry.morphTargets.length&&w.morphTargets,w=u instanceof THREE.SkinnedMesh&&w.skinning,r=u.customDepthMaterial?u.customDepthMaterial:w?r?f:e:r?d:c,s instanceof THREE.BufferGeometry?b.renderBufferDirect(m,h.__lights,null,r,s,u):b.renderBuffer(m,h.__lights,null,r,s,u)));p=h.__webglObjectsImmediate;n=0;for(q=p.length;n<q;n++)s=p[n],u=s.object,u.visible&&(u._modelViewMatrix.multiplyMatrices(m.matrixWorldInverse,
u.matrixWorld),b.renderImmediateObject(m,h.__lights,null,c,u));n=b.getClearColor();q=b.getClearAlpha();a.clearColor(n.r,n.g,n.b,q);a.enable(a.BLEND)}};THREE.ShaderFlares={lensFlareVertexTexture:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"},lensFlare:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}};

// Export the THREE object for **Node.js**, with
// backwards-compatibility for the old `require()` API. If we're in
// the browser, add `_` as a global object via a string identifier,
// for Closure Compiler "advanced" mode.
if (typeof exports !== 'undefined') {
  if (typeof module !== 'undefined' && module.exports) {
    exports = module.exports = THREE;
  }
  exports.THREE = THREE;
} else {
  this['THREE'] = THREE;
}
